// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractSimpleAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractSimpleAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561000f575f80fd5b5060405162004520380380620045208339818101604052810190610033919061011a565b806040516100409061009d565b61004a91906101a0565b604051809103905ff080158015610063573d5f803e3d5ffd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506101b9565b6134ce806200105283390190565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100d8826100af565b9050919050565b5f6100e9826100ce565b9050919050565b6100f9816100df565b8114610103575f80fd5b50565b5f81519050610114816100f0565b92915050565b5f6020828403121561012f5761012e6100ab565b5b5f61013c84828501610106565b91505092915050565b5f819050919050565b5f61016861016361015e846100af565b610145565b6100af565b9050919050565b5f6101798261014e565b9050919050565b5f61018a8261016f565b9050919050565b61019a81610180565b82525050565b5f6020820190506101b35f830184610191565b92915050565b608051610e73620001df5f395f818160d80152818161013e015261022a0152610e735ff3fe608060405234801562000010575f80fd5b506004361062000044575f3560e01c806311464fbe14620000485780635fbfb9cf146200006a5780638cb84e1814620000a0575b5f80fd5b62000052620000d6565b604051620000619190620003ce565b60405180910390f35b62000088600480360381019062000082919062000467565b620000fa565b604051620000979190620003ce565b60405180910390f35b620000be6004803603810190620000b8919062000467565b620001fa565b604051620000cd9190620004bd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b5f80620001088484620001fa565b90505f8173ffffffffffffffffffffffffffffffffffffffff163b90505f81111562000139578192505050620001f4565b835f1b7f000000000000000000000000000000000000000000000000000000000000000086604051602401620001709190620004bd565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620001c3906200033a565b620001d09291906200056c565b8190604051809103905ff5905080158015620001ee573d5f803e3d5ffd5b50925050505b92915050565b5f620002f2825f1b6040518060200162000214906200033a565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000866040516024016200025c9190620004bd565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051602001620002b49291906200056c565b604051602081830303815290604052604051602001620002d6929190620005de565b60405160208183030381529060405280519060200120620002fa565b905092915050565b5f6200030883833062000310565b905092915050565b5f604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b610838806200060683390190565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f620003906200038a620003848462000348565b62000367565b62000348565b9050919050565b5f620003a38262000370565b9050919050565b5f620003b68262000397565b9050919050565b620003c881620003aa565b82525050565b5f602082019050620003e35f830184620003bd565b92915050565b5f80fd5b5f620003f98262000348565b9050919050565b6200040b81620003ed565b811462000416575f80fd5b50565b5f81359050620004298162000400565b92915050565b5f819050919050565b62000443816200042f565b81146200044e575f80fd5b50565b5f81359050620004618162000438565b92915050565b5f806040838503121562000480576200047f620003e9565b5b5f6200048f8582860162000419565b9250506020620004a28582860162000451565b9150509250929050565b620004b781620003ed565b82525050565b5f602082019050620004d25f830184620004ac565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101562000511578082015181840152602081019050620004f4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6200053882620004d8565b620005448185620004e2565b935062000556818560208601620004f2565b62000561816200051c565b840191505092915050565b5f604082019050620005815f830185620004ac565b81810360208301526200059581846200052c565b90509392505050565b5f81905092915050565b5f620005b482620004d8565b620005c081856200059e565b9350620005d2818560208601620004f2565b80840191505092915050565b5f620005eb8285620005a8565b9150620005f98284620005a8565b9150819050939250505056fe608060405260405161083838038061083883398181016040528101906100259190610501565b61003682825f61003d60201b60201c565b505061071d565b61004c8361007460201b60201c565b5f825111806100585750805b1561006f5761006d83836100c960201b60201c565b505b505050565b610083816100fc60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606100f48383604051806060016040528060278152602001610811602791396101be60201b60201c565b905092915050565b61010b8161024660201b60201c565b61014a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610141906105db565b60405180910390fd5b8061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61026860201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808573ffffffffffffffffffffffffffffffffffffffff16856040516101e7919061063d565b5f60405180830381855af49150503d805f811461021f576040519150601f19603f3d011682016040523d82523d5f602084013e610224565b606091505b509150915061023b8683838761027160201b60201c565b925050509392505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f819050919050565b606083156102d8575f8351036102d0576102908561024660201b60201c565b6102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c69061069d565b60405180910390fd5b5b8290506102e9565b6102e883836102f160201b60201c565b5b949350505050565b5f825111156103035781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033791906106fd565b60405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61037a82610351565b9050919050565b61038a81610370565b8114610394575f80fd5b50565b5f815190506103a581610381565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103f9826103b3565b810181811067ffffffffffffffff82111715610418576104176103c3565b5b80604052505050565b5f61042a610340565b905061043682826103f0565b919050565b5f67ffffffffffffffff821115610455576104546103c3565b5b61045e826103b3565b9050602081019050919050565b5f5b8381101561048857808201518184015260208101905061046d565b5f8484015250505050565b5f6104a56104a08461043b565b610421565b9050828152602081018484840111156104c1576104c06103af565b5b6104cc84828561046b565b509392505050565b5f82601f8301126104e8576104e76103ab565b5b81516104f8848260208601610493565b91505092915050565b5f806040838503121561051757610516610349565b5b5f61052485828601610397565b925050602083015167ffffffffffffffff8111156105455761054461034d565b5b610551858286016104d4565b9150509250929050565b5f82825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f6105c5602d8361055b565b91506105d08261056b565b604082019050919050565b5f6020820190508181035f8301526105f2816105b9565b9050919050565b5f81519050919050565b5f81905092915050565b5f610617826105f9565b6106218185610603565b935061063181856020860161046b565b80840191505092915050565b5f610648828461060d565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f610687601d8361055b565b915061069282610653565b602082019050919050565b5f6020820190508181035f8301526106b48161067b565b9050919050565b5f81519050919050565b5f6106cf826106bb565b6106d9818561055b565b93506106e981856020860161046b565b6106f2816103b3565b840191505092915050565b5f6020820190508181035f83015261071581846106c5565b905092915050565b60e8806107295f395ff3fe608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603a565b565b565b5f60356058565b905090565b365f80375f80365f845af43d5f803e805f81146054573d5ff35b3d5ffd5b5f60827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b60a9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f81905091905056fea264697066735822122040004ef64efc73fa57a7a8be4ba29e65a19781575fa49c5fb0702210c4822a8064736f6c63430008150033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a0e3782fb14ca2b8140502f099e6609b3a9ffcdec331aad9adbcfc7e626b5cd664736f6c6343000815003360c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50604051620034ce380380620034ce8339818101604052810190620000699190620001f0565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000ad620000b460201b60201c565b50620002fc565b5f60019054906101000a900460ff161562000106576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fd90620002a4565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff161015620001765760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516200016d9190620002e1565b60405180910390a15b565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001a7826200017c565b9050919050565b5f620001ba826200019b565b9050919050565b620001cc81620001ae565b8114620001d7575f80fd5b50565b5f81519050620001ea81620001c1565b92915050565b5f6020828403121562000208576200020762000178565b5b5f6200021784828501620001da565b91505092915050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f6200028c60278362000220565b9150620002998262000230565b604082019050919050565b5f6020820190508181035f830152620002bd816200027e565b9050919050565b5f60ff82169050919050565b620002db81620002c4565b82525050565b5f602082019050620002f65f830184620002d0565b92915050565b60805160a05161318d620003415f395f8181610b4f01526114a501525f81816106920152818161072001528181610936015281816109c40152610a73015261318d5ff3fe60806040526004361061010b575f3560e01c806352d1902d11610094578063bc197c8111610063578063bc197c8114610336578063c399ec8814610372578063c4d66de81461039c578063d087d288146103c4578063f23a6e61146103ee57610112565b806352d1902d146102905780638da5cb5b146102ba578063b0d691fe146102e4578063b61d27f61461030e57610112565b80633659cfe6116100db5780633659cfe6146101de5780633a871cdd146102065780634a58db19146102425780634d44560d1461024c5780634f1ef2861461027457610112565b806223de291461011657806301ffc9a71461013e578063150b7a021461017a57806318dfb3c7146101b657610112565b3661011257005b5f80fd5b348015610121575f80fd5b5061013c60048036038101906101379190611b99565b61042a565b005b348015610149575f80fd5b50610164600480360381019061015f9190611cb8565b610434565b6040516101719190611cfd565b60405180910390f35b348015610185575f80fd5b506101a0600480360381019061019b9190611d16565b61056d565b6040516101ad9190611da9565b60405180910390f35b3480156101c1575f80fd5b506101dc60048036038101906101d79190611e6c565b610581565b005b3480156101e9575f80fd5b5061020460048036038101906101ff9190611eea565b610690565b005b348015610211575f80fd5b5061022c60048036038101906102279190611f6b565b610816565b6040516102399190611fe6565b60405180910390f35b61024a610848565b005b348015610257575f80fd5b50610272600480360381019061026d919061203a565b6108b9565b005b61028e600480360381019061028991906121b0565b610934565b005b34801561029b575f80fd5b506102a4610a70565b6040516102b19190612219565b60405180910390f35b3480156102c5575f80fd5b506102ce610b27565b6040516102db9190612241565b60405180910390f35b3480156102ef575f80fd5b506102f8610b4c565b60405161030591906122b5565b60405180910390f35b348015610319575f80fd5b50610334600480360381019061032f91906122ce565b610b73565b005b348015610341575f80fd5b5061035c60048036038101906103579190612394565b610bcf565b6040516103699190611da9565b60405180910390f35b34801561037d575f80fd5b50610386610be6565b6040516103939190611fe6565b60405180910390f35b3480156103a7575f80fd5b506103c260048036038101906103bd9190611eea565b610c6b565b005b3480156103cf575f80fd5b506103d8610da5565b6040516103e59190611fe6565b60405180910390f35b3480156103f9575f80fd5b50610414600480360381019061040f919061246b565b610e2c565b6040516104219190611da9565b60405180910390f35b5050505050505050565b5f7f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fe57507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b5f63150b7a0260e01b905095945050505050565b610589610e41565b8181905084849050146105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c89061255b565b60405180910390fd5b5f5b84849050811015610689576106768585838181106105f4576105f3612579565b5b90506020020160208101906106099190611eea565b5f85858581811061061d5761061c612579565b5b905060200281019061062f91906125b2565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610f0f565b808061068190612641565b9150506105d3565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361071e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610715906126f8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661075d610f8f565b73ffffffffffffffffffffffffffffffffffffffff16146107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90612786565b60405180910390fd5b6107bc81610fe2565b610813815f67ffffffffffffffff8111156107da576107d961208c565b5b6040519080825280601f01601f19166020018201604052801561080c5781602001600182028036833780820191505090505b505f610fed565b50565b5f61081f611157565b61082984846111ce565b905061083884602001356112a8565b610841826112ab565b9392505050565b610850610b4c565b73ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016108899190612241565b5f604051808303818588803b1580156108a0575f80fd5b505af11580156108b2573d5f803e3d5ffd5b5050505050565b6108c1611342565b6108c9610b4c565b73ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b81526004016109039291906127b3565b5f604051808303815f87803b15801561091a575f80fd5b505af115801561092c573d5f803e3d5ffd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b9906126f8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a01610f8f565b73ffffffffffffffffffffffffffffffffffffffff1614610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90612786565b60405180910390fd5b610a6082610fe2565b610a6c82826001610fed565b5050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af69061284a565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b610b7b610e41565b610bc9848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610f0f565b50505050565b5f63bc197c8160e01b905098975050505050505050565b5f610bef610b4c565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c279190612241565b602060405180830381865afa158015610c42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c66919061287c565b905090565b5f8060019054906101000a900460ff16159050808015610c9a575060015f8054906101000a900460ff1660ff16105b80610cc65750610ca930611409565b158015610cc5575060015f8054906101000a900460ff1660ff16145b5b610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612917565b60405180910390fd5b60015f806101000a81548160ff021916908360ff1602179055508015610d405760015f60016101000a81548160ff0219169083151502179055505b610d498261142b565b8015610da1575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d98919061297a565b60405180910390a15b5050565b5f610dae610b4c565b73ffffffffffffffffffffffffffffffffffffffff166335567e1a305f6040518363ffffffff1660e01b8152600401610de89291906129ef565b602060405180830381865afa158015610e03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e27919061287c565b905090565b5f63f23a6e6160e01b90509695505050505050565b610e49610b4c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ece57505f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0490612a60565b60405180910390fd5b565b5f808473ffffffffffffffffffffffffffffffffffffffff168484604051610f379190612aea565b5f6040518083038185875af1925050503d805f8114610f71576040519150601f19603f3d011682016040523d82523d5f602084013e610f76565b606091505b509150915081610f8857805160208201fd5b5050505050565b5f610fbb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611509565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fea611342565b50565b6110187f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435f1b611512565b5f015f9054906101000a900460ff161561103a576110358361151b565b611152565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156110a257506040513d601f19601f8201168201806040525081019061109f9190612b14565b60015b6110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d890612baf565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612c3d565b60405180910390fd5b506111518383836115d1565b5b505050565b61115f610b4c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390612ca5565b60405180910390fd5b565b5f806111d9836115fc565b9050611240848061014001906111ef91906125b2565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508261162b90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff165f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461129d5760019150506112a2565b5f9150505b92915050565b50565b5f811461133f575f3373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906040516112f990612ce6565b5f60405180830381858888f193505050503d805f8114611334576040519150601f19603f3d011682016040523d82523d5f602084013e611339565b606091505b50509050505b50565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113c857503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fe90612d44565b60405180910390fd5b565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b805f60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de60405160405180910390a350565b5f819050919050565b5f819050919050565b61152481611409565b611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a90612dd2565b60405180910390fd5b8061158f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611509565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6115da83611650565b5f825111806115e65750805b156115f7576115f5838361169f565b505b505050565b5f8160405160200161160e9190612e64565b604051602081830303815290604052805190602001209050919050565b5f805f61163885856116cc565b9150915061164581611718565b819250505092915050565b6116598161151b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606116c483836040518060600160405280602781526020016131316027913961187d565b905092915050565b5f806041835103611709575f805f602086015192506040860151915060608601515f1a90506116fd878285856118ff565b94509450505050611711565b5f6002915091505b9250929050565b5f600481111561172b5761172a612e89565b5b81600481111561173e5761173d612e89565b5b031561187a576001600481111561175857611757612e89565b5b81600481111561176b5761176a612e89565b5b036117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a290612f00565b60405180910390fd5b600260048111156117bf576117be612e89565b5b8160048111156117d2576117d1612e89565b5b03611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990612f68565b60405180910390fd5b6003600481111561182657611825612e89565b5b81600481111561183957611838612e89565b5b03611879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187090612ff6565b60405180910390fd5b5b50565b60605f808573ffffffffffffffffffffffffffffffffffffffff16856040516118a69190612aea565b5f60405180830381855af49150503d805f81146118de576040519150601f19603f3d011682016040523d82523d5f602084013e6118e3565b606091505b50915091506118f4868383876119d7565b925050509392505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c1115611937575f6003915091506119ce565b5f6001878787876040515f815260200160405260405161195a9493929190613023565b6020604051602081039080840390855afa15801561197a573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119c6575f600192509250506119ce565b805f92509250505b94509492505050565b60608315611a38575f835103611a30576119f085611409565b611a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a26906130b0565b60405180910390fd5b5b829050611a43565b611a428383611a4b565b5b949350505050565b5f82511115611a5d5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a919190613110565b60405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ad482611aab565b9050919050565b611ae481611aca565b8114611aee575f80fd5b50565b5f81359050611aff81611adb565b92915050565b5f819050919050565b611b1781611b05565b8114611b21575f80fd5b50565b5f81359050611b3281611b0e565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611b5957611b58611b38565b5b8235905067ffffffffffffffff811115611b7657611b75611b3c565b5b602083019150836001820283011115611b9257611b91611b40565b5b9250929050565b5f805f805f805f8060c0898b031215611bb557611bb4611aa3565b5b5f611bc28b828c01611af1565b9850506020611bd38b828c01611af1565b9750506040611be48b828c01611af1565b9650506060611bf58b828c01611b24565b955050608089013567ffffffffffffffff811115611c1657611c15611aa7565b5b611c228b828c01611b44565b945094505060a089013567ffffffffffffffff811115611c4557611c44611aa7565b5b611c518b828c01611b44565b92509250509295985092959890939650565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c9781611c63565b8114611ca1575f80fd5b50565b5f81359050611cb281611c8e565b92915050565b5f60208284031215611ccd57611ccc611aa3565b5b5f611cda84828501611ca4565b91505092915050565b5f8115159050919050565b611cf781611ce3565b82525050565b5f602082019050611d105f830184611cee565b92915050565b5f805f805f60808688031215611d2f57611d2e611aa3565b5b5f611d3c88828901611af1565b9550506020611d4d88828901611af1565b9450506040611d5e88828901611b24565b935050606086013567ffffffffffffffff811115611d7f57611d7e611aa7565b5b611d8b88828901611b44565b92509250509295509295909350565b611da381611c63565b82525050565b5f602082019050611dbc5f830184611d9a565b92915050565b5f8083601f840112611dd757611dd6611b38565b5b8235905067ffffffffffffffff811115611df457611df3611b3c565b5b602083019150836020820283011115611e1057611e0f611b40565b5b9250929050565b5f8083601f840112611e2c57611e2b611b38565b5b8235905067ffffffffffffffff811115611e4957611e48611b3c565b5b602083019150836020820283011115611e6557611e64611b40565b5b9250929050565b5f805f8060408587031215611e8457611e83611aa3565b5b5f85013567ffffffffffffffff811115611ea157611ea0611aa7565b5b611ead87828801611dc2565b9450945050602085013567ffffffffffffffff811115611ed057611ecf611aa7565b5b611edc87828801611e17565b925092505092959194509250565b5f60208284031215611eff57611efe611aa3565b5b5f611f0c84828501611af1565b91505092915050565b5f80fd5b5f6101608284031215611f2f57611f2e611f15565b5b81905092915050565b5f819050919050565b611f4a81611f38565b8114611f54575f80fd5b50565b5f81359050611f6581611f41565b92915050565b5f805f60608486031215611f8257611f81611aa3565b5b5f84013567ffffffffffffffff811115611f9f57611f9e611aa7565b5b611fab86828701611f19565b9350506020611fbc86828701611f57565b9250506040611fcd86828701611b24565b9150509250925092565b611fe081611b05565b82525050565b5f602082019050611ff95f830184611fd7565b92915050565b5f61200982611aab565b9050919050565b61201981611fff565b8114612023575f80fd5b50565b5f8135905061203481612010565b92915050565b5f80604083850312156120505761204f611aa3565b5b5f61205d85828601612026565b925050602061206e85828601611b24565b9150509250929050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6120c28261207c565b810181811067ffffffffffffffff821117156120e1576120e061208c565b5b80604052505050565b5f6120f3611a9a565b90506120ff82826120b9565b919050565b5f67ffffffffffffffff82111561211e5761211d61208c565b5b6121278261207c565b9050602081019050919050565b828183375f83830152505050565b5f61215461214f84612104565b6120ea565b9050828152602081018484840111156121705761216f612078565b5b61217b848285612134565b509392505050565b5f82601f83011261219757612196611b38565b5b81356121a7848260208601612142565b91505092915050565b5f80604083850312156121c6576121c5611aa3565b5b5f6121d385828601611af1565b925050602083013567ffffffffffffffff8111156121f4576121f3611aa7565b5b61220085828601612183565b9150509250929050565b61221381611f38565b82525050565b5f60208201905061222c5f83018461220a565b92915050565b61223b81611aca565b82525050565b5f6020820190506122545f830184612232565b92915050565b5f819050919050565b5f61227d61227861227384611aab565b61225a565b611aab565b9050919050565b5f61228e82612263565b9050919050565b5f61229f82612284565b9050919050565b6122af81612295565b82525050565b5f6020820190506122c85f8301846122a6565b92915050565b5f805f80606085870312156122e6576122e5611aa3565b5b5f6122f387828801611af1565b945050602061230487828801611b24565b935050604085013567ffffffffffffffff81111561232557612324611aa7565b5b61233187828801611b44565b925092505092959194509250565b5f8083601f84011261235457612353611b38565b5b8235905067ffffffffffffffff81111561237157612370611b3c565b5b60208301915083602082028301111561238d5761238c611b40565b5b9250929050565b5f805f805f805f8060a0898b0312156123b0576123af611aa3565b5b5f6123bd8b828c01611af1565b98505060206123ce8b828c01611af1565b975050604089013567ffffffffffffffff8111156123ef576123ee611aa7565b5b6123fb8b828c0161233f565b9650965050606089013567ffffffffffffffff81111561241e5761241d611aa7565b5b61242a8b828c0161233f565b9450945050608089013567ffffffffffffffff81111561244d5761244c611aa7565b5b6124598b828c01611b44565b92509250509295985092959890939650565b5f805f805f8060a0878903121561248557612484611aa3565b5b5f61249289828a01611af1565b96505060206124a389828a01611af1565b95505060406124b489828a01611b24565b94505060606124c589828a01611b24565b935050608087013567ffffffffffffffff8111156124e6576124e5611aa7565b5b6124f289828a01611b44565b92509250509295509295509295565b5f82825260208201905092915050565b7f77726f6e67206172726179206c656e67746873000000000000000000000000005f82015250565b5f612545601383612501565b915061255082612511565b602082019050919050565b5f6020820190508181035f83015261257281612539565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126125ce576125cd6125a6565b5b80840192508235915067ffffffffffffffff8211156125f0576125ef6125aa565b5b60208301925060018202360383131561260c5761260b6125ae565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61264b82611b05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361267d5761267c612614565b5b600182019050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b5f6126e2602c83612501565b91506126ed82612688565b604082019050919050565b5f6020820190508181035f83015261270f816126d6565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b5f612770602c83612501565b915061277b82612716565b604082019050919050565b5f6020820190508181035f83015261279d81612764565b9050919050565b6127ad81611fff565b82525050565b5f6040820190506127c65f8301856127a4565b6127d36020830184611fd7565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c5f8201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b5f612834603883612501565b915061283f826127da565b604082019050919050565b5f6020820190508181035f83015261286181612828565b9050919050565b5f8151905061287681611b0e565b92915050565b5f6020828403121561289157612890611aa3565b5b5f61289e84828501612868565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f612901602e83612501565b915061290c826128a7565b604082019050919050565b5f6020820190508181035f83015261292e816128f5565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f61296461295f61295a84612935565b61225a565b61293e565b9050919050565b6129748161294a565b82525050565b5f60208201905061298d5f83018461296b565b92915050565b5f819050919050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6129d96129d46129cf84612993565b61225a565b61299c565b9050919050565b6129e9816129bf565b82525050565b5f604082019050612a025f830185612232565b612a0f60208301846129e0565b9392505050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e745f82015250565b5f612a4a602083612501565b9150612a5582612a16565b602082019050919050565b5f6020820190508181035f830152612a7781612a3e565b9050919050565b5f81519050919050565b5f81905092915050565b5f5b83811015612aaf578082015181840152602081019050612a94565b5f8484015250505050565b5f612ac482612a7e565b612ace8185612a88565b9350612ade818560208601612a92565b80840191505092915050565b5f612af58284612aba565b915081905092915050565b5f81519050612b0e81611f41565b92915050565b5f60208284031215612b2957612b28611aa3565b5b5f612b3684828501612b00565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e746174695f8201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b5f612b99602e83612501565b9150612ba482612b3f565b604082019050919050565b5f6020820190508181035f830152612bc681612b8d565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f785f8201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b5f612c27602983612501565b9150612c3282612bcd565b604082019050919050565b5f6020820190508181035f830152612c5481612c1b565b9050919050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000005f82015250565b5f612c8f601c83612501565b9150612c9a82612c5b565b602082019050919050565b5f6020820190508181035f830152612cbc81612c83565b9050919050565b50565b5f612cd15f83612a88565b9150612cdc82612cc3565b5f82019050919050565b5f612cf082612cc6565b9150819050919050565b7f6f6e6c79206f776e6572000000000000000000000000000000000000000000005f82015250565b5f612d2e600a83612501565b9150612d3982612cfa565b602082019050919050565b5f6020820190508181035f830152612d5b81612d22565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f612dbc602d83612501565b9150612dc782612d62565b604082019050919050565b5f6020820190508181035f830152612de981612db0565b9050919050565b5f81905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f612e2e601c83612df0565b9150612e3982612dfa565b601c82019050919050565b5f819050919050565b612e5e612e5982611f38565b612e44565b82525050565b5f612e6e82612e22565b9150612e7a8284612e4d565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f45434453413a20696e76616c6964207369676e617475726500000000000000005f82015250565b5f612eea601883612501565b9150612ef582612eb6565b602082019050919050565b5f6020820190508181035f830152612f1781612ede565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e677468005f82015250565b5f612f52601f83612501565b9150612f5d82612f1e565b602082019050919050565b5f6020820190508181035f830152612f7f81612f46565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c5f8201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b5f612fe0602283612501565b9150612feb82612f86565b604082019050919050565b5f6020820190508181035f83015261300d81612fd4565b9050919050565b61301d8161293e565b82525050565b5f6080820190506130365f83018761220a565b6130436020830186613014565b613050604083018561220a565b61305d606083018461220a565b95945050505050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f61309a601d83612501565b91506130a582613066565b602082019050919050565b5f6020820190508181035f8301526130c78161308e565b9050919050565b5f81519050919050565b5f6130e2826130ce565b6130ec8185612501565b93506130fc818560208601612a92565b6131058161207c565b840191505092915050565b5f6020820190508181035f83015261312881846130d8565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f5bacc386e3337e0f4798fdb1c243d5c3bb746bf33263ca34b620108740a7e6a64736f6c63430008150033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}
