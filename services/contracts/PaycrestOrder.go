// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPaycrestOrder is an auto generated low-level Go binding around an user-defined struct.
type IPaycrestOrder struct {
	Seller             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	Rate               *big.Int
	IsFulfilled        bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// PaycrestSettingManagerInstitution is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitution struct {
	Code [32]byte
	Name [32]byte
}

// PaycrestSettingManagerInstitutionByCode is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitutionByCode struct {
	Name     [32]byte
	Currency [32]byte
}

// PaycrestOrderMetaData contains all meta data concerning the PaycrestOrder contract.
var PaycrestOrderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"primaryValidator\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondaryValidator\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_primaryValidatorPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondaryValidatorPercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526113885f60146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f460015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4600160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200008f575f80fd5b5060405162003324380380620033248339818101604052810190620000b591906200025e565b620000d5620000c96200013160201b60201c565b6200013860201b60201c565b600160055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550506200028e565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200022882620001fd565b9050919050565b6200023a816200021c565b811462000245575f80fd5b50565b5f8151905062000258816200022f565b92915050565b5f60208284031215620002765762000275620001f9565b5b5f620002858482850162000248565b91505092915050565b613088806200029c5f395ff3fe608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063764bc355116100a057806399e3c0b41161006f57806399e3c0b4146102c7578063b810c636146102e3578063d8e8de3414610304578063e5b32cdf14610334578063f2fde38b1461036457610109565b8063764bc3551461022d578063768c6ec01461024957806387490d86146102795780638da5cb5b146102a957610109565b80633d8f8fb2116100dc5780633d8f8fb2146101a7578063715018a6146101c35780637249fbb6146101cd57806375151b63146101fd57610109565b8063026213381461010d5780632ebc53561461013d5780632f37cf961461015b578063322008821461018b575b5f80fd5b6101276004803603810190610122919061210b565b610380565b604051610134919061221a565b60405180910390f35b6101456104b4565b6040516101529190612279565b60405180910390f35b61017560048036038101906101709190612391565b6104dc565b6040516101829190612470565b60405180910390f35b6101a560048036038101906101a09190612622565b61097f565b005b6101c160048036038101906101bc919061267c565b610a85565b005b6101cb610c33565b005b6101e760048036038101906101e2919061210b565b610c46565b6040516101f491906126d4565b60405180910390f35b610217600480360381019061021291906126ed565b610ec2565b60405161022491906126d4565b60405180910390f35b61024760048036038101906102429190612755565b610f14565b005b610263600480360381019061025e919061210b565b610fd5565b6040516102709190612896565b60405180910390f35b610293600480360381019061028e919061210b565b6111fe565b6040516102a091906128dd565b60405180910390f35b6102b161123c565b6040516102be9190612279565b60405180910390f35b6102e160048036038101906102dc9190612920565b611263565b005b6102eb611449565b6040516102fb949392919061298e565b60405180910390f35b61031e600480360381019061031991906126ed565b6114a2565b60405161032b91906126d4565b60405180910390f35b61034e60048036038101906103499190612a26565b6114f4565b60405161035b91906126d4565b60405180910390f35b61037e600480360381019061037991906126ed565b611a06565b005b60605f60075f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156103f6578382905f5260205f2090600202016040518060400160405290815f8201548152602001600182015481525050815260200190600101906103b3565b5050505090505f815190505f8167ffffffffffffffff81111561041c5761041b612499565b5b60405190808252806020026020018201604052801561045557816020015b610442611fd2565b81526020019060019003908161043a5790505b5090505f5b828110156104a85783818151811061047557610474612abc565b5b60200260200101518282815181106104905761048f612abc565b5b6020026020010181905250808060010191505061045a565b50809350505050919050565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661055d576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105698a8a8a87611a88565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016105a693929190612ae9565b6020604051808303815f875af11580156105c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e69190612b32565b50600a5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061063490612b8a565b919050555033600a5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054604051602001610689929190612bd1565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001866bffffffffffffffffffffffff1681526020015f151581526020018973ffffffffffffffffffffffffffffffffffffffff168152602001620186a06bffffffffffffffffffffffff1681526020018a81525060095f8381526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050846bffffffffffffffffffffffff1689827fbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e87878760405161096a93929190612c42565b60405180910390a49998505050505050505050565b610987611bfa565b5f815190505f5b81811015610a7f5760075f8581526020019081526020015f208382815181106109ba576109b9612abc565b5b6020026020010151908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001015550506040518060400160405280848381518110610a1a57610a19612abc565b5b60200260200101516020015181526020018581525060085f858481518110610a4557610a44612abc565b5b60200260200101515f015181526020019081526020015f205f820151815f015560208201518160010155905050808060010191505061098e565b50505050565b610a8d611bfa565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af2576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f66656500000000000000000000000000000000000000000000000000000000008203610b5a578060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f72000000000000000000000000000000000000000000008203610bc6578060045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c2f565b7f7374616b650000000000000000000000000000000000000000000000000000008203610c2e578060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b610c3b611bfa565b610c445f611c78565b565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ccd576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095f8381526020019081526020015f20600401600c9054906101000a900460ff1615610d26576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160095f8481526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505f60095f8481526020019081526020015f2060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060095f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60095f8581526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660095f8681526020019081526020015f20600601546040518363ffffffff1660e01b8152600401610e4b929190612bd1565b6020604051808303815f875af1158015610e67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e8b9190612b32565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b610f1c611bfa565b825f60146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508160015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758838383604051610fc893929190612c72565b60405180910390a1505050565b610fdd611ff0565b60095f8381526020019081526020015f20604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff16151515158152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b6112066120a9565b60085f8381526020019081526020015f206040518060400160405290815f82015481526020016001820154815250509050919050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61126b611bfa565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112d0576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361134c578060055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036113cc578060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611409565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016114009190612470565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161143c93929190612ca7565b60405180910390a1505050565b5f805f805f60149054906101000a900467ffffffffffffffff1660015f9054906101000a900467ffffffffffffffff16600160089054906101000a900467ffffffffffffffff16620186a0935093509350935090919293565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461157b576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095f8881526020019081526020015f20600401600c9054906101000a900460ff16156115d4576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60095f8981526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260095f8a81526020019081526020015f2060050160148282829054906101000a90046bffffffffffffffffffffffff166116469190612cdc565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f60095f8a81526020019081526020015f2060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16036116e357600160095f8a81526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505b5f805f806116f18c88611d39565b93509350935093506117028c611e84565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b815260040161175e929190612bd1565b6020604051808303815f875af115801561177a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061179e9190612b32565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89856040518363ffffffff1660e01b81526004016117da929190612bd1565b6020604051808303815f875af11580156117f6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061181a9190612b32565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683856118659190612d1b565b6040518363ffffffff1660e01b8152600401611882929190612bd1565b6020604051808303815f875af115801561189e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118c29190612b32565b505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a223c368e888f8f8f89896040518863ffffffff1660e01b815260040161192a9796959493929190612dfb565b6020604051808303815f875af1158015611946573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196a9190612b32565b9050806119a3576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff168d7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e338a6040516119ea9190612e72565b60405180910390a3600196505050505050509695505050505050565b611a0e611bfa565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7390612efb565b60405180910390fd5b611a8581611c78565b50565b60055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611b08576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8303611b41576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ba6576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f801b60085f8381526020019081526020015f205f015403611bf4576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b611c02611fcb565b73ffffffffffffffffffffffffffffffffffffffff16611c2061123c565b73ffffffffffffffffffffffffffffffffffffffff1614611c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6d90612f63565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f805f805f60095f8881526020019081526020015f2060060154905060095f8881526020019081526020015f206003015481611d759190612f81565b9050620186a0866bffffffffffffffffffffffff1682611d959190612fb4565b611d9f9190613022565b9350620186a05f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff1685611dd09190612fb4565b611dda9190613022565b94508484611de89190612f81565b9350620186a060015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1686611e199190612fb4565b611e239190613022565b9250620186a0600160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1686611e559190612fb4565b611e5f9190613022565b91508183611e6d9190612d1b565b85611e789190612f81565b94505092959194509250565b5f60095f8381526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60095f8481526020019081526020015f2060030154905060095f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611f41929190612bd1565b6020604051808303815f875af1158015611f5d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f819190612b32565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b5f33905090565b60405180604001604052805f80191681526020015f80191681525090565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f6bffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180604001604052805f80191681526020015f80191681525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6120ea816120d8565b81146120f4575f80fd5b50565b5f81359050612105816120e1565b92915050565b5f602082840312156121205761211f6120d0565b5b5f61212d848285016120f7565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b612168816120d8565b82525050565b604082015f8201516121825f85018261215f565b506020820151612195602085018261215f565b50505050565b5f6121a6838361216e565b60408301905092915050565b5f602082019050919050565b5f6121c882612136565b6121d28185612140565b93506121dd83612150565b805f5b8381101561220d5781516121f4888261219b565b97506121ff836121b2565b9250506001810190506121e0565b5085935050505092915050565b5f6020820190508181035f83015261223281846121be565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6122638261223a565b9050919050565b61227381612259565b82525050565b5f60208201905061228c5f83018461226a565b92915050565b61229b81612259565b81146122a5575f80fd5b50565b5f813590506122b681612292565b92915050565b5f819050919050565b6122ce816122bc565b81146122d8575f80fd5b50565b5f813590506122e9816122c5565b92915050565b5f6bffffffffffffffffffffffff82169050919050565b61230f816122ef565b8114612319575f80fd5b50565b5f8135905061232a81612306565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261235157612350612330565b5b8235905067ffffffffffffffff81111561236e5761236d612334565b5b60208301915083600182028301111561238a57612389612338565b5b9250929050565b5f805f805f805f805f6101008a8c0312156123af576123ae6120d0565b5b5f6123bc8c828d016122a8565b99505060206123cd8c828d016122db565b98505060406123de8c828d016122a8565b97505060606123ef8c828d016122a8565b96505060806124008c828d016122db565b95505060a06124118c828d0161231c565b94505060c06124228c828d016120f7565b93505060e08a013567ffffffffffffffff811115612443576124426120d4565b5b61244f8c828d0161233c565b92509250509295985092959850929598565b61246a816120d8565b82525050565b5f6020820190506124835f830184612461565b92915050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6124cf82612489565b810181811067ffffffffffffffff821117156124ee576124ed612499565b5b80604052505050565b5f6125006120c7565b905061250c82826124c6565b919050565b5f67ffffffffffffffff82111561252b5761252a612499565b5b602082029050602081019050919050565b5f80fd5b5f604082840312156125555761255461253c565b5b61255f60406124f7565b90505f61256e848285016120f7565b5f830152506020612581848285016120f7565b60208301525092915050565b5f61259f61259a84612511565b6124f7565b905080838252602082019050604084028301858111156125c2576125c1612338565b5b835b818110156125eb57806125d78882612540565b8452602084019350506040810190506125c4565b5050509392505050565b5f82601f83011261260957612608612330565b5b813561261984826020860161258d565b91505092915050565b5f8060408385031215612638576126376120d0565b5b5f612645858286016120f7565b925050602083013567ffffffffffffffff811115612666576126656120d4565b5b612672858286016125f5565b9150509250929050565b5f8060408385031215612692576126916120d0565b5b5f61269f858286016120f7565b92505060206126b0858286016122a8565b9150509250929050565b5f8115159050919050565b6126ce816126ba565b82525050565b5f6020820190506126e75f8301846126c5565b92915050565b5f60208284031215612702576127016120d0565b5b5f61270f848285016122a8565b91505092915050565b5f67ffffffffffffffff82169050919050565b61273481612718565b811461273e575f80fd5b50565b5f8135905061274f8161272b565b92915050565b5f805f6060848603121561276c5761276b6120d0565b5b5f61277986828701612741565b935050602061278a86828701612741565b925050604061279b86828701612741565b9150509250925092565b6127ae81612259565b82525050565b6127bd816122bc565b82525050565b6127cc816122ef565b82525050565b6127db816126ba565b82525050565b61012082015f8201516127f65f8501826127a5565b50602082015161280960208501826127a5565b50604082015161281c60408501826127a5565b50606082015161282f60608501826127b4565b50608082015161284260808501826127c3565b5060a082015161285560a08501826127d2565b5060c082015161286860c08501826127a5565b5060e082015161287b60e08501826127c3565b506101008201516128906101008501826127b4565b50505050565b5f610120820190506128aa5f8301846127e1565b92915050565b604082015f8201516128c45f85018261215f565b5060208201516128d7602085018261215f565b50505050565b5f6040820190506128f05f8301846128b0565b92915050565b6128ff816126ba565b8114612909575f80fd5b50565b5f8135905061291a816128f6565b92915050565b5f805f60608486031215612937576129366120d0565b5b5f612944868287016120f7565b9350506020612955868287016122a8565b92505060406129668682870161290c565b9150509250925092565b61297981612718565b82525050565b612988816122bc565b82525050565b5f6080820190506129a15f830187612970565b6129ae6020830186612970565b6129bb6040830185612970565b6129c8606083018461297f565b95945050505050565b5f8083601f8401126129e6576129e5612330565b5b8235905067ffffffffffffffff811115612a0357612a02612334565b5b602083019150836020820283011115612a1f57612a1e612338565b5b9250929050565b5f805f805f8060a08789031215612a4057612a3f6120d0565b5b5f612a4d89828a016120f7565b9650506020612a5e89828a016122a8565b955050604087013567ffffffffffffffff811115612a7f57612a7e6120d4565b5b612a8b89828a016129d1565b94509450506060612a9e89828a016122a8565b9250506080612aaf89828a0161231c565b9150509295509295509295565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f606082019050612afc5f83018661226a565b612b09602083018561226a565b612b16604083018461297f565b949350505050565b5f81519050612b2c816128f6565b92915050565b5f60208284031215612b4757612b466120d0565b5b5f612b5484828501612b1e565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612b94826122bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bc657612bc5612b5d565b5b600182019050919050565b5f604082019050612be45f83018561226a565b612bf1602083018461297f565b9392505050565b5f82825260208201905092915050565b828183375f83830152505050565b5f612c218385612bf8565b9350612c2e838584612c08565b612c3783612489565b840190509392505050565b5f604082019050612c555f830186612461565b8181036020830152612c68818486612c16565b9050949350505050565b5f606082019050612c855f830186612970565b612c926020830185612970565b612c9f6040830184612970565b949350505050565b5f606082019050612cba5f830186612461565b612cc7602083018561226a565b612cd460408301846126c5565b949350505050565b5f612ce6826122ef565b9150612cf1836122ef565b925082820390506bffffffffffffffffffffffff811115612d1557612d14612b5d565b5b92915050565b5f612d25826122bc565b9150612d30836122bc565b9250828201905080821115612d4857612d47612b5d565b5b92915050565b5f82825260208201905092915050565b5f819050919050565b5f612d7283836127a5565b60208301905092915050565b5f612d8c60208401846122a8565b905092915050565b5f602082019050919050565b5f612dab8385612d4e565b9350612db682612d5e565b805f5b85811015612dee57612dcb8284612d7e565b612dd58882612d67565b9750612de083612d94565b925050600181019050612db9565b5085925050509392505050565b5f60c082019050612e0e5f83018a612461565b612e1b602083018961226a565b612e28604083018861226a565b8181036060830152612e3b818688612da0565b9050612e4a608083018561297f565b612e5760a083018461297f565b98975050505050505050565b612e6c816122ef565b82525050565b5f602082019050612e855f830184612e63565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612ee5602683612bf8565b9150612ef082612e8b565b604082019050919050565b5f6020820190508181035f830152612f1281612ed9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612f4d602083612bf8565b9150612f5882612f19565b602082019050919050565b5f6020820190508181035f830152612f7a81612f41565b9050919050565b5f612f8b826122bc565b9150612f96836122bc565b9250828203905081811115612fae57612fad612b5d565b5b92915050565b5f612fbe826122bc565b9150612fc9836122bc565b9250828202612fd7816122bc565b91508282048414831517612fee57612fed612b5d565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61302c826122bc565b9150613037836122bc565b92508261304757613046612ff5565b5b82820490509291505056fea2646970667358221220efb8c14df91a44ca10ab7631d54f97479cfeb66a81feaa304aa0627312d3f56864736f6c63430008150033",
}

// PaycrestOrderABI is the input ABI used to generate the binding from.
// Deprecated: Use PaycrestOrderMetaData.ABI instead.
var PaycrestOrderABI = PaycrestOrderMetaData.ABI

// PaycrestOrderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaycrestOrderMetaData.Bin instead.
var PaycrestOrderBin = PaycrestOrderMetaData.Bin

// DeployPaycrestOrder deploys a new Ethereum contract, binding an instance of PaycrestOrder to it.
func DeployPaycrestOrder(auth *bind.TransactOpts, backend bind.ContractBackend, _usdc common.Address) (common.Address, *types.Transaction, *PaycrestOrder, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaycrestOrderBin), backend, _usdc)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// PaycrestOrder is an auto generated Go binding around an Ethereum contract.
type PaycrestOrder struct {
	PaycrestOrderCaller     // Read-only binding to the contract
	PaycrestOrderTransactor // Write-only binding to the contract
	PaycrestOrderFilterer   // Log filterer for contract events
}

// PaycrestOrderCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaycrestOrderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaycrestOrderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaycrestOrderSession struct {
	Contract     *PaycrestOrder    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaycrestOrderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaycrestOrderCallerSession struct {
	Contract *PaycrestOrderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PaycrestOrderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaycrestOrderTransactorSession struct {
	Contract     *PaycrestOrderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PaycrestOrderRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaycrestOrderRaw struct {
	Contract *PaycrestOrder // Generic contract binding to access the raw methods on
}

// PaycrestOrderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaycrestOrderCallerRaw struct {
	Contract *PaycrestOrderCaller // Generic read-only contract binding to access the raw methods on
}

// PaycrestOrderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactorRaw struct {
	Contract *PaycrestOrderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaycrestOrder creates a new instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrder(address common.Address, backend bind.ContractBackend) (*PaycrestOrder, error) {
	contract, err := bindPaycrestOrder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// NewPaycrestOrderCaller creates a new read-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderCaller(address common.Address, caller bind.ContractCaller) (*PaycrestOrderCaller, error) {
	contract, err := bindPaycrestOrder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderCaller{contract: contract}, nil
}

// NewPaycrestOrderTransactor creates a new write-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderTransactor(address common.Address, transactor bind.ContractTransactor) (*PaycrestOrderTransactor, error) {
	contract, err := bindPaycrestOrder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransactor{contract: contract}, nil
}

// NewPaycrestOrderFilterer creates a new log filterer instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderFilterer(address common.Address, filterer bind.ContractFilterer) (*PaycrestOrderFilterer, error) {
	contract, err := bindPaycrestOrder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderFilterer{contract: contract}, nil
}

// bindPaycrestOrder binds a generic wrapper to an already deployed contract.
func bindPaycrestOrder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.PaycrestOrderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transact(opts, method, params...)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint64, uint64, uint256)
func (_PaycrestOrder *PaycrestOrderCaller) GetFeeDetails(opts *bind.CallOpts) (uint64, uint64, uint64, *big.Int, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getFeeDetails")

	if err != nil {
		return *new(uint64), *new(uint64), *new(uint64), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)
	out1 := *abi.ConvertType(out[1], new(uint64)).(*uint64)
	out2 := *abi.ConvertType(out[2], new(uint64)).(*uint64)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint64, uint64, uint256)
func (_PaycrestOrder *PaycrestOrderSession) GetFeeDetails() (uint64, uint64, uint64, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint64, uint64, uint256)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetFeeDetails() (uint64, uint64, uint64, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) GetLiquidityAggregator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getLiquidityAggregator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) GetLiquidityAggregator() (common.Address, error) {
	return _PaycrestOrder.Contract.GetLiquidityAggregator(&_PaycrestOrder.CallOpts)
}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetLiquidityAggregator() (common.Address, error) {
	return _PaycrestOrder.Contract.GetLiquidityAggregator(&_PaycrestOrder.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IPaycrestOrder, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IPaycrestOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IPaycrestOrder)).(*IPaycrestOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutionName(opts *bind.CallOpts, code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutionName", code)

	if err != nil {
		return *new(PaycrestSettingManagerInstitutionByCode), err
	}

	out0 := *abi.ConvertType(out[0], new(PaycrestSettingManagerInstitutionByCode)).(*PaycrestSettingManagerInstitutionByCode)

	return out0, err

}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutions(opts *bind.CallOpts, currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutions", currency)

	if err != nil {
		return *new([]PaycrestSettingManagerInstitution), err
	}

	out0 := *abi.ConvertType(out[0], new([]PaycrestSettingManagerInstitution)).(*[]PaycrestSettingManagerInstitution)

	return out0, err

}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) GetWhitelistedStatus(opts *bind.CallOpts, sender common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getWhitelistedStatus", sender)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2f37cf96.
//
// Solidity: function createOrder(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, uint96 _rate, bytes32 _institutionCode, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _refundAddress common.Address, _senderFeeRecipient common.Address, _senderFee *big.Int, _rate *big.Int, _institutionCode [32]byte, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "createOrder", _token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _rate, _institutionCode, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2f37cf96.
//
// Solidity: function createOrder(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, uint96 _rate, bytes32 _institutionCode, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderSession) CreateOrder(_token common.Address, _amount *big.Int, _refundAddress common.Address, _senderFeeRecipient common.Address, _senderFee *big.Int, _rate *big.Int, _institutionCode [32]byte, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _rate, _institutionCode, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2f37cf96.
//
// Solidity: function createOrder(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, uint96 _rate, bytes32 _institutionCode, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _refundAddress common.Address, _senderFeeRecipient common.Address, _senderFee *big.Int, _rate *big.Int, _institutionCode [32]byte, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _rate, _institutionCode, messageHash)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactor) Refund(opts *bind.TransactOpts, _orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "refund", _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) Refund(_orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Refund(_orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SetSupportedInstitutions(opts *bind.TransactOpts, currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "setSupportedInstitutions", currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0xe5b32cdf.
//
// Solidity: function settle(bytes32 _orderId, address _primaryValidator, address[] _secondaryValidators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactor) Settle(opts *bind.TransactOpts, _orderId [32]byte, _primaryValidator common.Address, _secondaryValidators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settle", _orderId, _primaryValidator, _secondaryValidators, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xe5b32cdf.
//
// Solidity: function settle(bytes32 _orderId, address _primaryValidator, address[] _secondaryValidators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) Settle(_orderId [32]byte, _primaryValidator common.Address, _secondaryValidators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _orderId, _primaryValidator, _secondaryValidators, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xe5b32cdf.
//
// Solidity: function settle(bytes32 _orderId, address _primaryValidator, address[] _secondaryValidators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Settle(_orderId [32]byte, _primaryValidator common.Address, _secondaryValidators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _orderId, _primaryValidator, _secondaryValidators, _liquidityProvider, _settlePercent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateFeeRecipient(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateFeeRecipient", what, value)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateFeeRecipient(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateFeeRecipient(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateFeeRecipient(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateFeeRecipient(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x764bc355.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateProtocolFees(opts *bind.TransactOpts, _protocolFeePercent uint64, _primaryValidatorPercent uint64, _secondaryValidatorPercent uint64) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateProtocolFees", _protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x764bc355.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateProtocolFees(_protocolFeePercent uint64, _primaryValidatorPercent uint64, _secondaryValidatorPercent uint64) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x764bc355.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateProtocolFees(_protocolFeePercent uint64, _primaryValidatorPercent uint64, _secondaryValidatorPercent uint64) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent)
}

// PaycrestOrderDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the PaycrestOrder contract.
type PaycrestOrderDepositIterator struct {
	Event *PaycrestOrderDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderDeposit represents a Deposit event raised by the PaycrestOrder contract.
type PaycrestOrderDeposit struct {
	OrderId         [32]byte
	Amount          *big.Int
	Rate            *big.Int
	InstitutionCode [32]byte
	MessageHash     string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e.
//
// Solidity: event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterDeposit(opts *bind.FilterOpts, orderId [][32]byte, amount []*big.Int, rate []*big.Int) (*PaycrestOrderDepositIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var rateRule []interface{}
	for _, rateItem := range rate {
		rateRule = append(rateRule, rateItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Deposit", orderIdRule, amountRule, rateRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderDepositIterator{contract: _PaycrestOrder.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e.
//
// Solidity: event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PaycrestOrderDeposit, orderId [][32]byte, amount []*big.Int, rate []*big.Int) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var rateRule []interface{}
	for _, rateItem := range rate {
		rateRule = append(rateRule, rateItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Deposit", orderIdRule, amountRule, rateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderDeposit)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e.
//
// Solidity: event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseDeposit(log types.Log) (*PaycrestOrderDeposit, error) {
	event := new(PaycrestOrderDeposit)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferredIterator struct {
	Event *PaycrestOrderOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderOwnershipTransferred represents a OwnershipTransferred event raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaycrestOrderOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderOwnershipTransferredIterator{contract: _PaycrestOrder.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaycrestOrderOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderOwnershipTransferred)
				if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseOwnershipTransferred(log types.Log) (*PaycrestOrderOwnershipTransferred, error) {
	event := new(PaycrestOrderOwnershipTransferred)
	if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderPaycrestFeesIterator is returned from FilterPaycrestFees and is used to iterate over the raw logs and unpacked data for PaycrestFees events raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFeesIterator struct {
	Event *PaycrestOrderPaycrestFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderPaycrestFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderPaycrestFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderPaycrestFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderPaycrestFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderPaycrestFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderPaycrestFees represents a PaycrestFees event raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFees struct {
	ProtocolFee        uint64
	PrimaryValidator   uint64
	SecondaryValidator uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterPaycrestFees is a free log retrieval operation binding the contract event 0xced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758.
//
// Solidity: event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterPaycrestFees(opts *bind.FilterOpts) (*PaycrestOrderPaycrestFeesIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderPaycrestFeesIterator{contract: _PaycrestOrder.contract, event: "PaycrestFees", logs: logs, sub: sub}, nil
}

// WatchPaycrestFees is a free log subscription operation binding the contract event 0xced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758.
//
// Solidity: event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchPaycrestFees(opts *bind.WatchOpts, sink chan<- *PaycrestOrderPaycrestFees) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderPaycrestFees)
				if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaycrestFees is a log parse operation binding the contract event 0xced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758.
//
// Solidity: event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator)
func (_PaycrestOrder *PaycrestOrderFilterer) ParsePaycrestFees(log types.Log) (*PaycrestOrderPaycrestFees, error) {
	event := new(PaycrestOrderPaycrestFees)
	if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderRefundedIterator is returned from FilterRefunded and is used to iterate over the raw logs and unpacked data for Refunded events raised by the PaycrestOrder contract.
type PaycrestOrderRefundedIterator struct {
	Event *PaycrestOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderRefunded represents a Refunded event raised by the PaycrestOrder contract.
type PaycrestOrderRefunded struct {
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRefunded is a free log retrieval operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*PaycrestOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderRefundedIterator{contract: _PaycrestOrder.contract, event: "Refunded", logs: logs, sub: sub}, nil
}

// WatchRefunded is a free log subscription operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchRefunded(opts *bind.WatchOpts, sink chan<- *PaycrestOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderRefunded)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefunded is a log parse operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseRefunded(log types.Log) (*PaycrestOrderRefunded, error) {
	event := new(PaycrestOrderRefunded)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBoolIterator struct {
	Event *PaycrestOrderSettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettingManagerBool represents a SettingManagerBool event raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettingManagerBool(opts *bind.FilterOpts) (*PaycrestOrderSettingManagerBoolIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettingManagerBoolIterator{contract: _PaycrestOrder.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettingManagerBool) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettingManagerBool)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettingManagerBool(log types.Log) (*PaycrestOrderSettingManagerBool, error) {
	event := new(PaycrestOrderSettingManagerBool)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettingManagerForInstitutionIterator is returned from FilterSettingManagerForInstitution and is used to iterate over the raw logs and unpacked data for SettingManagerForInstitution events raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerForInstitutionIterator struct {
	Event *PaycrestOrderSettingManagerForInstitution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettingManagerForInstitution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettingManagerForInstitution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettingManagerForInstitution represents a SettingManagerForInstitution event raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerForInstitution struct {
	What   [32]byte
	Value  [8]byte
	Status [8]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerForInstitution is a free log retrieval operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettingManagerForInstitution(opts *bind.FilterOpts) (*PaycrestOrderSettingManagerForInstitutionIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SettingManagerForInstitution")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettingManagerForInstitutionIterator{contract: _PaycrestOrder.contract, event: "SettingManagerForInstitution", logs: logs, sub: sub}, nil
}

// WatchSettingManagerForInstitution is a free log subscription operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettingManagerForInstitution(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettingManagerForInstitution) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SettingManagerForInstitution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettingManagerForInstitution)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerForInstitution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerForInstitution is a log parse operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettingManagerForInstitution(log types.Log) (*PaycrestOrderSettingManagerForInstitution, error) {
	event := new(PaycrestOrderSettingManagerForInstitution)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerForInstitution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettledIterator is returned from FilterSettled and is used to iterate over the raw logs and unpacked data for Settled events raised by the PaycrestOrder contract.
type PaycrestOrderSettledIterator struct {
	Event *PaycrestOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettled represents a Settled event raised by the PaycrestOrder contract.
type PaycrestOrderSettled struct {
	OrderId           [32]byte
	LiquidityProvider common.Address
	SettlePercent     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSettled is a free log retrieval operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*PaycrestOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettledIterator{contract: _PaycrestOrder.contract, event: "Settled", logs: logs, sub: sub}, nil
}

// WatchSettled is a free log subscription operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettled(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettled)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettled is a log parse operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettled(log types.Log) (*PaycrestOrderSettled, error) {
	event := new(PaycrestOrderSettled)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderTransferSenderFeeIterator is returned from FilterTransferSenderFee and is used to iterate over the raw logs and unpacked data for TransferSenderFee events raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFeeIterator struct {
	Event *PaycrestOrderTransferSenderFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderTransferSenderFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderTransferSenderFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderTransferSenderFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderTransferSenderFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderTransferSenderFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderTransferSenderFee represents a TransferSenderFee event raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFee struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferSenderFee is a free log retrieval operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterTransferSenderFee(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*PaycrestOrderTransferSenderFeeIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransferSenderFeeIterator{contract: _PaycrestOrder.contract, event: "TransferSenderFee", logs: logs, sub: sub}, nil
}

// WatchTransferSenderFee is a free log subscription operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchTransferSenderFee(opts *bind.WatchOpts, sink chan<- *PaycrestOrderTransferSenderFee, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderTransferSenderFee)
				if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSenderFee is a log parse operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseTransferSenderFee(log types.Log) (*PaycrestOrderTransferSenderFee, error) {
	event := new(PaycrestOrderTransferSenderFee)
	if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
