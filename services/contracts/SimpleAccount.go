// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserOperation is an auto generated low-level Go binding around an user-defined struct.
type UserOperation struct {
	Sender               common.Address
	Nonce                *big.Int
	InitCode             []byte
	CallData             []byte
	CallGasLimit         *big.Int
	VerificationGasLimit *big.Int
	PreVerificationGas   *big.Int
	MaxFeePerGas         *big.Int
	MaxPriorityFeePerGas *big.Int
	PaymasterAndData     []byte
	Signature            []byte
}

// SimpleAccountMetaData contains all meta data concerning the SimpleAccount contract.
var SimpleAccountMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"anEntryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractIEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SimpleAccountInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50604051620034ce380380620034ce8339818101604052810190620000699190620001f0565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000ad620000b460201b60201c565b50620002fc565b5f60019054906101000a900460ff161562000106576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fd90620002a4565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff161015620001765760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516200016d9190620002e1565b60405180910390a15b565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001a7826200017c565b9050919050565b5f620001ba826200019b565b9050919050565b620001cc81620001ae565b8114620001d7575f80fd5b50565b5f81519050620001ea81620001c1565b92915050565b5f6020828403121562000208576200020762000178565b5b5f6200021784828501620001da565b91505092915050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f6200028c60278362000220565b9150620002998262000230565b604082019050919050565b5f6020820190508181035f830152620002bd816200027e565b9050919050565b5f60ff82169050919050565b620002db81620002c4565b82525050565b5f602082019050620002f65f830184620002d0565b92915050565b60805160a05161318d620003415f395f8181610b4f01526114a501525f81816106920152818161072001528181610936015281816109c40152610a73015261318d5ff3fe60806040526004361061010b575f3560e01c806352d1902d11610094578063bc197c8111610063578063bc197c8114610336578063c399ec8814610372578063c4d66de81461039c578063d087d288146103c4578063f23a6e61146103ee57610112565b806352d1902d146102905780638da5cb5b146102ba578063b0d691fe146102e4578063b61d27f61461030e57610112565b80633659cfe6116100db5780633659cfe6146101de5780633a871cdd146102065780634a58db19146102425780634d44560d1461024c5780634f1ef2861461027457610112565b806223de291461011657806301ffc9a71461013e578063150b7a021461017a57806318dfb3c7146101b657610112565b3661011257005b5f80fd5b348015610121575f80fd5b5061013c60048036038101906101379190611b99565b61042a565b005b348015610149575f80fd5b50610164600480360381019061015f9190611cb8565b610434565b6040516101719190611cfd565b60405180910390f35b348015610185575f80fd5b506101a0600480360381019061019b9190611d16565b61056d565b6040516101ad9190611da9565b60405180910390f35b3480156101c1575f80fd5b506101dc60048036038101906101d79190611e6c565b610581565b005b3480156101e9575f80fd5b5061020460048036038101906101ff9190611eea565b610690565b005b348015610211575f80fd5b5061022c60048036038101906102279190611f6b565b610816565b6040516102399190611fe6565b60405180910390f35b61024a610848565b005b348015610257575f80fd5b50610272600480360381019061026d919061203a565b6108b9565b005b61028e600480360381019061028991906121b0565b610934565b005b34801561029b575f80fd5b506102a4610a70565b6040516102b19190612219565b60405180910390f35b3480156102c5575f80fd5b506102ce610b27565b6040516102db9190612241565b60405180910390f35b3480156102ef575f80fd5b506102f8610b4c565b60405161030591906122b5565b60405180910390f35b348015610319575f80fd5b50610334600480360381019061032f91906122ce565b610b73565b005b348015610341575f80fd5b5061035c60048036038101906103579190612394565b610bcf565b6040516103699190611da9565b60405180910390f35b34801561037d575f80fd5b50610386610be6565b6040516103939190611fe6565b60405180910390f35b3480156103a7575f80fd5b506103c260048036038101906103bd9190611eea565b610c6b565b005b3480156103cf575f80fd5b506103d8610da5565b6040516103e59190611fe6565b60405180910390f35b3480156103f9575f80fd5b50610414600480360381019061040f919061246b565b610e2c565b6040516104219190611da9565b60405180910390f35b5050505050505050565b5f7f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fe57507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b5f63150b7a0260e01b905095945050505050565b610589610e41565b8181905084849050146105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c89061255b565b60405180910390fd5b5f5b84849050811015610689576106768585838181106105f4576105f3612579565b5b90506020020160208101906106099190611eea565b5f85858581811061061d5761061c612579565b5b905060200281019061062f91906125b2565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610f0f565b808061068190612641565b9150506105d3565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361071e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610715906126f8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661075d610f8f565b73ffffffffffffffffffffffffffffffffffffffff16146107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90612786565b60405180910390fd5b6107bc81610fe2565b610813815f67ffffffffffffffff8111156107da576107d961208c565b5b6040519080825280601f01601f19166020018201604052801561080c5781602001600182028036833780820191505090505b505f610fed565b50565b5f61081f611157565b61082984846111ce565b905061083884602001356112a8565b610841826112ab565b9392505050565b610850610b4c565b73ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016108899190612241565b5f604051808303818588803b1580156108a0575f80fd5b505af11580156108b2573d5f803e3d5ffd5b5050505050565b6108c1611342565b6108c9610b4c565b73ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b81526004016109039291906127b3565b5f604051808303815f87803b15801561091a575f80fd5b505af115801561092c573d5f803e3d5ffd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b9906126f8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a01610f8f565b73ffffffffffffffffffffffffffffffffffffffff1614610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90612786565b60405180910390fd5b610a6082610fe2565b610a6c82826001610fed565b5050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af69061284a565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b610b7b610e41565b610bc9848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610f0f565b50505050565b5f63bc197c8160e01b905098975050505050505050565b5f610bef610b4c565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c279190612241565b602060405180830381865afa158015610c42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c66919061287c565b905090565b5f8060019054906101000a900460ff16159050808015610c9a575060015f8054906101000a900460ff1660ff16105b80610cc65750610ca930611409565b158015610cc5575060015f8054906101000a900460ff1660ff16145b5b610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612917565b60405180910390fd5b60015f806101000a81548160ff021916908360ff1602179055508015610d405760015f60016101000a81548160ff0219169083151502179055505b610d498261142b565b8015610da1575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d98919061297a565b60405180910390a15b5050565b5f610dae610b4c565b73ffffffffffffffffffffffffffffffffffffffff166335567e1a305f6040518363ffffffff1660e01b8152600401610de89291906129ef565b602060405180830381865afa158015610e03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e27919061287c565b905090565b5f63f23a6e6160e01b90509695505050505050565b610e49610b4c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ece57505f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0490612a60565b60405180910390fd5b565b5f808473ffffffffffffffffffffffffffffffffffffffff168484604051610f379190612aea565b5f6040518083038185875af1925050503d805f8114610f71576040519150601f19603f3d011682016040523d82523d5f602084013e610f76565b606091505b509150915081610f8857805160208201fd5b5050505050565b5f610fbb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611509565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fea611342565b50565b6110187f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435f1b611512565b5f015f9054906101000a900460ff161561103a576110358361151b565b611152565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156110a257506040513d601f19601f8201168201806040525081019061109f9190612b14565b60015b6110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d890612baf565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612c3d565b60405180910390fd5b506111518383836115d1565b5b505050565b61115f610b4c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390612ca5565b60405180910390fd5b565b5f806111d9836115fc565b9050611240848061014001906111ef91906125b2565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508261162b90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff165f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461129d5760019150506112a2565b5f9150505b92915050565b50565b5f811461133f575f3373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906040516112f990612ce6565b5f60405180830381858888f193505050503d805f8114611334576040519150601f19603f3d011682016040523d82523d5f602084013e611339565b606091505b50509050505b50565b5f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113c857503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fe90612d44565b60405180910390fd5b565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b805f60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de60405160405180910390a350565b5f819050919050565b5f819050919050565b61152481611409565b611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a90612dd2565b60405180910390fd5b8061158f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611509565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6115da83611650565b5f825111806115e65750805b156115f7576115f5838361169f565b505b505050565b5f8160405160200161160e9190612e64565b604051602081830303815290604052805190602001209050919050565b5f805f61163885856116cc565b9150915061164581611718565b819250505092915050565b6116598161151b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606116c483836040518060600160405280602781526020016131316027913961187d565b905092915050565b5f806041835103611709575f805f602086015192506040860151915060608601515f1a90506116fd878285856118ff565b94509450505050611711565b5f6002915091505b9250929050565b5f600481111561172b5761172a612e89565b5b81600481111561173e5761173d612e89565b5b031561187a576001600481111561175857611757612e89565b5b81600481111561176b5761176a612e89565b5b036117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a290612f00565b60405180910390fd5b600260048111156117bf576117be612e89565b5b8160048111156117d2576117d1612e89565b5b03611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990612f68565b60405180910390fd5b6003600481111561182657611825612e89565b5b81600481111561183957611838612e89565b5b03611879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187090612ff6565b60405180910390fd5b5b50565b60605f808573ffffffffffffffffffffffffffffffffffffffff16856040516118a69190612aea565b5f60405180830381855af49150503d805f81146118de576040519150601f19603f3d011682016040523d82523d5f602084013e6118e3565b606091505b50915091506118f4868383876119d7565b925050509392505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c1115611937575f6003915091506119ce565b5f6001878787876040515f815260200160405260405161195a9493929190613023565b6020604051602081039080840390855afa15801561197a573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119c6575f600192509250506119ce565b805f92509250505b94509492505050565b60608315611a38575f835103611a30576119f085611409565b611a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a26906130b0565b60405180910390fd5b5b829050611a43565b611a428383611a4b565b5b949350505050565b5f82511115611a5d5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a919190613110565b60405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ad482611aab565b9050919050565b611ae481611aca565b8114611aee575f80fd5b50565b5f81359050611aff81611adb565b92915050565b5f819050919050565b611b1781611b05565b8114611b21575f80fd5b50565b5f81359050611b3281611b0e565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611b5957611b58611b38565b5b8235905067ffffffffffffffff811115611b7657611b75611b3c565b5b602083019150836001820283011115611b9257611b91611b40565b5b9250929050565b5f805f805f805f8060c0898b031215611bb557611bb4611aa3565b5b5f611bc28b828c01611af1565b9850506020611bd38b828c01611af1565b9750506040611be48b828c01611af1565b9650506060611bf58b828c01611b24565b955050608089013567ffffffffffffffff811115611c1657611c15611aa7565b5b611c228b828c01611b44565b945094505060a089013567ffffffffffffffff811115611c4557611c44611aa7565b5b611c518b828c01611b44565b92509250509295985092959890939650565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c9781611c63565b8114611ca1575f80fd5b50565b5f81359050611cb281611c8e565b92915050565b5f60208284031215611ccd57611ccc611aa3565b5b5f611cda84828501611ca4565b91505092915050565b5f8115159050919050565b611cf781611ce3565b82525050565b5f602082019050611d105f830184611cee565b92915050565b5f805f805f60808688031215611d2f57611d2e611aa3565b5b5f611d3c88828901611af1565b9550506020611d4d88828901611af1565b9450506040611d5e88828901611b24565b935050606086013567ffffffffffffffff811115611d7f57611d7e611aa7565b5b611d8b88828901611b44565b92509250509295509295909350565b611da381611c63565b82525050565b5f602082019050611dbc5f830184611d9a565b92915050565b5f8083601f840112611dd757611dd6611b38565b5b8235905067ffffffffffffffff811115611df457611df3611b3c565b5b602083019150836020820283011115611e1057611e0f611b40565b5b9250929050565b5f8083601f840112611e2c57611e2b611b38565b5b8235905067ffffffffffffffff811115611e4957611e48611b3c565b5b602083019150836020820283011115611e6557611e64611b40565b5b9250929050565b5f805f8060408587031215611e8457611e83611aa3565b5b5f85013567ffffffffffffffff811115611ea157611ea0611aa7565b5b611ead87828801611dc2565b9450945050602085013567ffffffffffffffff811115611ed057611ecf611aa7565b5b611edc87828801611e17565b925092505092959194509250565b5f60208284031215611eff57611efe611aa3565b5b5f611f0c84828501611af1565b91505092915050565b5f80fd5b5f6101608284031215611f2f57611f2e611f15565b5b81905092915050565b5f819050919050565b611f4a81611f38565b8114611f54575f80fd5b50565b5f81359050611f6581611f41565b92915050565b5f805f60608486031215611f8257611f81611aa3565b5b5f84013567ffffffffffffffff811115611f9f57611f9e611aa7565b5b611fab86828701611f19565b9350506020611fbc86828701611f57565b9250506040611fcd86828701611b24565b9150509250925092565b611fe081611b05565b82525050565b5f602082019050611ff95f830184611fd7565b92915050565b5f61200982611aab565b9050919050565b61201981611fff565b8114612023575f80fd5b50565b5f8135905061203481612010565b92915050565b5f80604083850312156120505761204f611aa3565b5b5f61205d85828601612026565b925050602061206e85828601611b24565b9150509250929050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6120c28261207c565b810181811067ffffffffffffffff821117156120e1576120e061208c565b5b80604052505050565b5f6120f3611a9a565b90506120ff82826120b9565b919050565b5f67ffffffffffffffff82111561211e5761211d61208c565b5b6121278261207c565b9050602081019050919050565b828183375f83830152505050565b5f61215461214f84612104565b6120ea565b9050828152602081018484840111156121705761216f612078565b5b61217b848285612134565b509392505050565b5f82601f83011261219757612196611b38565b5b81356121a7848260208601612142565b91505092915050565b5f80604083850312156121c6576121c5611aa3565b5b5f6121d385828601611af1565b925050602083013567ffffffffffffffff8111156121f4576121f3611aa7565b5b61220085828601612183565b9150509250929050565b61221381611f38565b82525050565b5f60208201905061222c5f83018461220a565b92915050565b61223b81611aca565b82525050565b5f6020820190506122545f830184612232565b92915050565b5f819050919050565b5f61227d61227861227384611aab565b61225a565b611aab565b9050919050565b5f61228e82612263565b9050919050565b5f61229f82612284565b9050919050565b6122af81612295565b82525050565b5f6020820190506122c85f8301846122a6565b92915050565b5f805f80606085870312156122e6576122e5611aa3565b5b5f6122f387828801611af1565b945050602061230487828801611b24565b935050604085013567ffffffffffffffff81111561232557612324611aa7565b5b61233187828801611b44565b925092505092959194509250565b5f8083601f84011261235457612353611b38565b5b8235905067ffffffffffffffff81111561237157612370611b3c565b5b60208301915083602082028301111561238d5761238c611b40565b5b9250929050565b5f805f805f805f8060a0898b0312156123b0576123af611aa3565b5b5f6123bd8b828c01611af1565b98505060206123ce8b828c01611af1565b975050604089013567ffffffffffffffff8111156123ef576123ee611aa7565b5b6123fb8b828c0161233f565b9650965050606089013567ffffffffffffffff81111561241e5761241d611aa7565b5b61242a8b828c0161233f565b9450945050608089013567ffffffffffffffff81111561244d5761244c611aa7565b5b6124598b828c01611b44565b92509250509295985092959890939650565b5f805f805f8060a0878903121561248557612484611aa3565b5b5f61249289828a01611af1565b96505060206124a389828a01611af1565b95505060406124b489828a01611b24565b94505060606124c589828a01611b24565b935050608087013567ffffffffffffffff8111156124e6576124e5611aa7565b5b6124f289828a01611b44565b92509250509295509295509295565b5f82825260208201905092915050565b7f77726f6e67206172726179206c656e67746873000000000000000000000000005f82015250565b5f612545601383612501565b915061255082612511565b602082019050919050565b5f6020820190508181035f83015261257281612539565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126125ce576125cd6125a6565b5b80840192508235915067ffffffffffffffff8211156125f0576125ef6125aa565b5b60208301925060018202360383131561260c5761260b6125ae565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61264b82611b05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361267d5761267c612614565b5b600182019050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b5f6126e2602c83612501565b91506126ed82612688565b604082019050919050565b5f6020820190508181035f83015261270f816126d6565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b5f612770602c83612501565b915061277b82612716565b604082019050919050565b5f6020820190508181035f83015261279d81612764565b9050919050565b6127ad81611fff565b82525050565b5f6040820190506127c65f8301856127a4565b6127d36020830184611fd7565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c5f8201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b5f612834603883612501565b915061283f826127da565b604082019050919050565b5f6020820190508181035f83015261286181612828565b9050919050565b5f8151905061287681611b0e565b92915050565b5f6020828403121561289157612890611aa3565b5b5f61289e84828501612868565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f612901602e83612501565b915061290c826128a7565b604082019050919050565b5f6020820190508181035f83015261292e816128f5565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f61296461295f61295a84612935565b61225a565b61293e565b9050919050565b6129748161294a565b82525050565b5f60208201905061298d5f83018461296b565b92915050565b5f819050919050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6129d96129d46129cf84612993565b61225a565b61299c565b9050919050565b6129e9816129bf565b82525050565b5f604082019050612a025f830185612232565b612a0f60208301846129e0565b9392505050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e745f82015250565b5f612a4a602083612501565b9150612a5582612a16565b602082019050919050565b5f6020820190508181035f830152612a7781612a3e565b9050919050565b5f81519050919050565b5f81905092915050565b5f5b83811015612aaf578082015181840152602081019050612a94565b5f8484015250505050565b5f612ac482612a7e565b612ace8185612a88565b9350612ade818560208601612a92565b80840191505092915050565b5f612af58284612aba565b915081905092915050565b5f81519050612b0e81611f41565b92915050565b5f60208284031215612b2957612b28611aa3565b5b5f612b3684828501612b00565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e746174695f8201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b5f612b99602e83612501565b9150612ba482612b3f565b604082019050919050565b5f6020820190508181035f830152612bc681612b8d565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f785f8201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b5f612c27602983612501565b9150612c3282612bcd565b604082019050919050565b5f6020820190508181035f830152612c5481612c1b565b9050919050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000005f82015250565b5f612c8f601c83612501565b9150612c9a82612c5b565b602082019050919050565b5f6020820190508181035f830152612cbc81612c83565b9050919050565b50565b5f612cd15f83612a88565b9150612cdc82612cc3565b5f82019050919050565b5f612cf082612cc6565b9150819050919050565b7f6f6e6c79206f776e6572000000000000000000000000000000000000000000005f82015250565b5f612d2e600a83612501565b9150612d3982612cfa565b602082019050919050565b5f6020820190508181035f830152612d5b81612d22565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f612dbc602d83612501565b9150612dc782612d62565b604082019050919050565b5f6020820190508181035f830152612de981612db0565b9050919050565b5f81905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f612e2e601c83612df0565b9150612e3982612dfa565b601c82019050919050565b5f819050919050565b612e5e612e5982611f38565b612e44565b82525050565b5f612e6e82612e22565b9150612e7a8284612e4d565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f45434453413a20696e76616c6964207369676e617475726500000000000000005f82015250565b5f612eea601883612501565b9150612ef582612eb6565b602082019050919050565b5f6020820190508181035f830152612f1781612ede565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e677468005f82015250565b5f612f52601f83612501565b9150612f5d82612f1e565b602082019050919050565b5f6020820190508181035f830152612f7f81612f46565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c5f8201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b5f612fe0602283612501565b9150612feb82612f86565b604082019050919050565b5f6020820190508181035f83015261300d81612fd4565b9050919050565b61301d8161293e565b82525050565b5f6080820190506130365f83018761220a565b6130436020830186613014565b613050604083018561220a565b61305d606083018461220a565b95945050505050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f61309a601d83612501565b91506130a582613066565b602082019050919050565b5f6020820190508181035f8301526130c78161308e565b9050919050565b5f81519050919050565b5f6130e2826130ce565b6130ec8185612501565b93506130fc818560208601612a92565b6131058161207c565b840191505092915050565b5f6020820190508181035f83015261312881846130d8565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ed4ea83e1ce32bc91ab7a03f2fcaaa0a6252e24eac2e4bf2b9ca616e939b659064736f6c63430008150033",
}

// SimpleAccountABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountMetaData.ABI instead.
var SimpleAccountABI = SimpleAccountMetaData.ABI

// SimpleAccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountMetaData.Bin instead.
var SimpleAccountBin = SimpleAccountMetaData.Bin

// DeploySimpleAccount deploys a new Ethereum contract, binding an instance of SimpleAccount to it.
func DeploySimpleAccount(auth *bind.TransactOpts, backend bind.ContractBackend, anEntryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccount, error) {
	parsed, err := SimpleAccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountBin), backend, anEntryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccount{SimpleAccountCaller: SimpleAccountCaller{contract: contract}, SimpleAccountTransactor: SimpleAccountTransactor{contract: contract}, SimpleAccountFilterer: SimpleAccountFilterer{contract: contract}}, nil
}

// SimpleAccount is an auto generated Go binding around an Ethereum contract.
type SimpleAccount struct {
	SimpleAccountCaller     // Read-only binding to the contract
	SimpleAccountTransactor // Write-only binding to the contract
	SimpleAccountFilterer   // Log filterer for contract events
}

// SimpleAccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountSession struct {
	Contract     *SimpleAccount    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountCallerSession struct {
	Contract *SimpleAccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// SimpleAccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountTransactorSession struct {
	Contract     *SimpleAccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SimpleAccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountRaw struct {
	Contract *SimpleAccount // Generic contract binding to access the raw methods on
}

// SimpleAccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountCallerRaw struct {
	Contract *SimpleAccountCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountTransactorRaw struct {
	Contract *SimpleAccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccount creates a new instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccount(address common.Address, backend bind.ContractBackend) (*SimpleAccount, error) {
	contract, err := bindSimpleAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccount{SimpleAccountCaller: SimpleAccountCaller{contract: contract}, SimpleAccountTransactor: SimpleAccountTransactor{contract: contract}, SimpleAccountFilterer: SimpleAccountFilterer{contract: contract}}, nil
}

// NewSimpleAccountCaller creates a new read-only instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountCaller, error) {
	contract, err := bindSimpleAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountCaller{contract: contract}, nil
}

// NewSimpleAccountTransactor creates a new write-only instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountTransactor, error) {
	contract, err := bindSimpleAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountTransactor{contract: contract}, nil
}

// NewSimpleAccountFilterer creates a new log filterer instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFilterer, error) {
	contract, err := bindSimpleAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFilterer{contract: contract}, nil
}

// bindSimpleAccount binds a generic wrapper to an already deployed contract.
func bindSimpleAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccount *SimpleAccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccount.Contract.SimpleAccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccount *SimpleAccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.Contract.SimpleAccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccount *SimpleAccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccount.Contract.SimpleAccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccount *SimpleAccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccount.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccount *SimpleAccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccount *SimpleAccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccount.Contract.contract.Transact(opts, method, params...)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountCaller) EntryPoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "entryPoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountSession) EntryPoint() (common.Address, error) {
	return _SimpleAccount.Contract.EntryPoint(&_SimpleAccount.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountCallerSession) EntryPoint() (common.Address, error) {
	return _SimpleAccount.Contract.EntryPoint(&_SimpleAccount.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0xc399ec88.
//
// Solidity: function getDeposit() view returns(uint256)
func (_SimpleAccount *SimpleAccountCaller) GetDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "getDeposit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeposit is a free data retrieval call binding the contract method 0xc399ec88.
//
// Solidity: function getDeposit() view returns(uint256)
func (_SimpleAccount *SimpleAccountSession) GetDeposit() (*big.Int, error) {
	return _SimpleAccount.Contract.GetDeposit(&_SimpleAccount.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0xc399ec88.
//
// Solidity: function getDeposit() view returns(uint256)
func (_SimpleAccount *SimpleAccountCallerSession) GetDeposit() (*big.Int, error) {
	return _SimpleAccount.Contract.GetDeposit(&_SimpleAccount.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_SimpleAccount *SimpleAccountCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_SimpleAccount *SimpleAccountSession) GetNonce() (*big.Int, error) {
	return _SimpleAccount.Contract.GetNonce(&_SimpleAccount.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_SimpleAccount *SimpleAccountCallerSession) GetNonce() (*big.Int, error) {
	return _SimpleAccount.Contract.GetNonce(&_SimpleAccount.CallOpts)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC1155BatchReceived(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155BatchReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155BatchReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC1155Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC721Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC721Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountSession) Owner() (common.Address, error) {
	return _SimpleAccount.Contract.Owner(&_SimpleAccount.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountCallerSession) Owner() (common.Address, error) {
	return _SimpleAccount.Contract.Owner(&_SimpleAccount.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountSession) ProxiableUUID() ([32]byte, error) {
	return _SimpleAccount.Contract.ProxiableUUID(&_SimpleAccount.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountCallerSession) ProxiableUUID() ([32]byte, error) {
	return _SimpleAccount.Contract.ProxiableUUID(&_SimpleAccount.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SimpleAccount.Contract.SupportsInterface(&_SimpleAccount.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SimpleAccount.Contract.SupportsInterface(&_SimpleAccount.CallOpts, interfaceId)
}

// TokensReceived is a free data retrieval call binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address , address , uint256 , bytes , bytes ) pure returns()
func (_SimpleAccount *SimpleAccountCaller) TokensReceived(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte, arg5 []byte) error {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "tokensReceived", arg0, arg1, arg2, arg3, arg4, arg5)

	if err != nil {
		return err
	}

	return err

}

// TokensReceived is a free data retrieval call binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address , address , uint256 , bytes , bytes ) pure returns()
func (_SimpleAccount *SimpleAccountSession) TokensReceived(arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte, arg5 []byte) error {
	return _SimpleAccount.Contract.TokensReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// TokensReceived is a free data retrieval call binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address , address , uint256 , bytes , bytes ) pure returns()
func (_SimpleAccount *SimpleAccountCallerSession) TokensReceived(arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte, arg5 []byte) error {
	return _SimpleAccount.Contract.TokensReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddDeposit is a paid mutator transaction binding the contract method 0x4a58db19.
//
// Solidity: function addDeposit() payable returns()
func (_SimpleAccount *SimpleAccountTransactor) AddDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "addDeposit")
}

// AddDeposit is a paid mutator transaction binding the contract method 0x4a58db19.
//
// Solidity: function addDeposit() payable returns()
func (_SimpleAccount *SimpleAccountSession) AddDeposit() (*types.Transaction, error) {
	return _SimpleAccount.Contract.AddDeposit(&_SimpleAccount.TransactOpts)
}

// AddDeposit is a paid mutator transaction binding the contract method 0x4a58db19.
//
// Solidity: function addDeposit() payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) AddDeposit() (*types.Transaction, error) {
	return _SimpleAccount.Contract.AddDeposit(&_SimpleAccount.TransactOpts)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountTransactor) Execute(opts *bind.TransactOpts, dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "execute", dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Execute(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Execute(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x18dfb3c7.
//
// Solidity: function executeBatch(address[] dest, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountTransactor) ExecuteBatch(opts *bind.TransactOpts, dest []common.Address, arg1 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "executeBatch", dest, arg1)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x18dfb3c7.
//
// Solidity: function executeBatch(address[] dest, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountSession) ExecuteBatch(dest []common.Address, arg1 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ExecuteBatch(&_SimpleAccount.TransactOpts, dest, arg1)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x18dfb3c7.
//
// Solidity: function executeBatch(address[] dest, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) ExecuteBatch(dest []common.Address, arg1 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ExecuteBatch(&_SimpleAccount.TransactOpts, dest, arg1)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountTransactor) Initialize(opts *bind.TransactOpts, anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "initialize", anOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountSession) Initialize(anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Initialize(&_SimpleAccount.TransactOpts, anOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Initialize(anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Initialize(&_SimpleAccount.TransactOpts, anOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SimpleAccount *SimpleAccountTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SimpleAccount *SimpleAccountSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeTo(&_SimpleAccount.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeTo(&_SimpleAccount.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeToAndCall(&_SimpleAccount.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeToAndCall(&_SimpleAccount.TransactOpts, newImplementation, data)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_SimpleAccount *SimpleAccountTransactor) ValidateUserOp(opts *bind.TransactOpts, userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "validateUserOp", userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_SimpleAccount *SimpleAccountSession) ValidateUserOp(userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ValidateUserOp(&_SimpleAccount.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_SimpleAccount *SimpleAccountTransactorSession) ValidateUserOp(userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ValidateUserOp(&_SimpleAccount.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// WithdrawDepositTo is a paid mutator transaction binding the contract method 0x4d44560d.
//
// Solidity: function withdrawDepositTo(address withdrawAddress, uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactor) WithdrawDepositTo(opts *bind.TransactOpts, withdrawAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "withdrawDepositTo", withdrawAddress, amount)
}

// WithdrawDepositTo is a paid mutator transaction binding the contract method 0x4d44560d.
//
// Solidity: function withdrawDepositTo(address withdrawAddress, uint256 amount) returns()
func (_SimpleAccount *SimpleAccountSession) WithdrawDepositTo(withdrawAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawDepositTo(&_SimpleAccount.TransactOpts, withdrawAddress, amount)
}

// WithdrawDepositTo is a paid mutator transaction binding the contract method 0x4d44560d.
//
// Solidity: function withdrawDepositTo(address withdrawAddress, uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) WithdrawDepositTo(withdrawAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawDepositTo(&_SimpleAccount.TransactOpts, withdrawAddress, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountSession) Receive() (*types.Transaction, error) {
	return _SimpleAccount.Contract.Receive(&_SimpleAccount.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Receive() (*types.Transaction, error) {
	return _SimpleAccount.Contract.Receive(&_SimpleAccount.TransactOpts)
}

// SimpleAccountAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the SimpleAccount contract.
type SimpleAccountAdminChangedIterator struct {
	Event *SimpleAccountAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountAdminChanged represents a AdminChanged event raised by the SimpleAccount contract.
type SimpleAccountAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SimpleAccount *SimpleAccountFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*SimpleAccountAdminChangedIterator, error) {

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &SimpleAccountAdminChangedIterator{contract: _SimpleAccount.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SimpleAccount *SimpleAccountFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *SimpleAccountAdminChanged) (event.Subscription, error) {

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountAdminChanged)
				if err := _SimpleAccount.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_SimpleAccount *SimpleAccountFilterer) ParseAdminChanged(log types.Log) (*SimpleAccountAdminChanged, error) {
	event := new(SimpleAccountAdminChanged)
	if err := _SimpleAccount.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the SimpleAccount contract.
type SimpleAccountBeaconUpgradedIterator struct {
	Event *SimpleAccountBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountBeaconUpgraded represents a BeaconUpgraded event raised by the SimpleAccount contract.
type SimpleAccountBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SimpleAccount *SimpleAccountFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*SimpleAccountBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountBeaconUpgradedIterator{contract: _SimpleAccount.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SimpleAccount *SimpleAccountFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *SimpleAccountBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountBeaconUpgraded)
				if err := _SimpleAccount.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_SimpleAccount *SimpleAccountFilterer) ParseBeaconUpgraded(log types.Log) (*SimpleAccountBeaconUpgraded, error) {
	event := new(SimpleAccountBeaconUpgraded)
	if err := _SimpleAccount.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SimpleAccount contract.
type SimpleAccountInitializedIterator struct {
	Event *SimpleAccountInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountInitialized represents a Initialized event raised by the SimpleAccount contract.
type SimpleAccountInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SimpleAccount *SimpleAccountFilterer) FilterInitialized(opts *bind.FilterOpts) (*SimpleAccountInitializedIterator, error) {

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SimpleAccountInitializedIterator{contract: _SimpleAccount.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SimpleAccount *SimpleAccountFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SimpleAccountInitialized) (event.Subscription, error) {

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountInitialized)
				if err := _SimpleAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SimpleAccount *SimpleAccountFilterer) ParseInitialized(log types.Log) (*SimpleAccountInitialized, error) {
	event := new(SimpleAccountInitialized)
	if err := _SimpleAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountSimpleAccountInitializedIterator is returned from FilterSimpleAccountInitialized and is used to iterate over the raw logs and unpacked data for SimpleAccountInitialized events raised by the SimpleAccount contract.
type SimpleAccountSimpleAccountInitializedIterator struct {
	Event *SimpleAccountSimpleAccountInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountSimpleAccountInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountSimpleAccountInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountSimpleAccountInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountSimpleAccountInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountSimpleAccountInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountSimpleAccountInitialized represents a SimpleAccountInitialized event raised by the SimpleAccount contract.
type SimpleAccountSimpleAccountInitialized struct {
	EntryPoint common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSimpleAccountInitialized is a free log retrieval operation binding the contract event 0x47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de.
//
// Solidity: event SimpleAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) FilterSimpleAccountInitialized(opts *bind.FilterOpts, entryPoint []common.Address, owner []common.Address) (*SimpleAccountSimpleAccountInitializedIterator, error) {

	var entryPointRule []interface{}
	for _, entryPointItem := range entryPoint {
		entryPointRule = append(entryPointRule, entryPointItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "SimpleAccountInitialized", entryPointRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountSimpleAccountInitializedIterator{contract: _SimpleAccount.contract, event: "SimpleAccountInitialized", logs: logs, sub: sub}, nil
}

// WatchSimpleAccountInitialized is a free log subscription operation binding the contract event 0x47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de.
//
// Solidity: event SimpleAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) WatchSimpleAccountInitialized(opts *bind.WatchOpts, sink chan<- *SimpleAccountSimpleAccountInitialized, entryPoint []common.Address, owner []common.Address) (event.Subscription, error) {

	var entryPointRule []interface{}
	for _, entryPointItem := range entryPoint {
		entryPointRule = append(entryPointRule, entryPointItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "SimpleAccountInitialized", entryPointRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountSimpleAccountInitialized)
				if err := _SimpleAccount.contract.UnpackLog(event, "SimpleAccountInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSimpleAccountInitialized is a log parse operation binding the contract event 0x47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de.
//
// Solidity: event SimpleAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) ParseSimpleAccountInitialized(log types.Log) (*SimpleAccountSimpleAccountInitialized, error) {
	event := new(SimpleAccountSimpleAccountInitialized)
	if err := _SimpleAccount.contract.UnpackLog(event, "SimpleAccountInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the SimpleAccount contract.
type SimpleAccountUpgradedIterator struct {
	Event *SimpleAccountUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountUpgraded represents a Upgraded event raised by the SimpleAccount contract.
type SimpleAccountUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*SimpleAccountUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountUpgradedIterator{contract: _SimpleAccount.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *SimpleAccountUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountUpgraded)
				if err := _SimpleAccount.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) ParseUpgraded(log types.Log) (*SimpleAccountUpgraded, error) {
	event := new(SimpleAccountUpgraded)
	if err := _SimpleAccount.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
