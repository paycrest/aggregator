// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GatewaySettingManagerTokenFeeSettings is an auto generated low-level Go binding around an user-defined struct.
type GatewaySettingManagerTokenFeeSettings struct {
	SenderToProvider       *big.Int
	ProviderToAggregator   *big.Int
	SenderToAggregator     *big.Int
	ProviderToAggregatorFx *big.Int
}

// IGatewayOrder is an auto generated low-level Go binding around an user-defined struct.
type IGatewayOrder struct {
	Sender             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	ProtocolFee        *big.Int
	IsFulfilled        bool
	IsRefunded         bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// GatewayMetaData contains all meta data concerning the Gateway contract.
var GatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregatorAmount\",\"type\":\"uint256\"}],\"name\":\"FxTransferFeeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregatorAmount\",\"type\":\"uint256\"}],\"name\":\"LocalTransferFeeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"settlePercent\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rebatePercent\",\"type\":\"uint64\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderToProvider\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providerToAggregator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderToAggregator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providerToAggregatorFx\",\"type\":\"uint256\"}],\"name\":\"TokenFeeSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIGateway.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenFeeSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"senderToProvider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerToAggregator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderToAggregator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerToAggregatorFx\",\"type\":\"uint256\"}],\"internalType\":\"structGatewaySettingManager.TokenFeeSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToProvider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerToAggregator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderToAggregator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerToAggregatorFx\",\"type\":\"uint256\"}],\"name\":\"setTokenFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_rebatePercent\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b5061001e61002360201b60201c565b6101b3565b5f60019054906101000a900460ff1615610072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006990610161565b60405180910390fd5b60ff80165f5f9054906101000a900460ff1660ff16146100df5760ff5f5f6101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516100d6919061019a565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f61014b6027836100e1565b9150610156826100f1565b604082019050919050565b5f6020820190508181035f8301526101788161013f565b9050919050565b5f60ff82169050919050565b6101948161017f565b82525050565b5f6020820190506101ad5f83018461018b565b92915050565b6148fd806101c05f395ff3fe608060405234801561000f575f5ffd5b5060043610610114575f3560e01c80638129fc1c116100a05780638da5cb5b1161006f5780638da5cb5b14610290578063cd992400146102ae578063df51b359146102ca578063e30c3978146102fa578063f2fde38b1461031857610114565b80638129fc1c146102305780638456cb591461023a578063898861b0146102445780638bfa05491461026057610114565b806371eedb88116100e757806371eedb881461016657806375151b6314610196578063768c6ec0146101c657806379ba5097146101f6578063809804f71461020057610114565b80633f4ba83a1461011857806340ebc677146101225780635c975abb1461013e578063715018a61461015c575b5f5ffd5b610120610334565b005b61013c6004803603810190610137919061313e565b610346565b005b61014661060a565b6040516101539190613196565b60405180910390f35b61016461061f565b005b610180600480360381019061017b91906131e2565b610632565b60405161018d9190613196565b60405180910390f35b6101b060048036038101906101ab9190613220565b610a8d565b6040516101bd9190613196565b60405180910390f35b6101e060048036038101906101db919061324b565b610ae5565b6040516101ed9190613393565b60405180910390f35b6101fe610cf5565b005b61021a60048036038101906102159190613438565b610d81565b6040516102279190613504565b60405180910390f35b610238611408565b005b610242611554565b005b61025e6004803603810190610259919061351d565b611566565b005b61027a60048036038101906102759190613220565b6117e4565b60405161028791906135e7565b60405180910390f35b610298611862565b6040516102a5919061360f565b60405180910390f35b6102c860048036038101906102c39190613628565b61188a565b005b6102e460048036038101906102df91906136b5565b611a0c565b6040516102f19190613196565b60405180910390f35b6103026120b5565b60405161030f919061360f565b60405180910390f35b610332600480360381019061032d9190613220565b6120dd565b005b61033c612189565b610344612207565b565b61034e612189565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b390613786565b60405180910390fd5b5f7f747265617375727900000000000000000000000000000000000000000000000083036104be578173ffffffffffffffffffffffffffffffffffffffff16609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b90613814565b60405180910390fd5b81609860086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506105ba565b7f61676772656761746f720000000000000000000000000000000000000000000083036105b9578173ffffffffffffffffffffffffffffffffffffffff1660995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b906138a2565b60405180910390fd5b8160995f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b5b8015610605578173ffffffffffffffffffffffffffffffffffffffff16837fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a460405160405180910390a35b505050565b5f60cd5f9054906101000a900460ff16905090565b610627612189565b6106305f612268565b565b5f60995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b99061390a565b60405180910390fd5b60ff5f8381526020019081526020015f206005015f9054906101000a900460ff1615610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071a90613972565b60405180910390fd5b60ff5f8381526020019081526020015f2060050160019054906101000a900460ff1615610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c906139da565b60405180910390fd5b8260ff5f8481526020019081526020015f206004015410156107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390613a42565b60405180910390fd5b5f8311156108b65760ff5f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401610874929190613a6f565b6020604051808303815f875af1158015610890573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b49190613ac0565b505b600160ff5f8481526020019081526020015f2060050160016101000a81548160ff0219169083151502179055505f60ff5f8481526020019081526020015f206006015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f8360ff5f8581526020019081526020015f20600701546109469190613b18565b905060ff5f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60ff5f8681526020019081526020015f2060050160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660ff5f8781526020019081526020015f2060030154846109ec9190613b4b565b6040518363ffffffff1660e01b8152600401610a09929190613a6f565b6020604051808303815f875af1158015610a25573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a499190613ac0565b50827f0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e85604051610a7a9190613b7e565b60405180910390a2600191505092915050565b5f6001609a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205403610adc5760019050610ae0565b5f90505b919050565b610aed612fd2565b60ff5f8381526020019081526020015f20604051806101400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015f9054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016007820154815250509050919050565b5f610cfe612298565b90508073ffffffffffffffffffffffffffffffffffffffff16610d1f6120b5565b73ffffffffffffffffffffffffffffffffffffffff1614610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c90613c07565b60405180910390fd5b610d7e81612268565b50565b5f610d8a61229f565b610d9789898689896122e9565b5f8383905003610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390613c6f565b60405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff166323b872dd3330888c610e069190613b4b565b6040518463ffffffff1660e01b8152600401610e2493929190613c8d565b6020604051808303815f875af1158015610e40573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e649190613ac0565b506101005f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190610eb390613cc2565b9190505550336101005f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205446604051602001610f0b93929190613d09565b6040516020818303038152906040528051906020012090505f73ffffffffffffffffffffffffffffffffffffffff1660ff5f8381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90613d88565b60405180910390fd5b5f6064886bffffffffffffffffffffffff1603611024575f90505f861161101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101690613df0565b60405180910390fd5b6110fd565b5f609b5f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201548152505090505f8160600151116110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390613e58565b60405180910390fd5b60975481606001518b6110ef9190613e76565b6110f99190613ee4565b9150505b6040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018281526020015f151581526020015f151581526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160975467ffffffffffffffff166bffffffffffffffffffffffff1681526020018a81525060ff5f8481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015f6101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e08201518160050160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610100820151816006015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610120820151816007015590505060ff5f8381526020019081526020015f20600701548a73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a13784868d8a8a6040516113f3959493929190613f97565b60405180910390a45098975050505050505050565b5f5f60019054906101000a900460ff16159050808015611438575060015f5f9054906101000a900460ff1660ff16105b80611465575061144730612496565b158015611464575060015f5f9054906101000a900460ff1660ff16145b5b6114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b90614053565b60405180910390fd5b60015f5f6101000a81548160ff021916908360ff16021790555080156114df5760015f60016101000a81548160ff0219169083151502179055505b620186a06097819055506114f16124b8565b6114f9612510565b8015611551575f5f60016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161154891906140b6565b60405180910390a15b50565b61155c612189565b611564612568565b565b61156e612189565b6001609a5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054146115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e590614119565b60405180910390fd5b609754841115611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a906141a7565b60405180910390fd5b609754831115611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f90614235565b60405180910390fd5b6097548211156116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b4906142c3565b60405180910390fd5b609754811115611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990614351565b60405180910390fd5b604051806080016040528085815260200184815260200183815260200182815250609b5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015560408201518160020155606082015181600301559050508473ffffffffffffffffffffffffffffffffffffffff167fd4d646cffa66ebf695b792bd660c97076ed45a889e14d544eb8ab8a44b34a59c858585856040516117d5949392919061436f565b60405180910390a25050505050565b6117ec613085565b609b5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611892612189565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f790613786565b60405180910390fd5b600181148061190f5750600281145b61194e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611945906143fc565b60405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303611a075780609a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff16837fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c836040516119fe9190613b7e565b60405180910390a35b505050565b5f60995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a939061390a565b60405180910390fd5b60ff5f8681526020019081526020015f206005015f9054906101000a900460ff1615611afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af490613972565b60405180910390fd5b60ff5f8681526020019081526020015f2060050160019054906101000a900460ff1615611b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b56906139da565b60405180910390fd5b6097548267ffffffffffffffff161115611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba590614464565b60405180910390fd5b5f60ff5f8781526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60ff5f8881526020019081526020015f206006015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1690508467ffffffffffffffff1660ff5f8981526020019081526020015f206006015f8282829054906101000a90046bffffffffffffffffffffffff16611c669190614482565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f60ff5f8981526020019081526020015f206006015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603611d4857600160ff5f8981526020019081526020015f206005015f6101000a81548160ff0219169083151502179055505f60ff5f8981526020019081526020015f206003015414158015611d3857505f60ff5f8981526020019081526020015f206004015414155b15611d4757611d46876125ca565b5b5b5f60ff5f8981526020019081526020015f206003015414158015611d7f57505f60ff5f8981526020019081526020015f2060040154145b15611d9057611d8f878787612940565b5b5f818667ffffffffffffffff1660ff5f8b81526020019081526020015f2060070154611dbc9190613e76565b611dc69190613ee4565b90508060ff5f8a81526020019081526020015f206007015f828254611deb9190613b18565b925050819055505f60ff5f8a81526020019081526020015f206004015414611fd6575f609b5f60ff5f8c81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201548152505090505f609754826060015184611ec69190613e76565b611ed09190613ee4565b90508083611ede9190613b18565b92505f8767ffffffffffffffff1614611f35575f6097548867ffffffffffffffff1683611f0b9190613e76565b611f159190613ee4565b90508082611f239190613b18565b91508084611f319190613b4b565b9350505b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611f92929190613a6f565b6020604051808303815f875af1158015611fae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fd29190613ac0565b5050505b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b8152600401612011929190613a6f565b6020604051808303815f875af115801561202d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120519190613ac0565b508673ffffffffffffffffffffffffffffffffffffffff16887f57c683de2e7c8263c7f57fd108416b9bdaa7a6e7f2e4e7102c3b6f9e37f1cc378b898960405161209d939291906144d0565b60405180910390a36001935050505095945050505050565b5f60655f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120e5612189565b8060655f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16612144611862565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b612191612298565b73ffffffffffffffffffffffffffffffffffffffff166121af611862565b73ffffffffffffffffffffffffffffffffffffffff1614612205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fc9061454f565b60405180910390fd5b565b61220f612dfd565b5f60cd5f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612251612298565b60405161225e919061360f565b60405180910390a1565b60655f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561229581612e46565b50565b5f33905090565b6122a761060a565b156122e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122de906145b7565b60405180910390fd5b565b6001609a5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123609061461f565b60405180910390fd5b5f84036123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290614687565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612410906146ef565b60405180910390fd5b5f811461248f575f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361248e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248590614757565b60405180910390fd5b5b5050505050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16612506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fd906147e5565b60405180910390fd5b61250e612f09565b565b5f60019054906101000a900460ff1661255e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612555906147e5565b60405180910390fd5b612566612f69565b565b61257061229f565b600160cd5f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125b3612298565b6040516125c0919061360f565b60405180910390a1565b5f609b5f60ff5f8581526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201548152505090505f60ff5f8481526020019081526020015f206003015490505f609754836040015160975461269d9190613b18565b836126a89190613e76565b6126b29190613ee4565b90505f81836126c19190613b18565b90505f8211156127ae5760ff5f8681526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60ff5f8881526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161276c929190613a6f565b6020604051808303815f875af1158015612788573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127ac9190613ac0565b505b5f8111156128885760ff5f8681526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612846929190613a6f565b6020604051808303815f875af1158015612862573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128869190613ac0565b505b8160ff5f8781526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a3847f88592047496a7850992dc5e8cd92a9b633cef0d191a4f5e87fd745c7d382630a8383604051612931929190614803565b60405180910390a25050505050565b5f609b5f60ff5f8781526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201548152505090505f60ff5f8681526020019081526020015f206003015490505f609754835f015183612a109190613e76565b612a1a9190613ee4565b90505f6097548567ffffffffffffffff1683612a369190613e76565b612a409190613ee4565b90505f609754856020015183612a569190613e76565b612a609190613ee4565b90505f8385612a6f9190613b18565b90505f8114158015612ab957505f60ff5f8b81526020019081526020015f206006015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16145b15612ba15760ff5f8a81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60ff5f8c81526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612b5f929190613a6f565b6020604051808303815f875af1158015612b7b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b9f9190613ac0565b505b5f8214612c7a5760ff5f8a81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401612c38929190613a6f565b6020604051808303815f875af1158015612c54573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c789190613ac0565b505b8183612c869190613b18565b92505f8314612d3f5760ff5f8a81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89856040518363ffffffff1660e01b8152600401612cfd929190613a6f565b6020604051808303815f875af1158015612d19573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d3d9190613ac0565b505b8060ff5f8b81526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a3887f831c7cc0006d91462607c476603366c48469d125de6228c0791a7090efd7f7a4828585604051612dea9392919061482a565b60405180910390a2505050505050505050565b612e0561060a565b612e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3b906148a9565b60405180910390fd5b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60019054906101000a900460ff16612f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4e906147e5565b60405180910390fd5b612f67612f62612298565b612268565b565b5f60019054906101000a900460ff16612fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fae906147e5565b60405180910390fd5b5f60cd5f6101000a81548160ff021916908315150217905550565b6040518061014001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f151581526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180608001604052805f81526020015f81526020015f81526020015f81525090565b5f5ffd5b5f5ffd5b5f819050919050565b6130c3816130b1565b81146130cd575f5ffd5b50565b5f813590506130de816130ba565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61310d826130e4565b9050919050565b61311d81613103565b8114613127575f5ffd5b50565b5f8135905061313881613114565b92915050565b5f5f60408385031215613154576131536130a9565b5b5f613161858286016130d0565b92505060206131728582860161312a565b9150509250929050565b5f8115159050919050565b6131908161317c565b82525050565b5f6020820190506131a95f830184613187565b92915050565b5f819050919050565b6131c1816131af565b81146131cb575f5ffd5b50565b5f813590506131dc816131b8565b92915050565b5f5f604083850312156131f8576131f76130a9565b5b5f613205858286016131ce565b9250506020613216858286016130d0565b9150509250929050565b5f60208284031215613235576132346130a9565b5b5f6132428482850161312a565b91505092915050565b5f602082840312156132605761325f6130a9565b5b5f61326d848285016130d0565b91505092915050565b61327f81613103565b82525050565b61328e816131af565b82525050565b61329d8161317c565b82525050565b5f6bffffffffffffffffffffffff82169050919050565b6132c3816132a3565b82525050565b61014082015f8201516132de5f850182613276565b5060208201516132f16020850182613276565b5060408201516133046040850182613276565b5060608201516133176060850182613285565b50608082015161332a6080850182613285565b5060a082015161333d60a0850182613294565b5060c082015161335060c0850182613294565b5060e082015161336360e0850182613276565b506101008201516133786101008501826132ba565b5061012082015161338d610120850182613285565b50505050565b5f610140820190506133a75f8301846132c9565b92915050565b6133b6816132a3565b81146133c0575f5ffd5b50565b5f813590506133d1816133ad565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126133f8576133f76133d7565b5b8235905067ffffffffffffffff811115613415576134146133db565b5b602083019150836001820283011115613431576134306133df565b5b9250929050565b5f5f5f5f5f5f5f5f60e0898b031215613454576134536130a9565b5b5f6134618b828c0161312a565b98505060206134728b828c016131ce565b97505060406134838b828c016133c3565b96505060606134948b828c0161312a565b95505060806134a58b828c016131ce565b94505060a06134b68b828c0161312a565b93505060c089013567ffffffffffffffff8111156134d7576134d66130ad565b5b6134e38b828c016133e3565b92509250509295985092959890939650565b6134fe816130b1565b82525050565b5f6020820190506135175f8301846134f5565b92915050565b5f5f5f5f5f60a08688031215613536576135356130a9565b5b5f6135438882890161312a565b9550506020613554888289016131ce565b9450506040613565888289016131ce565b9350506060613576888289016131ce565b9250506080613587888289016131ce565b9150509295509295909350565b608082015f8201516135a85f850182613285565b5060208201516135bb6020850182613285565b5060408201516135ce6040850182613285565b5060608201516135e16060850182613285565b50505050565b5f6080820190506135fa5f830184613594565b92915050565b61360981613103565b82525050565b5f6020820190506136225f830184613600565b92915050565b5f5f5f6060848603121561363f5761363e6130a9565b5b5f61364c868287016130d0565b935050602061365d8682870161312a565b925050604061366e868287016131ce565b9150509250925092565b5f67ffffffffffffffff82169050919050565b61369481613678565b811461369e575f5ffd5b50565b5f813590506136af8161368b565b92915050565b5f5f5f5f5f60a086880312156136ce576136cd6130a9565b5b5f6136db888289016130d0565b95505060206136ec888289016130d0565b94505060406136fd8882890161312a565b935050606061370e888289016136a1565b925050608061371f888289016136a1565b9150509295509295909350565b5f82825260208201905092915050565b7f476174657761793a207a65726f206164647265737300000000000000000000005f82015250565b5f61377060158361372c565b915061377b8261373c565b602082019050919050565b5f6020820190508181035f83015261379d81613764565b9050919050565b7f476174657761793a207472656173757279206164647265737320616c726561645f8201527f7920736574000000000000000000000000000000000000000000000000000000602082015250565b5f6137fe60258361372c565b9150613809826137a4565b604082019050919050565b5f6020820190508181035f83015261382b816137f2565b9050919050565b7f476174657761793a2061676772656761746f72206164647265737320616c72655f8201527f6164792073657400000000000000000000000000000000000000000000000000602082015250565b5f61388c60278361372c565b915061389782613832565b604082019050919050565b5f6020820190508181035f8301526138b981613880565b9050919050565b7f4f6e6c7941676772656761746f720000000000000000000000000000000000005f82015250565b5f6138f4600e8361372c565b91506138ff826138c0565b602082019050919050565b5f6020820190508181035f830152613921816138e8565b9050919050565b7f4f7264657246756c66696c6c65640000000000000000000000000000000000005f82015250565b5f61395c600e8361372c565b915061396782613928565b602082019050919050565b5f6020820190508181035f83015261398981613950565b9050919050565b7f4f72646572526566756e646564000000000000000000000000000000000000005f82015250565b5f6139c4600d8361372c565b91506139cf82613990565b602082019050919050565b5f6020820190508181035f8301526139f1816139b8565b9050919050565b7f4665654578636565647350726f746f636f6c46656500000000000000000000005f82015250565b5f613a2c60158361372c565b9150613a37826139f8565b602082019050919050565b5f6020820190508181035f830152613a5981613a20565b9050919050565b613a69816131af565b82525050565b5f604082019050613a825f830185613600565b613a8f6020830184613a60565b9392505050565b613a9f8161317c565b8114613aa9575f5ffd5b50565b5f81519050613aba81613a96565b92915050565b5f60208284031215613ad557613ad46130a9565b5b5f613ae284828501613aac565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613b22826131af565b9150613b2d836131af565b9250828203905081811115613b4557613b44613aeb565b5b92915050565b5f613b55826131af565b9150613b60836131af565b9250828201905080821115613b7857613b77613aeb565b5b92915050565b5f602082019050613b915f830184613a60565b92915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865205f8201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b5f613bf160298361372c565b9150613bfc82613b97565b604082019050919050565b5f6020820190508181035f830152613c1e81613be5565b9050919050565b7f496e76616c69644d6573736167654861736800000000000000000000000000005f82015250565b5f613c5960128361372c565b9150613c6482613c25565b602082019050919050565b5f6020820190508181035f830152613c8681613c4d565b9050919050565b5f606082019050613ca05f830186613600565b613cad6020830185613600565b613cba6040830184613a60565b949350505050565b5f613ccc826131af565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613cfe57613cfd613aeb565b5b600182019050919050565b5f606082019050613d1c5f830186613600565b613d296020830185613a60565b613d366040830184613a60565b949350505050565b7f4f72646572416c726561647945786973747300000000000000000000000000005f82015250565b5f613d7260128361372c565b9150613d7d82613d3e565b602082019050919050565b5f6020820190508181035f830152613d9f81613d66565b9050919050565b7f53656e64657246656549735a65726f00000000000000000000000000000000005f82015250565b5f613dda600f8361372c565b9150613de582613da6565b602082019050919050565b5f6020820190508181035f830152613e0781613dce565b9050919050565b7f546f6b656e46656553657474696e67734e6f74436f6e666967757265640000005f82015250565b5f613e42601d8361372c565b9150613e4d82613e0e565b602082019050919050565b5f6020820190508181035f830152613e6f81613e36565b9050919050565b5f613e80826131af565b9150613e8b836131af565b9250828202613e99816131af565b91508282048414831517613eb057613eaf613aeb565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613eee826131af565b9150613ef9836131af565b925082613f0957613f08613eb7565b5b828204905092915050565b5f819050919050565b5f613f37613f32613f2d846132a3565b613f14565b6131af565b9050919050565b613f4781613f1d565b82525050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f613f76838561372c565b9350613f83838584613f4d565b613f8c83613f5b565b840190509392505050565b5f608082019050613faa5f830188613a60565b613fb760208301876134f5565b613fc46040830186613f3e565b8181036060830152613fd7818486613f6b565b90509695505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61403d602e8361372c565b915061404882613fe3565b604082019050919050565b5f6020820190508181035f83015261406a81614031565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f6140a061409b61409684614071565b613f14565b61407a565b9050919050565b6140b081614086565b82525050565b5f6020820190506140c95f8301846140a7565b92915050565b7f476174657761793a20746f6b656e206e6f7420737570706f72746564000000005f82015250565b5f614103601c8361372c565b915061410e826140cf565b602082019050919050565b5f6020820190508181035f830152614130816140f7565b9050919050565b7f476174657761793a20696e76616c69642073656e64657220746f2070726f76695f8201527f6465720000000000000000000000000000000000000000000000000000000000602082015250565b5f61419160238361372c565b915061419c82614137565b604082019050919050565b5f6020820190508181035f8301526141be81614185565b9050919050565b7f476174657761793a20696e76616c69642070726f766964657220746f206167675f8201527f72656761746f7200000000000000000000000000000000000000000000000000602082015250565b5f61421f60278361372c565b915061422a826141c5565b604082019050919050565b5f6020820190508181035f83015261424c81614213565b9050919050565b7f476174657761793a20696e76616c69642073656e64657220746f2061676772655f8201527f6761746f72000000000000000000000000000000000000000000000000000000602082015250565b5f6142ad60258361372c565b91506142b882614253565b604082019050919050565b5f6020820190508181035f8301526142da816142a1565b9050919050565b7f476174657761793a20696e76616c69642070726f766964657220746f206167675f8201527f72656761746f7220667800000000000000000000000000000000000000000000602082015250565b5f61433b602a8361372c565b9150614346826142e1565b604082019050919050565b5f6020820190508181035f8301526143688161432f565b9050919050565b5f6080820190506143825f830187613a60565b61438f6020830186613a60565b61439c6040830185613a60565b6143a96060830184613a60565b95945050505050565b7f476174657761793a20696e76616c6964207374617475730000000000000000005f82015250565b5f6143e660178361372c565b91506143f1826143b2565b602082019050919050565b5f6020820190508181035f830152614413816143da565b9050919050565b7f496e76616c696452656261746550657263656e740000000000000000000000005f82015250565b5f61444e60148361372c565b91506144598261441a565b602082019050919050565b5f6020820190508181035f83015261447b81614442565b9050919050565b5f61448c826132a3565b9150614497836132a3565b925082820390506bffffffffffffffffffffffff8111156144bb576144ba613aeb565b5b92915050565b6144ca81613678565b82525050565b5f6060820190506144e35f8301866134f5565b6144f060208301856144c1565b6144fd60408301846144c1565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61453960208361372c565b915061454482614505565b602082019050919050565b5f6020820190508181035f8301526145668161452d565b9050919050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f6145a160108361372c565b91506145ac8261456d565b602082019050919050565b5f6020820190508181035f8301526145ce81614595565b9050919050565b7f546f6b656e4e6f74537570706f727465640000000000000000000000000000005f82015250565b5f61460960118361372c565b9150614614826145d5565b602082019050919050565b5f6020820190508181035f830152614636816145fd565b9050919050565b7f416d6f756e7449735a65726f00000000000000000000000000000000000000005f82015250565b5f614671600c8361372c565b915061467c8261463d565b602082019050919050565b5f6020820190508181035f83015261469e81614665565b9050919050565b7f5468726f775a65726f41646472657373000000000000000000000000000000005f82015250565b5f6146d960108361372c565b91506146e4826146a5565b602082019050919050565b5f6020820190508181035f830152614706816146cd565b9050919050565b7f496e76616c696453656e646572466565526563697069656e74000000000000005f82015250565b5f61474160198361372c565b915061474c8261470d565b602082019050919050565b5f6020820190508181035f83015261476e81614735565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f6147cf602b8361372c565b91506147da82614775565b604082019050919050565b5f6020820190508181035f8301526147fc816147c3565b9050919050565b5f6040820190506148165f830185613a60565b6148236020830184613a60565b9392505050565b5f60608201905061483d5f830186613a60565b61484a6020830185613a60565b6148576040830184613a60565b949350505050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f61489360148361372c565b915061489e8261485f565b602082019050919050565b5f6020820190508181035f8301526148c081614887565b905091905056fea264697066735822122081f60e8ee10a838980c19edadaabadc031c394028bcd90a1e9521e89722d277264736f6c634300081e0033",
}

// GatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use GatewayMetaData.ABI instead.
var GatewayABI = GatewayMetaData.ABI

// GatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GatewayMetaData.Bin instead.
var GatewayBin = GatewayMetaData.Bin

// DeployGateway deploys a new Ethereum contract, binding an instance of Gateway to it.
func DeployGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Gateway, error) {
	parsed, err := GatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gateway{GatewayCaller: GatewayCaller{contract: contract}, GatewayTransactor: GatewayTransactor{contract: contract}, GatewayFilterer: GatewayFilterer{contract: contract}}, nil
}

// Gateway is an auto generated Go binding around an Ethereum contract.
type Gateway struct {
	GatewayCaller     // Read-only binding to the contract
	GatewayTransactor // Write-only binding to the contract
	GatewayFilterer   // Log filterer for contract events
}

// GatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type GatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GatewaySession struct {
	Contract     *Gateway             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GatewayCallerSession struct {
	Contract *GatewayCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GatewayTransactorSession struct {
	Contract     *GatewayTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type GatewayRaw struct {
	Contract *Gateway // Generic contract binding to access the raw methods on
}

// GatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GatewayCallerRaw struct {
	Contract *GatewayCaller // Generic read-only contract binding to access the raw methods on
}

// GatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GatewayTransactorRaw struct {
	Contract *GatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGateway creates a new instance of Gateway, bound to a specific deployed contract.
func NewGateway(address common.Address, backend bind.ContractBackend) (*Gateway, error) {
	contract, err := bindGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gateway{GatewayCaller: GatewayCaller{contract: contract}, GatewayTransactor: GatewayTransactor{contract: contract}, GatewayFilterer: GatewayFilterer{contract: contract}}, nil
}

// NewGatewayCaller creates a new read-only instance of Gateway, bound to a specific deployed contract.
func NewGatewayCaller(address common.Address, caller bind.ContractCaller) (*GatewayCaller, error) {
	contract, err := bindGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayCaller{contract: contract}, nil
}

// NewGatewayTransactor creates a new write-only instance of Gateway, bound to a specific deployed contract.
func NewGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*GatewayTransactor, error) {
	contract, err := bindGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayTransactor{contract: contract}, nil
}

// NewGatewayFilterer creates a new log filterer instance of Gateway, bound to a specific deployed contract.
func NewGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*GatewayFilterer, error) {
	contract, err := bindGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GatewayFilterer{contract: contract}, nil
}

// bindGateway binds a generic wrapper to an already deployed contract.
func bindGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gateway *GatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gateway.Contract.GatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gateway *GatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.Contract.GatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gateway *GatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gateway.Contract.GatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gateway *GatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gateway *GatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gateway *GatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gateway.Contract.contract.Transact(opts, method, params...)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewayCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IGatewayOrder, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IGatewayOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IGatewayOrder)).(*IGatewayOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewaySession) GetOrderInfo(_orderId [32]byte) (IGatewayOrder, error) {
	return _Gateway.Contract.GetOrderInfo(&_Gateway.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewayCallerSession) GetOrderInfo(_orderId [32]byte) (IGatewayOrder, error) {
	return _Gateway.Contract.GetOrderInfo(&_Gateway.CallOpts, _orderId)
}

// GetTokenFeeSettings is a free data retrieval call binding the contract method 0x8bfa0549.
//
// Solidity: function getTokenFeeSettings(address token) view returns((uint256,uint256,uint256,uint256))
func (_Gateway *GatewayCaller) GetTokenFeeSettings(opts *bind.CallOpts, token common.Address) (GatewaySettingManagerTokenFeeSettings, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getTokenFeeSettings", token)

	if err != nil {
		return *new(GatewaySettingManagerTokenFeeSettings), err
	}

	out0 := *abi.ConvertType(out[0], new(GatewaySettingManagerTokenFeeSettings)).(*GatewaySettingManagerTokenFeeSettings)

	return out0, err

}

// GetTokenFeeSettings is a free data retrieval call binding the contract method 0x8bfa0549.
//
// Solidity: function getTokenFeeSettings(address token) view returns((uint256,uint256,uint256,uint256))
func (_Gateway *GatewaySession) GetTokenFeeSettings(token common.Address) (GatewaySettingManagerTokenFeeSettings, error) {
	return _Gateway.Contract.GetTokenFeeSettings(&_Gateway.CallOpts, token)
}

// GetTokenFeeSettings is a free data retrieval call binding the contract method 0x8bfa0549.
//
// Solidity: function getTokenFeeSettings(address token) view returns((uint256,uint256,uint256,uint256))
func (_Gateway *GatewayCallerSession) GetTokenFeeSettings(token common.Address) (GatewaySettingManagerTokenFeeSettings, error) {
	return _Gateway.Contract.GetTokenFeeSettings(&_Gateway.CallOpts, token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewayCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewaySession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Gateway.Contract.IsTokenSupported(&_Gateway.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewayCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Gateway.Contract.IsTokenSupported(&_Gateway.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewaySession) Owner() (common.Address, error) {
	return _Gateway.Contract.Owner(&_Gateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewayCallerSession) Owner() (common.Address, error) {
	return _Gateway.Contract.Owner(&_Gateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewayCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewaySession) Paused() (bool, error) {
	return _Gateway.Contract.Paused(&_Gateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewayCallerSession) Paused() (bool, error) {
	return _Gateway.Contract.Paused(&_Gateway.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewayCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewaySession) PendingOwner() (common.Address, error) {
	return _Gateway.Contract.PendingOwner(&_Gateway.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewayCallerSession) PendingOwner() (common.Address, error) {
	return _Gateway.Contract.PendingOwner(&_Gateway.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewayTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewaySession) AcceptOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.AcceptOwnership(&_Gateway.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewayTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.AcceptOwnership(&_Gateway.TransactOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x809804f7.
//
// Solidity: function createOrder(address _token, uint256 _amount, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewayTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "createOrder", _token, _amount, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x809804f7.
//
// Solidity: function createOrder(address _token, uint256 _amount, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewaySession) CreateOrder(_token common.Address, _amount *big.Int, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.Contract.CreateOrder(&_Gateway.TransactOpts, _token, _amount, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x809804f7.
//
// Solidity: function createOrder(address _token, uint256 _amount, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewayTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.Contract.CreateOrder(&_Gateway.TransactOpts, _token, _amount, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewayTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewaySession) Initialize() (*types.Transaction, error) {
	return _Gateway.Contract.Initialize(&_Gateway.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewayTransactorSession) Initialize() (*types.Transaction, error) {
	return _Gateway.Contract.Initialize(&_Gateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewayTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewaySession) Pause() (*types.Transaction, error) {
	return _Gateway.Contract.Pause(&_Gateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewayTransactorSession) Pause() (*types.Transaction, error) {
	return _Gateway.Contract.Pause(&_Gateway.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewayTransactor) Refund(opts *bind.TransactOpts, _fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "refund", _fee, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewaySession) Refund(_fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.Contract.Refund(&_Gateway.TransactOpts, _fee, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewayTransactorSession) Refund(_fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.Contract.Refund(&_Gateway.TransactOpts, _fee, _orderId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.RenounceOwnership(&_Gateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.RenounceOwnership(&_Gateway.TransactOpts)
}

// SetTokenFeeSettings is a paid mutator transaction binding the contract method 0x898861b0.
//
// Solidity: function setTokenFeeSettings(address token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx) returns()
func (_Gateway *GatewayTransactor) SetTokenFeeSettings(opts *bind.TransactOpts, token common.Address, senderToProvider *big.Int, providerToAggregator *big.Int, senderToAggregator *big.Int, providerToAggregatorFx *big.Int) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "setTokenFeeSettings", token, senderToProvider, providerToAggregator, senderToAggregator, providerToAggregatorFx)
}

// SetTokenFeeSettings is a paid mutator transaction binding the contract method 0x898861b0.
//
// Solidity: function setTokenFeeSettings(address token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx) returns()
func (_Gateway *GatewaySession) SetTokenFeeSettings(token common.Address, senderToProvider *big.Int, providerToAggregator *big.Int, senderToAggregator *big.Int, providerToAggregatorFx *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SetTokenFeeSettings(&_Gateway.TransactOpts, token, senderToProvider, providerToAggregator, senderToAggregator, providerToAggregatorFx)
}

// SetTokenFeeSettings is a paid mutator transaction binding the contract method 0x898861b0.
//
// Solidity: function setTokenFeeSettings(address token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx) returns()
func (_Gateway *GatewayTransactorSession) SetTokenFeeSettings(token common.Address, senderToProvider *big.Int, providerToAggregator *big.Int, senderToAggregator *big.Int, providerToAggregatorFx *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SetTokenFeeSettings(&_Gateway.TransactOpts, token, senderToProvider, providerToAggregator, senderToAggregator, providerToAggregatorFx)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewayTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewaySession) SettingManagerBool(what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SettingManagerBool(&_Gateway.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewayTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SettingManagerBool(&_Gateway.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0xdf51b359.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent, uint64 _rebatePercent) returns(bool)
func (_Gateway *GatewayTransactor) Settle(opts *bind.TransactOpts, _splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64, _rebatePercent uint64) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "settle", _splitOrderId, _orderId, _liquidityProvider, _settlePercent, _rebatePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xdf51b359.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent, uint64 _rebatePercent) returns(bool)
func (_Gateway *GatewaySession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64, _rebatePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.Settle(&_Gateway.TransactOpts, _splitOrderId, _orderId, _liquidityProvider, _settlePercent, _rebatePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xdf51b359.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent, uint64 _rebatePercent) returns(bool)
func (_Gateway *GatewayTransactorSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64, _rebatePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.Settle(&_Gateway.TransactOpts, _splitOrderId, _orderId, _liquidityProvider, _settlePercent, _rebatePercent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.TransferOwnership(&_Gateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.TransferOwnership(&_Gateway.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewayTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewaySession) Unpause() (*types.Transaction, error) {
	return _Gateway.Contract.Unpause(&_Gateway.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewayTransactorSession) Unpause() (*types.Transaction, error) {
	return _Gateway.Contract.Unpause(&_Gateway.TransactOpts)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewayTransactor) UpdateProtocolAddress(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "updateProtocolAddress", what, value)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewaySession) UpdateProtocolAddress(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolAddress(&_Gateway.TransactOpts, what, value)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewayTransactorSession) UpdateProtocolAddress(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolAddress(&_Gateway.TransactOpts, what, value)
}

// GatewayFxTransferFeeSplitIterator is returned from FilterFxTransferFeeSplit and is used to iterate over the raw logs and unpacked data for FxTransferFeeSplit events raised by the Gateway contract.
type GatewayFxTransferFeeSplitIterator struct {
	Event *GatewayFxTransferFeeSplit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayFxTransferFeeSplitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayFxTransferFeeSplit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayFxTransferFeeSplit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayFxTransferFeeSplitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayFxTransferFeeSplitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayFxTransferFeeSplit represents a FxTransferFeeSplit event raised by the Gateway contract.
type GatewayFxTransferFeeSplit struct {
	OrderId          [32]byte
	SenderAmount     *big.Int
	AggregatorAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterFxTransferFeeSplit is a free log retrieval operation binding the contract event 0x88592047496a7850992dc5e8cd92a9b633cef0d191a4f5e87fd745c7d382630a.
//
// Solidity: event FxTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) FilterFxTransferFeeSplit(opts *bind.FilterOpts, orderId [][32]byte) (*GatewayFxTransferFeeSplitIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "FxTransferFeeSplit", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &GatewayFxTransferFeeSplitIterator{contract: _Gateway.contract, event: "FxTransferFeeSplit", logs: logs, sub: sub}, nil
}

// WatchFxTransferFeeSplit is a free log subscription operation binding the contract event 0x88592047496a7850992dc5e8cd92a9b633cef0d191a4f5e87fd745c7d382630a.
//
// Solidity: event FxTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) WatchFxTransferFeeSplit(opts *bind.WatchOpts, sink chan<- *GatewayFxTransferFeeSplit, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "FxTransferFeeSplit", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayFxTransferFeeSplit)
				if err := _Gateway.contract.UnpackLog(event, "FxTransferFeeSplit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFxTransferFeeSplit is a log parse operation binding the contract event 0x88592047496a7850992dc5e8cd92a9b633cef0d191a4f5e87fd745c7d382630a.
//
// Solidity: event FxTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) ParseFxTransferFeeSplit(log types.Log) (*GatewayFxTransferFeeSplit, error) {
	event := new(GatewayFxTransferFeeSplit)
	if err := _Gateway.contract.UnpackLog(event, "FxTransferFeeSplit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Gateway contract.
type GatewayInitializedIterator struct {
	Event *GatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayInitialized represents a Initialized event raised by the Gateway contract.
type GatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*GatewayInitializedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &GatewayInitializedIterator{contract: _Gateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *GatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayInitialized)
				if err := _Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) ParseInitialized(log types.Log) (*GatewayInitialized, error) {
	event := new(GatewayInitialized)
	if err := _Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayLocalTransferFeeSplitIterator is returned from FilterLocalTransferFeeSplit and is used to iterate over the raw logs and unpacked data for LocalTransferFeeSplit events raised by the Gateway contract.
type GatewayLocalTransferFeeSplitIterator struct {
	Event *GatewayLocalTransferFeeSplit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayLocalTransferFeeSplitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayLocalTransferFeeSplit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayLocalTransferFeeSplit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayLocalTransferFeeSplitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayLocalTransferFeeSplitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayLocalTransferFeeSplit represents a LocalTransferFeeSplit event raised by the Gateway contract.
type GatewayLocalTransferFeeSplit struct {
	OrderId          [32]byte
	SenderAmount     *big.Int
	ProviderAmount   *big.Int
	AggregatorAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLocalTransferFeeSplit is a free log retrieval operation binding the contract event 0x831c7cc0006d91462607c476603366c48469d125de6228c0791a7090efd7f7a4.
//
// Solidity: event LocalTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 providerAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) FilterLocalTransferFeeSplit(opts *bind.FilterOpts, orderId [][32]byte) (*GatewayLocalTransferFeeSplitIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "LocalTransferFeeSplit", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &GatewayLocalTransferFeeSplitIterator{contract: _Gateway.contract, event: "LocalTransferFeeSplit", logs: logs, sub: sub}, nil
}

// WatchLocalTransferFeeSplit is a free log subscription operation binding the contract event 0x831c7cc0006d91462607c476603366c48469d125de6228c0791a7090efd7f7a4.
//
// Solidity: event LocalTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 providerAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) WatchLocalTransferFeeSplit(opts *bind.WatchOpts, sink chan<- *GatewayLocalTransferFeeSplit, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "LocalTransferFeeSplit", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayLocalTransferFeeSplit)
				if err := _Gateway.contract.UnpackLog(event, "LocalTransferFeeSplit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLocalTransferFeeSplit is a log parse operation binding the contract event 0x831c7cc0006d91462607c476603366c48469d125de6228c0791a7090efd7f7a4.
//
// Solidity: event LocalTransferFeeSplit(bytes32 indexed orderId, uint256 senderAmount, uint256 providerAmount, uint256 aggregatorAmount)
func (_Gateway *GatewayFilterer) ParseLocalTransferFeeSplit(log types.Log) (*GatewayLocalTransferFeeSplit, error) {
	event := new(GatewayLocalTransferFeeSplit)
	if err := _Gateway.contract.UnpackLog(event, "LocalTransferFeeSplit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the Gateway contract.
type GatewayOrderCreatedIterator struct {
	Event *GatewayOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderCreated represents a OrderCreated event raised by the Gateway contract.
type GatewayOrderCreated struct {
	Sender      common.Address
	Token       common.Address
	Amount      *big.Int
	ProtocolFee *big.Int
	OrderId     [32]byte
	Rate        *big.Int
	MessageHash string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, string messageHash)
func (_Gateway *GatewayFilterer) FilterOrderCreated(opts *bind.FilterOpts, sender []common.Address, token []common.Address, amount []*big.Int) (*GatewayOrderCreatedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderCreated", senderRule, tokenRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderCreatedIterator{contract: _Gateway.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, string messageHash)
func (_Gateway *GatewayFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *GatewayOrderCreated, sender []common.Address, token []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderCreated", senderRule, tokenRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderCreated)
				if err := _Gateway.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, string messageHash)
func (_Gateway *GatewayFilterer) ParseOrderCreated(log types.Log) (*GatewayOrderCreated, error) {
	event := new(GatewayOrderCreated)
	if err := _Gateway.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderRefundedIterator is returned from FilterOrderRefunded and is used to iterate over the raw logs and unpacked data for OrderRefunded events raised by the Gateway contract.
type GatewayOrderRefundedIterator struct {
	Event *GatewayOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderRefunded represents a OrderRefunded event raised by the Gateway contract.
type GatewayOrderRefunded struct {
	Fee     *big.Int
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderRefunded is a free log retrieval operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) FilterOrderRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*GatewayOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderRefundedIterator{contract: _Gateway.contract, event: "OrderRefunded", logs: logs, sub: sub}, nil
}

// WatchOrderRefunded is a free log subscription operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) WatchOrderRefunded(opts *bind.WatchOpts, sink chan<- *GatewayOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderRefunded)
				if err := _Gateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderRefunded is a log parse operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) ParseOrderRefunded(log types.Log) (*GatewayOrderRefunded, error) {
	event := new(GatewayOrderRefunded)
	if err := _Gateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderSettledIterator is returned from FilterOrderSettled and is used to iterate over the raw logs and unpacked data for OrderSettled events raised by the Gateway contract.
type GatewayOrderSettledIterator struct {
	Event *GatewayOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderSettled represents a OrderSettled event raised by the Gateway contract.
type GatewayOrderSettled struct {
	SplitOrderId      [32]byte
	OrderId           [32]byte
	LiquidityProvider common.Address
	SettlePercent     uint64
	RebatePercent     uint64
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOrderSettled is a free log retrieval operation binding the contract event 0x57c683de2e7c8263c7f57fd108416b9bdaa7a6e7f2e4e7102c3b6f9e37f1cc37.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint64 settlePercent, uint64 rebatePercent)
func (_Gateway *GatewayFilterer) FilterOrderSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*GatewayOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderSettledIterator{contract: _Gateway.contract, event: "OrderSettled", logs: logs, sub: sub}, nil
}

// WatchOrderSettled is a free log subscription operation binding the contract event 0x57c683de2e7c8263c7f57fd108416b9bdaa7a6e7f2e4e7102c3b6f9e37f1cc37.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint64 settlePercent, uint64 rebatePercent)
func (_Gateway *GatewayFilterer) WatchOrderSettled(opts *bind.WatchOpts, sink chan<- *GatewayOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderSettled)
				if err := _Gateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSettled is a log parse operation binding the contract event 0x57c683de2e7c8263c7f57fd108416b9bdaa7a6e7f2e4e7102c3b6f9e37f1cc37.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint64 settlePercent, uint64 rebatePercent)
func (_Gateway *GatewayFilterer) ParseOrderSettled(log types.Log) (*GatewayOrderSettled, error) {
	event := new(GatewayOrderSettled)
	if err := _Gateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the Gateway contract.
type GatewayOwnershipTransferStartedIterator struct {
	Event *GatewayOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the Gateway contract.
type GatewayOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GatewayOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOwnershipTransferStartedIterator{contract: _Gateway.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *GatewayOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOwnershipTransferStarted)
				if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) ParseOwnershipTransferStarted(log types.Log) (*GatewayOwnershipTransferStarted, error) {
	event := new(GatewayOwnershipTransferStarted)
	if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gateway contract.
type GatewayOwnershipTransferredIterator struct {
	Event *GatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOwnershipTransferred represents a OwnershipTransferred event raised by the Gateway contract.
type GatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOwnershipTransferredIterator{contract: _Gateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOwnershipTransferred)
				if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) ParseOwnershipTransferred(log types.Log) (*GatewayOwnershipTransferred, error) {
	event := new(GatewayOwnershipTransferred)
	if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Gateway contract.
type GatewayPausedIterator struct {
	Event *GatewayPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayPaused represents a Paused event raised by the Gateway contract.
type GatewayPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) FilterPaused(opts *bind.FilterOpts) (*GatewayPausedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &GatewayPausedIterator{contract: _Gateway.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *GatewayPaused) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayPaused)
				if err := _Gateway.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) ParsePaused(log types.Log) (*GatewayPaused, error) {
	event := new(GatewayPaused)
	if err := _Gateway.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayProtocolAddressUpdatedIterator is returned from FilterProtocolAddressUpdated and is used to iterate over the raw logs and unpacked data for ProtocolAddressUpdated events raised by the Gateway contract.
type GatewayProtocolAddressUpdatedIterator struct {
	Event *GatewayProtocolAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayProtocolAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayProtocolAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayProtocolAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayProtocolAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayProtocolAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayProtocolAddressUpdated represents a ProtocolAddressUpdated event raised by the Gateway contract.
type GatewayProtocolAddressUpdated struct {
	What            [32]byte
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProtocolAddressUpdated is a free log retrieval operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) FilterProtocolAddressUpdated(opts *bind.FilterOpts, what [][32]byte, treasuryAddress []common.Address) (*GatewayProtocolAddressUpdatedIterator, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "ProtocolAddressUpdated", whatRule, treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return &GatewayProtocolAddressUpdatedIterator{contract: _Gateway.contract, event: "ProtocolAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolAddressUpdated is a free log subscription operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) WatchProtocolAddressUpdated(opts *bind.WatchOpts, sink chan<- *GatewayProtocolAddressUpdated, what [][32]byte, treasuryAddress []common.Address) (event.Subscription, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "ProtocolAddressUpdated", whatRule, treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayProtocolAddressUpdated)
				if err := _Gateway.contract.UnpackLog(event, "ProtocolAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolAddressUpdated is a log parse operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) ParseProtocolAddressUpdated(log types.Log) (*GatewayProtocolAddressUpdated, error) {
	event := new(GatewayProtocolAddressUpdated)
	if err := _Gateway.contract.UnpackLog(event, "ProtocolAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySenderFeeTransferredIterator is returned from FilterSenderFeeTransferred and is used to iterate over the raw logs and unpacked data for SenderFeeTransferred events raised by the Gateway contract.
type GatewaySenderFeeTransferredIterator struct {
	Event *GatewaySenderFeeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySenderFeeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySenderFeeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySenderFeeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySenderFeeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySenderFeeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySenderFeeTransferred represents a SenderFeeTransferred event raised by the Gateway contract.
type GatewaySenderFeeTransferred struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSenderFeeTransferred is a free log retrieval operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) FilterSenderFeeTransferred(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*GatewaySenderFeeTransferredIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySenderFeeTransferredIterator{contract: _Gateway.contract, event: "SenderFeeTransferred", logs: logs, sub: sub}, nil
}

// WatchSenderFeeTransferred is a free log subscription operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) WatchSenderFeeTransferred(opts *bind.WatchOpts, sink chan<- *GatewaySenderFeeTransferred, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySenderFeeTransferred)
				if err := _Gateway.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSenderFeeTransferred is a log parse operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) ParseSenderFeeTransferred(log types.Log) (*GatewaySenderFeeTransferred, error) {
	event := new(GatewaySenderFeeTransferred)
	if err := _Gateway.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySetFeeRecipientIterator is returned from FilterSetFeeRecipient and is used to iterate over the raw logs and unpacked data for SetFeeRecipient events raised by the Gateway contract.
type GatewaySetFeeRecipientIterator struct {
	Event *GatewaySetFeeRecipient // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySetFeeRecipientIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySetFeeRecipient)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySetFeeRecipient)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySetFeeRecipientIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySetFeeRecipientIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySetFeeRecipient represents a SetFeeRecipient event raised by the Gateway contract.
type GatewaySetFeeRecipient struct {
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetFeeRecipient is a free log retrieval operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) FilterSetFeeRecipient(opts *bind.FilterOpts, treasuryAddress []common.Address) (*GatewaySetFeeRecipientIterator, error) {

	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SetFeeRecipient", treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySetFeeRecipientIterator{contract: _Gateway.contract, event: "SetFeeRecipient", logs: logs, sub: sub}, nil
}

// WatchSetFeeRecipient is a free log subscription operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) WatchSetFeeRecipient(opts *bind.WatchOpts, sink chan<- *GatewaySetFeeRecipient, treasuryAddress []common.Address) (event.Subscription, error) {

	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SetFeeRecipient", treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySetFeeRecipient)
				if err := _Gateway.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFeeRecipient is a log parse operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) ParseSetFeeRecipient(log types.Log) (*GatewaySetFeeRecipient, error) {
	event := new(GatewaySetFeeRecipient)
	if err := _Gateway.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the Gateway contract.
type GatewaySettingManagerBoolIterator struct {
	Event *GatewaySettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySettingManagerBool represents a SettingManagerBool event raised by the Gateway contract.
type GatewaySettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) FilterSettingManagerBool(opts *bind.FilterOpts, what [][32]byte, value []common.Address) (*GatewaySettingManagerBoolIterator, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SettingManagerBool", whatRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySettingManagerBoolIterator{contract: _Gateway.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *GatewaySettingManagerBool, what [][32]byte, value []common.Address) (event.Subscription, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SettingManagerBool", whatRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySettingManagerBool)
				if err := _Gateway.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) ParseSettingManagerBool(log types.Log) (*GatewaySettingManagerBool, error) {
	event := new(GatewaySettingManagerBool)
	if err := _Gateway.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayTokenFeeSettingsUpdatedIterator is returned from FilterTokenFeeSettingsUpdated and is used to iterate over the raw logs and unpacked data for TokenFeeSettingsUpdated events raised by the Gateway contract.
type GatewayTokenFeeSettingsUpdatedIterator struct {
	Event *GatewayTokenFeeSettingsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayTokenFeeSettingsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayTokenFeeSettingsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayTokenFeeSettingsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayTokenFeeSettingsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayTokenFeeSettingsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayTokenFeeSettingsUpdated represents a TokenFeeSettingsUpdated event raised by the Gateway contract.
type GatewayTokenFeeSettingsUpdated struct {
	Token                  common.Address
	SenderToProvider       *big.Int
	ProviderToAggregator   *big.Int
	SenderToAggregator     *big.Int
	ProviderToAggregatorFx *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterTokenFeeSettingsUpdated is a free log retrieval operation binding the contract event 0xd4d646cffa66ebf695b792bd660c97076ed45a889e14d544eb8ab8a44b34a59c.
//
// Solidity: event TokenFeeSettingsUpdated(address indexed token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx)
func (_Gateway *GatewayFilterer) FilterTokenFeeSettingsUpdated(opts *bind.FilterOpts, token []common.Address) (*GatewayTokenFeeSettingsUpdatedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "TokenFeeSettingsUpdated", tokenRule)
	if err != nil {
		return nil, err
	}
	return &GatewayTokenFeeSettingsUpdatedIterator{contract: _Gateway.contract, event: "TokenFeeSettingsUpdated", logs: logs, sub: sub}, nil
}

// WatchTokenFeeSettingsUpdated is a free log subscription operation binding the contract event 0xd4d646cffa66ebf695b792bd660c97076ed45a889e14d544eb8ab8a44b34a59c.
//
// Solidity: event TokenFeeSettingsUpdated(address indexed token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx)
func (_Gateway *GatewayFilterer) WatchTokenFeeSettingsUpdated(opts *bind.WatchOpts, sink chan<- *GatewayTokenFeeSettingsUpdated, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "TokenFeeSettingsUpdated", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayTokenFeeSettingsUpdated)
				if err := _Gateway.contract.UnpackLog(event, "TokenFeeSettingsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenFeeSettingsUpdated is a log parse operation binding the contract event 0xd4d646cffa66ebf695b792bd660c97076ed45a889e14d544eb8ab8a44b34a59c.
//
// Solidity: event TokenFeeSettingsUpdated(address indexed token, uint256 senderToProvider, uint256 providerToAggregator, uint256 senderToAggregator, uint256 providerToAggregatorFx)
func (_Gateway *GatewayFilterer) ParseTokenFeeSettingsUpdated(log types.Log) (*GatewayTokenFeeSettingsUpdated, error) {
	event := new(GatewayTokenFeeSettingsUpdated)
	if err := _Gateway.contract.UnpackLog(event, "TokenFeeSettingsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Gateway contract.
type GatewayUnpausedIterator struct {
	Event *GatewayUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayUnpaused represents a Unpaused event raised by the Gateway contract.
type GatewayUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) FilterUnpaused(opts *bind.FilterOpts) (*GatewayUnpausedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &GatewayUnpausedIterator{contract: _Gateway.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *GatewayUnpaused) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayUnpaused)
				if err := _Gateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) ParseUnpaused(log types.Log) (*GatewayUnpaused, error) {
	event := new(GatewayUnpaused)
	if err := _Gateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
