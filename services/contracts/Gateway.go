// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IGatewayOrder is an auto generated low-level Go binding around an user-defined struct.
type IGatewayOrder struct {
	Sender             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	ProtocolFee        *big.Int
	IsFulfilled        bool
	IsRefunded         bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// SharedStructsInstitution is an auto generated low-level Go binding around an user-defined struct.
type SharedStructsInstitution struct {
	Code [32]byte
	Name [32]byte
}

// SharedStructsInstitutionByCode is an auto generated low-level Go binding around an user-defined struct.
type SharedStructsInstitutionByCode struct {
	Name     [32]byte
	Currency [32]byte
}

// GatewayMetaData contains all meta data concerning the Gateway contract.
var GatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structSharedStructs.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"SupportedInstitutionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIGateway.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionByCode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b50620000216200002760201b60201c565b620001c6565b5f60019054906101000a900460ff161562000079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000070906200016e565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff1614620000e85760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000df9190620001ab565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f62000156602783620000ea565b91506200016382620000fa565b604082019050919050565b5f6020820190508181035f830152620001878162000148565b9050919050565b5f60ff82169050919050565b620001a5816200018e565b82525050565b5f602082019050620001c05f8301846200019a565b92915050565b613f7780620001d45f395ff3fe608060405234801561000f575f80fd5b5060043610610135575f3560e01c806379ba5097116100b6578063c22801031161007a578063c2280103146102da578063cd9924001461030a578063d12ff20a14610326578063e30c397814610356578063f22ee70414610374578063f2fde38b146103a457610135565b806379ba50971461027f5780638129fc1c146102895780638456cb59146102935780638da5cb5b1461029d578063b810c636146102bb57610135565b80635c975abb116100fd5780635c975abb146101c7578063715018a6146101e557806371eedb88146101ef57806375151b631461021f578063768c6ec01461024f57610135565b8063026213381461013957806332200882146101695780633f4ba83a1461018557806340ebc6771461018f57806347094e2e146101ab575b5f80fd5b610153600480360381019061014e91906127cc565b6103c0565b60405161016091906128db565b60405180910390f35b610183600480360381019061017e9190612a9c565b610440565b005b61018d6105a3565b005b6101a960048036038101906101a49190612b50565b6105b5565b005b6101c560048036038101906101c09190612bcb565b610879565b005b6101cf6108e3565b6040516101dc9190612c10565b60405180910390f35b6101ed6108f8565b005b61020960048036038101906102049190612c5c565b61090b565b6040516102169190612c10565b60405180910390f35b61023960048036038101906102349190612c9a565b610d87565b6040516102469190612c10565b60405180910390f35b610269600480360381019061026491906127cc565b610ddf565b6040516102769190612de2565b60405180910390f35b610287610ff0565b005b61029161107c565b005b61029b6111c6565b005b6102a56111d8565b6040516102b29190612e0b565b60405180910390f35b6102c3611200565b6040516102d1929190612e42565b60405180910390f35b6102f460048036038101906102ef91906127cc565b611223565b6040516103019190612e96565b60405180910390f35b610324600480360381019061031f9190612eaf565b611261565b005b610340600480360381019061033b9190612f82565b6113e3565b60405161034d9190613061565b60405180910390f35b61035e61190d565b60405161036b9190612e0b565b60405180910390f35b61038e6004803603810190610389919061307a565b611935565b60405161039b9190612c10565b60405180910390f35b6103be60048036038101906103b99190612c9a565b611f58565b005b606060cd5f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610435578382905f5260205f2090600202016040518060400160405290815f8201548152602001600182015481525050815260200190600101906103f2565b505050509050919050565b610448612004565b60cd5f8381526020019081526020015f205f6104649190612672565b5f5b81518110156105565760cd5f8481526020019081526020015f20828281518110610493576104926130de565b5b6020026020010151908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010155505060405180604001604052808383815181106104f3576104f26130de565b5b60200260200101516020015181526020018481525060ce5f84848151811061051e5761051d6130de565b5b60200260200101515f015181526020019081526020015f205f820151815f015560208201518160010155905050806001019050610466565b50817f58f3a30ec15a8d3e09fa65f9ef10219bc7a9a99d872a4ed895c37c2e761ac2ac60cd5f8581526020019081526020015f206040516105979190613217565b60405180910390a25050565b6105ab612004565b6105b3612082565b565b6105bd612004565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062290613291565b60405180910390fd5b5f7f7472656173757279000000000000000000000000000000000000000000000000830361072d578173ffffffffffffffffffffffffffffffffffffffff16609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da9061331f565b60405180910390fd5b81609860086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050610829565b7f61676772656761746f72000000000000000000000000000000000000000000008303610828578173ffffffffffffffffffffffffffffffffffffffff1660995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da906133ad565b60405180910390fd5b8160995f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b5b8015610874578173ffffffffffffffffffffffffffffffffffffffff16837fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a460405160405180910390a35b505050565b610881612004565b8060985f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b816040516108d891906133cb565b60405180910390a150565b5f60cf5f9054906101000a900460ff16905090565b610900612004565b6109095f6120e3565b565b5f60995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109929061342e565b60405180910390fd5b6101015f8381526020019081526020015f206005015f9054906101000a900460ff16156109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490613496565b60405180910390fd5b6101015f8381526020019081526020015f2060050160019054906101000a900460ff1615610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a57906134fe565b60405180910390fd5b826101015f8481526020019081526020015f20600401541015610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf90613566565b60405180910390fd5b6101015f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401610b49929190613584565b6020604051808303815f875af1158015610b65573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b8991906135d5565b5060016101015f8481526020019081526020015f2060050160016101000a81548160ff0219169083151502179055505f6101015f8481526020019081526020015f206006015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f836101015f8581526020019081526020015f20600401546101015f8681526020019081526020015f2060070154610c33919061362d565b610c3d9190613660565b90506101015f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6101015f8681526020019081526020015f2060050160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101015f8781526020019081526020015f206003015484610ce6919061362d565b6040518363ffffffff1660e01b8152600401610d03929190613584565b6020604051808303815f875af1158015610d1f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4391906135d5565b50827f0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e85604051610d749190613693565b60405180910390a2600191505092915050565b5f600160cc5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205403610dd65760019050610dda565b5f90505b919050565b610de7612693565b6101015f8381526020019081526020015f20604051806101400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015f9054906101000a900460ff161515151581526020016005820160019054906101000a900460ff161515151581526020016005820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016007820154815250509050919050565b5f610ff9612113565b90508073ffffffffffffffffffffffffffffffffffffffff1661101a61190d565b73ffffffffffffffffffffffffffffffffffffffff1614611070576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110679061371c565b60405180910390fd5b611079816120e3565b50565b5f8060019054906101000a900460ff161590508080156110ab575060015f8054906101000a900460ff1660ff16105b806110d757506110ba3061211a565b1580156110d6575060015f8054906101000a900460ff1660ff16145b5b611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110d906137aa565b60405180910390fd5b60015f806101000a81548160ff021916908360ff16021790555080156111515760015f60016101000a81548160ff0219169083151502179055505b620186a060978190555061116361213c565b61116b612194565b80156111c3575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111ba9190613816565b60405180910390a15b50565b6111ce612004565b6111d66121ec565b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f8060985f9054906101000a900467ffffffffffffffff16609754915091509091565b61122b612746565b60ce5f8381526020019081526020015f206040518060400160405290815f82015481526020016001820154815250509050919050565b611269612004565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ce90613291565b60405180910390fd5b60018114806112e65750600281145b611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c90613879565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036113de578060cc5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff16837fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c836040516113d59190613693565b60405180910390a35b505050565b5f6113ec61224e565b6113fa8a8a8689898d612298565b5f838390500361143f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611436906138e1565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd3330888d611469919061362d565b6040518463ffffffff1660e01b8152600401611487939291906138ff565b6020604051808303815f875af11580156114a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114c791906135d5565b506101025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061151690613934565b9190505550336101025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460405160200161156c929190613584565b6040516020818303038152906040528051906020012090505f60975460985f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168b6115b3919061397b565b6115bd91906139e9565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018281526020015f151581526020015f151581526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160975467ffffffffffffffff166bffffffffffffffffffffffff168152602001828c6116839190613660565b8152506101015f8481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015f6101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e08201518160050160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610100820151816006015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600701559050506101015f8381526020019081526020015f20600701548b73ffffffffffffffffffffffffffffffffffffffff166101015f8581526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3bdd0d86e09a22d7ce596118bd3ca5ec73ea47533a465be37621e913ed2bf33384868d8f8b8b6040516118f796959493929190613a83565b60405180910390a4509998505050505050505050565b5f60655f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60995f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bc9061342e565b60405180910390fd5b6101015f8581526020019081526020015f206005015f9054906101000a900460ff1615611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1e90613496565b60405180910390fd5b6101015f8581526020019081526020015f2060050160019054906101000a900460ff1615611a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a81906134fe565b60405180910390fd5b5f6101015f8681526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508267ffffffffffffffff166101015f8781526020019081526020015f206006015f8282829054906101000a90046bffffffffffffffffffffffff16611b079190613add565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f6101015f8781526020019081526020015f206006015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603611e175760016101015f8781526020019081526020015f206005015f6101000a81548160ff0219169083151502179055505f6101015f8781526020019081526020015f206003015414611d46576101015f8681526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6101015f8881526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101015f8981526020019081526020015f20600301546040518363ffffffff1660e01b8152600401611c77929190613584565b6020604051808303815f875af1158015611c93573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cb791906135d5565b506101015f8681526020019081526020015f20600301546101015f8781526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a35b5f6101015f8781526020019081526020015f206004015414611e16578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101015f8981526020019081526020015f20600401546040518363ffffffff1660e01b8152600401611dd4929190613584565b6020604051808303815f875af1158015611df0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e1491906135d5565b505b5b5f6097548467ffffffffffffffff166101015f8981526020019081526020015f2060070154611e46919061397b565b611e5091906139e9565b9050806101015f8881526020019081526020015f206007015f828254611e769190613660565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401611eb8929190613584565b6020604051808303815f875af1158015611ed4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ef891906135d5565b508473ffffffffffffffffffffffffffffffffffffffff16867f98ece21e01a01cbe1d1c0dad3b053c8fbd368f99be78be958fcf1d1d13fd249a8987604051611f42929190613b4c565b60405180910390a3600192505050949350505050565b611f60612004565b8060655f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16611fbf6111d8565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61200c612113565b73ffffffffffffffffffffffffffffffffffffffff1661202a6111d8565b73ffffffffffffffffffffffffffffffffffffffff1614612080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207790613bbd565b60405180910390fd5b565b61208a61249d565b5f60cf5f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6120cc612113565b6040516120d99190612e0b565b60405180910390a1565b60655f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055612110816124e6565b50565b5f33905090565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff1661218a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218190613c4b565b60405180910390fd5b6121926125a9565b565b5f60019054906101000a900460ff166121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d990613c4b565b60405180910390fd5b6121ea612609565b565b6121f461224e565b600160cf5f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612237612113565b6040516122449190612e0b565b60405180910390a1565b6122566108e3565b15612296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228d90613cb3565b60405180910390fd5b565b600160cc5f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414612318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230f90613d1b565b60405180910390fd5b5f850361235a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235190613d83565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036123c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bf90613deb565b60405180910390fd5b5f801b60ce5f8381526020019081526020015f205f01540361241f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241690613e53565b60405180910390fd5b5f8214612495575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248b90613ebb565b60405180910390fd5b5b505050505050565b6124a56108e3565b6124e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124db90613f23565b60405180910390fd5b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60019054906101000a900460ff166125f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ee90613c4b565b60405180910390fd5b612607612602612113565b6120e3565b565b5f60019054906101000a900460ff16612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90613c4b565b60405180910390fd5b5f60cf5f6101000a81548160ff021916908315150217905550565b5080545f8255600202905f5260205f20908101906126909190612764565b50565b6040518061014001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f151581526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180604001604052805f80191681526020015f80191681525090565b5b80821115612784575f8082015f9055600182015f905550600201612765565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6127ab81612799565b81146127b5575f80fd5b50565b5f813590506127c6816127a2565b92915050565b5f602082840312156127e1576127e0612791565b5b5f6127ee848285016127b8565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61282981612799565b82525050565b604082015f8201516128435f850182612820565b5060208201516128566020850182612820565b50505050565b5f612867838361282f565b60408301905092915050565b5f602082019050919050565b5f612889826127f7565b6128938185612801565b935061289e83612811565b805f5b838110156128ce5781516128b5888261285c565b97506128c083612873565b9250506001810190506128a1565b5085935050505092915050565b5f6020820190508181035f8301526128f3818461287f565b905092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612945826128ff565b810181811067ffffffffffffffff821117156129645761296361290f565b5b80604052505050565b5f612976612788565b9050612982828261293c565b919050565b5f67ffffffffffffffff8211156129a1576129a061290f565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f604082840312156129cf576129ce6129b6565b5b6129d9604061296d565b90505f6129e8848285016127b8565b5f8301525060206129fb848285016127b8565b60208301525092915050565b5f612a19612a1484612987565b61296d565b90508083825260208201905060408402830185811115612a3c57612a3b6129b2565b5b835b81811015612a655780612a5188826129ba565b845260208401935050604081019050612a3e565b5050509392505050565b5f82601f830112612a8357612a826128fb565b5b8135612a93848260208601612a07565b91505092915050565b5f8060408385031215612ab257612ab1612791565b5b5f612abf858286016127b8565b925050602083013567ffffffffffffffff811115612ae057612adf612795565b5b612aec85828601612a6f565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612b1f82612af6565b9050919050565b612b2f81612b15565b8114612b39575f80fd5b50565b5f81359050612b4a81612b26565b92915050565b5f8060408385031215612b6657612b65612791565b5b5f612b73858286016127b8565b9250506020612b8485828601612b3c565b9150509250929050565b5f67ffffffffffffffff82169050919050565b612baa81612b8e565b8114612bb4575f80fd5b50565b5f81359050612bc581612ba1565b92915050565b5f60208284031215612be057612bdf612791565b5b5f612bed84828501612bb7565b91505092915050565b5f8115159050919050565b612c0a81612bf6565b82525050565b5f602082019050612c235f830184612c01565b92915050565b5f819050919050565b612c3b81612c29565b8114612c45575f80fd5b50565b5f81359050612c5681612c32565b92915050565b5f8060408385031215612c7257612c71612791565b5b5f612c7f85828601612c48565b9250506020612c90858286016127b8565b9150509250929050565b5f60208284031215612caf57612cae612791565b5b5f612cbc84828501612b3c565b91505092915050565b612cce81612b15565b82525050565b612cdd81612c29565b82525050565b612cec81612bf6565b82525050565b5f6bffffffffffffffffffffffff82169050919050565b612d1281612cf2565b82525050565b61014082015f820151612d2d5f850182612cc5565b506020820151612d406020850182612cc5565b506040820151612d536040850182612cc5565b506060820151612d666060850182612cd4565b506080820151612d796080850182612cd4565b5060a0820151612d8c60a0850182612ce3565b5060c0820151612d9f60c0850182612ce3565b5060e0820151612db260e0850182612cc5565b50610100820151612dc7610100850182612d09565b50610120820151612ddc610120850182612cd4565b50505050565b5f61014082019050612df65f830184612d18565b92915050565b612e0581612b15565b82525050565b5f602082019050612e1e5f830184612dfc565b92915050565b612e2d81612b8e565b82525050565b612e3c81612c29565b82525050565b5f604082019050612e555f830185612e24565b612e626020830184612e33565b9392505050565b604082015f820151612e7d5f850182612820565b506020820151612e906020850182612820565b50505050565b5f604082019050612ea95f830184612e69565b92915050565b5f805f60608486031215612ec657612ec5612791565b5b5f612ed3868287016127b8565b9350506020612ee486828701612b3c565b9250506040612ef586828701612c48565b9150509250925092565b612f0881612cf2565b8114612f12575f80fd5b50565b5f81359050612f2381612eff565b92915050565b5f80fd5b5f8083601f840112612f4257612f416128fb565b5b8235905067ffffffffffffffff811115612f5f57612f5e612f29565b5b602083019150836001820283011115612f7b57612f7a6129b2565b5b9250929050565b5f805f805f805f805f6101008a8c031215612fa057612f9f612791565b5b5f612fad8c828d01612b3c565b9950506020612fbe8c828d01612c48565b9850506040612fcf8c828d016127b8565b9750506060612fe08c828d01612f15565b9650506080612ff18c828d01612b3c565b95505060a06130028c828d01612c48565b94505060c06130138c828d01612b3c565b93505060e08a013567ffffffffffffffff81111561303457613033612795565b5b6130408c828d01612f2d565b92509250509295985092959850929598565b61305b81612799565b82525050565b5f6020820190506130745f830184613052565b92915050565b5f805f806080858703121561309257613091612791565b5b5f61309f878288016127b8565b94505060206130b0878288016127b8565b93505060406130c187828801612b3c565b92505060606130d287828801612bb7565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81549050919050565b5f819050815f5260205f209050919050565b5f815f1c9050919050565b5f819050919050565b5f61314d61314883613127565b613132565b9050919050565b604082015f8083015490506131688161313b565b6131745f860182612820565b50600183015490506131858161313b565b6131926020860182612820565b5050505050565b5f6131a48383613154565b60408301905092915050565b5f600282019050919050565b5f6131c68261310b565b6131d08185612801565b93506131db83613115565b805f5b8381101561320a57816131f18882613199565b97506131fc836131b0565b9250506001810190506131de565b5085935050505092915050565b5f6020820190508181035f83015261322f81846131bc565b905092915050565b5f82825260208201905092915050565b7f476174657761793a207a65726f206164647265737300000000000000000000005f82015250565b5f61327b601583613237565b915061328682613247565b602082019050919050565b5f6020820190508181035f8301526132a88161326f565b9050919050565b7f476174657761793a207472656173757279206164647265737320616c726561645f8201527f7920736574000000000000000000000000000000000000000000000000000000602082015250565b5f613309602583613237565b9150613314826132af565b604082019050919050565b5f6020820190508181035f830152613336816132fd565b9050919050565b7f476174657761793a2061676772656761746f72206164647265737320616c72655f8201527f6164792073657400000000000000000000000000000000000000000000000000602082015250565b5f613397602783613237565b91506133a28261333d565b604082019050919050565b5f6020820190508181035f8301526133c48161338b565b9050919050565b5f6020820190506133de5f830184612e24565b92915050565b7f4f6e6c7941676772656761746f720000000000000000000000000000000000005f82015250565b5f613418600e83613237565b9150613423826133e4565b602082019050919050565b5f6020820190508181035f8301526134458161340c565b9050919050565b7f4f7264657246756c66696c6c65640000000000000000000000000000000000005f82015250565b5f613480600e83613237565b915061348b8261344c565b602082019050919050565b5f6020820190508181035f8301526134ad81613474565b9050919050565b7f4f72646572526566756e646564000000000000000000000000000000000000005f82015250565b5f6134e8600d83613237565b91506134f3826134b4565b602082019050919050565b5f6020820190508181035f830152613515816134dc565b9050919050565b7f4665654578636565647350726f746f636f6c46656500000000000000000000005f82015250565b5f613550601583613237565b915061355b8261351c565b602082019050919050565b5f6020820190508181035f83015261357d81613544565b9050919050565b5f6040820190506135975f830185612dfc565b6135a46020830184612e33565b9392505050565b6135b481612bf6565b81146135be575f80fd5b50565b5f815190506135cf816135ab565b92915050565b5f602082840312156135ea576135e9612791565b5b5f6135f7848285016135c1565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61363782612c29565b915061364283612c29565b925082820190508082111561365a57613659613600565b5b92915050565b5f61366a82612c29565b915061367583612c29565b925082820390508181111561368d5761368c613600565b5b92915050565b5f6020820190506136a65f830184612e33565b92915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865205f8201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b5f613706602983613237565b9150613711826136ac565b604082019050919050565b5f6020820190508181035f830152613733816136fa565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f613794602e83613237565b915061379f8261373a565b604082019050919050565b5f6020820190508181035f8301526137c181613788565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f6138006137fb6137f6846137c8565b6137dd565b6137d1565b9050919050565b613810816137e6565b82525050565b5f6020820190506138295f830184613807565b92915050565b7f476174657761793a20696e76616c6964207374617475730000000000000000005f82015250565b5f613863601783613237565b915061386e8261382f565b602082019050919050565b5f6020820190508181035f83015261389081613857565b9050919050565b7f496e76616c69644d6573736167654861736800000000000000000000000000005f82015250565b5f6138cb601283613237565b91506138d682613897565b602082019050919050565b5f6020820190508181035f8301526138f8816138bf565b9050919050565b5f6060820190506139125f830186612dfc565b61391f6020830185612dfc565b61392c6040830184612e33565b949350505050565b5f61393e82612c29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139705761396f613600565b5b600182019050919050565b5f61398582612c29565b915061399083612c29565b925082820261399e81612c29565b915082820484148315176139b5576139b4613600565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6139f382612c29565b91506139fe83612c29565b925082613a0e57613a0d6139bc565b5b828204905092915050565b5f613a33613a2e613a2984612cf2565b6137dd565b612c29565b9050919050565b613a4381613a19565b82525050565b828183375f83830152505050565b5f613a628385613237565b9350613a6f838584613a49565b613a78836128ff565b840190509392505050565b5f60a082019050613a965f830189612e33565b613aa36020830188613052565b613ab06040830187613a3a565b613abd6060830186613052565b8181036080830152613ad0818486613a57565b9050979650505050505050565b5f613ae782612cf2565b9150613af283612cf2565b925082820390506bffffffffffffffffffffffff811115613b1657613b15613600565b5b92915050565b5f613b36613b31613b2c84612b8e565b6137dd565b612cf2565b9050919050565b613b4681613b1c565b82525050565b5f604082019050613b5f5f830185613052565b613b6c6020830184613b3d565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613ba7602083613237565b9150613bb282613b73565b602082019050919050565b5f6020820190508181035f830152613bd481613b9b565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f613c35602b83613237565b9150613c4082613bdb565b604082019050919050565b5f6020820190508181035f830152613c6281613c29565b9050919050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f613c9d601083613237565b9150613ca882613c69565b602082019050919050565b5f6020820190508181035f830152613cca81613c91565b9050919050565b7f546f6b656e4e6f74537570706f727465640000000000000000000000000000005f82015250565b5f613d05601183613237565b9150613d1082613cd1565b602082019050919050565b5f6020820190508181035f830152613d3281613cf9565b9050919050565b7f416d6f756e7449735a65726f00000000000000000000000000000000000000005f82015250565b5f613d6d600c83613237565b9150613d7882613d39565b602082019050919050565b5f6020820190508181035f830152613d9a81613d61565b9050919050565b7f5468726f775a65726f41646472657373000000000000000000000000000000005f82015250565b5f613dd5601083613237565b9150613de082613da1565b602082019050919050565b5f6020820190508181035f830152613e0281613dc9565b9050919050565b7f496e76616c6964496e737469747574696f6e436f6465000000000000000000005f82015250565b5f613e3d601683613237565b9150613e4882613e09565b602082019050919050565b5f6020820190508181035f830152613e6a81613e31565b9050919050565b7f496e76616c696453656e646572466565526563697069656e74000000000000005f82015250565b5f613ea5601983613237565b9150613eb082613e71565b602082019050919050565b5f6020820190508181035f830152613ed281613e99565b9050919050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f613f0d601483613237565b9150613f1882613ed9565b602082019050919050565b5f6020820190508181035f830152613f3a81613f01565b905091905056fea2646970667358221220f218921dcaf3bceed909a790925a030bafedb7c07605c82381d16500110cac8f64736f6c63430008180033",
}

// GatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use GatewayMetaData.ABI instead.
var GatewayABI = GatewayMetaData.ABI

// GatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GatewayMetaData.Bin instead.
var GatewayBin = GatewayMetaData.Bin

// DeployGateway deploys a new Ethereum contract, binding an instance of Gateway to it.
func DeployGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Gateway, error) {
	parsed, err := GatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gateway{GatewayCaller: GatewayCaller{contract: contract}, GatewayTransactor: GatewayTransactor{contract: contract}, GatewayFilterer: GatewayFilterer{contract: contract}}, nil
}

// Gateway is an auto generated Go binding around an Ethereum contract.
type Gateway struct {
	GatewayCaller     // Read-only binding to the contract
	GatewayTransactor // Write-only binding to the contract
	GatewayFilterer   // Log filterer for contract events
}

// GatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type GatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GatewaySession struct {
	Contract     *Gateway          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GatewayCallerSession struct {
	Contract *GatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// GatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GatewayTransactorSession struct {
	Contract     *GatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type GatewayRaw struct {
	Contract *Gateway // Generic contract binding to access the raw methods on
}

// GatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GatewayCallerRaw struct {
	Contract *GatewayCaller // Generic read-only contract binding to access the raw methods on
}

// GatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GatewayTransactorRaw struct {
	Contract *GatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGateway creates a new instance of Gateway, bound to a specific deployed contract.
func NewGateway(address common.Address, backend bind.ContractBackend) (*Gateway, error) {
	contract, err := bindGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gateway{GatewayCaller: GatewayCaller{contract: contract}, GatewayTransactor: GatewayTransactor{contract: contract}, GatewayFilterer: GatewayFilterer{contract: contract}}, nil
}

// NewGatewayCaller creates a new read-only instance of Gateway, bound to a specific deployed contract.
func NewGatewayCaller(address common.Address, caller bind.ContractCaller) (*GatewayCaller, error) {
	contract, err := bindGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayCaller{contract: contract}, nil
}

// NewGatewayTransactor creates a new write-only instance of Gateway, bound to a specific deployed contract.
func NewGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*GatewayTransactor, error) {
	contract, err := bindGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayTransactor{contract: contract}, nil
}

// NewGatewayFilterer creates a new log filterer instance of Gateway, bound to a specific deployed contract.
func NewGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*GatewayFilterer, error) {
	contract, err := bindGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GatewayFilterer{contract: contract}, nil
}

// bindGateway binds a generic wrapper to an already deployed contract.
func bindGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gateway *GatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gateway.Contract.GatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gateway *GatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.Contract.GatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gateway *GatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gateway.Contract.GatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gateway *GatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gateway *GatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gateway *GatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gateway.Contract.contract.Transact(opts, method, params...)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Gateway *GatewayCaller) GetFeeDetails(opts *bind.CallOpts) (uint64, *big.Int, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getFeeDetails")

	if err != nil {
		return *new(uint64), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Gateway *GatewaySession) GetFeeDetails() (uint64, *big.Int, error) {
	return _Gateway.Contract.GetFeeDetails(&_Gateway.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Gateway *GatewayCallerSession) GetFeeDetails() (uint64, *big.Int, error) {
	return _Gateway.Contract.GetFeeDetails(&_Gateway.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewayCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IGatewayOrder, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IGatewayOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IGatewayOrder)).(*IGatewayOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewaySession) GetOrderInfo(_orderId [32]byte) (IGatewayOrder, error) {
	return _Gateway.Contract.GetOrderInfo(&_Gateway.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,bool,bool,address,uint96,uint256))
func (_Gateway *GatewayCallerSession) GetOrderInfo(_orderId [32]byte) (IGatewayOrder, error) {
	return _Gateway.Contract.GetOrderInfo(&_Gateway.CallOpts, _orderId)
}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Gateway *GatewayCaller) GetSupportedInstitutionByCode(opts *bind.CallOpts, _code [32]byte) (SharedStructsInstitutionByCode, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getSupportedInstitutionByCode", _code)

	if err != nil {
		return *new(SharedStructsInstitutionByCode), err
	}

	out0 := *abi.ConvertType(out[0], new(SharedStructsInstitutionByCode)).(*SharedStructsInstitutionByCode)

	return out0, err

}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Gateway *GatewaySession) GetSupportedInstitutionByCode(_code [32]byte) (SharedStructsInstitutionByCode, error) {
	return _Gateway.Contract.GetSupportedInstitutionByCode(&_Gateway.CallOpts, _code)
}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Gateway *GatewayCallerSession) GetSupportedInstitutionByCode(_code [32]byte) (SharedStructsInstitutionByCode, error) {
	return _Gateway.Contract.GetSupportedInstitutionByCode(&_Gateway.CallOpts, _code)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Gateway *GatewayCaller) GetSupportedInstitutions(opts *bind.CallOpts, _currency [32]byte) ([]SharedStructsInstitution, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "getSupportedInstitutions", _currency)

	if err != nil {
		return *new([]SharedStructsInstitution), err
	}

	out0 := *abi.ConvertType(out[0], new([]SharedStructsInstitution)).(*[]SharedStructsInstitution)

	return out0, err

}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Gateway *GatewaySession) GetSupportedInstitutions(_currency [32]byte) ([]SharedStructsInstitution, error) {
	return _Gateway.Contract.GetSupportedInstitutions(&_Gateway.CallOpts, _currency)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Gateway *GatewayCallerSession) GetSupportedInstitutions(_currency [32]byte) ([]SharedStructsInstitution, error) {
	return _Gateway.Contract.GetSupportedInstitutions(&_Gateway.CallOpts, _currency)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewayCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewaySession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Gateway.Contract.IsTokenSupported(&_Gateway.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Gateway *GatewayCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Gateway.Contract.IsTokenSupported(&_Gateway.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewaySession) Owner() (common.Address, error) {
	return _Gateway.Contract.Owner(&_Gateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gateway *GatewayCallerSession) Owner() (common.Address, error) {
	return _Gateway.Contract.Owner(&_Gateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewayCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewaySession) Paused() (bool, error) {
	return _Gateway.Contract.Paused(&_Gateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Gateway *GatewayCallerSession) Paused() (bool, error) {
	return _Gateway.Contract.Paused(&_Gateway.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewayCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gateway.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewaySession) PendingOwner() (common.Address, error) {
	return _Gateway.Contract.PendingOwner(&_Gateway.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Gateway *GatewayCallerSession) PendingOwner() (common.Address, error) {
	return _Gateway.Contract.PendingOwner(&_Gateway.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewayTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewaySession) AcceptOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.AcceptOwnership(&_Gateway.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Gateway *GatewayTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.AcceptOwnership(&_Gateway.TransactOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewayTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "createOrder", _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewaySession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.Contract.CreateOrder(&_Gateway.TransactOpts, _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Gateway *GatewayTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Gateway.Contract.CreateOrder(&_Gateway.TransactOpts, _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewayTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewaySession) Initialize() (*types.Transaction, error) {
	return _Gateway.Contract.Initialize(&_Gateway.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gateway *GatewayTransactorSession) Initialize() (*types.Transaction, error) {
	return _Gateway.Contract.Initialize(&_Gateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewayTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewaySession) Pause() (*types.Transaction, error) {
	return _Gateway.Contract.Pause(&_Gateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Gateway *GatewayTransactorSession) Pause() (*types.Transaction, error) {
	return _Gateway.Contract.Pause(&_Gateway.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewayTransactor) Refund(opts *bind.TransactOpts, _fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "refund", _fee, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewaySession) Refund(_fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.Contract.Refund(&_Gateway.TransactOpts, _fee, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x71eedb88.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId) returns(bool)
func (_Gateway *GatewayTransactorSession) Refund(_fee *big.Int, _orderId [32]byte) (*types.Transaction, error) {
	return _Gateway.Contract.Refund(&_Gateway.TransactOpts, _fee, _orderId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.RenounceOwnership(&_Gateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gateway *GatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gateway.Contract.RenounceOwnership(&_Gateway.TransactOpts)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Gateway *GatewayTransactor) SetSupportedInstitutions(opts *bind.TransactOpts, currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "setSupportedInstitutions", currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Gateway *GatewaySession) SetSupportedInstitutions(currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Gateway.Contract.SetSupportedInstitutions(&_Gateway.TransactOpts, currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Gateway *GatewayTransactorSession) SetSupportedInstitutions(currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Gateway.Contract.SetSupportedInstitutions(&_Gateway.TransactOpts, currency, institutions)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewayTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewaySession) SettingManagerBool(what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SettingManagerBool(&_Gateway.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0xcd992400.
//
// Solidity: function settingManagerBool(bytes32 what, address value, uint256 status) returns()
func (_Gateway *GatewayTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status *big.Int) (*types.Transaction, error) {
	return _Gateway.Contract.SettingManagerBool(&_Gateway.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0xf22ee704.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent) returns(bool)
func (_Gateway *GatewayTransactor) Settle(opts *bind.TransactOpts, _splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "settle", _splitOrderId, _orderId, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xf22ee704.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent) returns(bool)
func (_Gateway *GatewaySession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.Settle(&_Gateway.TransactOpts, _splitOrderId, _orderId, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xf22ee704.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, address _liquidityProvider, uint64 _settlePercent) returns(bool)
func (_Gateway *GatewayTransactorSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.Settle(&_Gateway.TransactOpts, _splitOrderId, _orderId, _liquidityProvider, _settlePercent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.TransferOwnership(&_Gateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gateway *GatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.TransferOwnership(&_Gateway.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewayTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewaySession) Unpause() (*types.Transaction, error) {
	return _Gateway.Contract.Unpause(&_Gateway.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Gateway *GatewayTransactorSession) Unpause() (*types.Transaction, error) {
	return _Gateway.Contract.Unpause(&_Gateway.TransactOpts)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewayTransactor) UpdateProtocolAddress(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "updateProtocolAddress", what, value)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewaySession) UpdateProtocolAddress(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolAddress(&_Gateway.TransactOpts, what, value)
}

// UpdateProtocolAddress is a paid mutator transaction binding the contract method 0x40ebc677.
//
// Solidity: function updateProtocolAddress(bytes32 what, address value) returns()
func (_Gateway *GatewayTransactorSession) UpdateProtocolAddress(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolAddress(&_Gateway.TransactOpts, what, value)
}

// UpdateProtocolFee is a paid mutator transaction binding the contract method 0x47094e2e.
//
// Solidity: function updateProtocolFee(uint64 _protocolFeePercent) returns()
func (_Gateway *GatewayTransactor) UpdateProtocolFee(opts *bind.TransactOpts, _protocolFeePercent uint64) (*types.Transaction, error) {
	return _Gateway.contract.Transact(opts, "updateProtocolFee", _protocolFeePercent)
}

// UpdateProtocolFee is a paid mutator transaction binding the contract method 0x47094e2e.
//
// Solidity: function updateProtocolFee(uint64 _protocolFeePercent) returns()
func (_Gateway *GatewaySession) UpdateProtocolFee(_protocolFeePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolFee(&_Gateway.TransactOpts, _protocolFeePercent)
}

// UpdateProtocolFee is a paid mutator transaction binding the contract method 0x47094e2e.
//
// Solidity: function updateProtocolFee(uint64 _protocolFeePercent) returns()
func (_Gateway *GatewayTransactorSession) UpdateProtocolFee(_protocolFeePercent uint64) (*types.Transaction, error) {
	return _Gateway.Contract.UpdateProtocolFee(&_Gateway.TransactOpts, _protocolFeePercent)
}

// GatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Gateway contract.
type GatewayInitializedIterator struct {
	Event *GatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayInitialized represents a Initialized event raised by the Gateway contract.
type GatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*GatewayInitializedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &GatewayInitializedIterator{contract: _Gateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *GatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayInitialized)
				if err := _Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gateway *GatewayFilterer) ParseInitialized(log types.Log) (*GatewayInitialized, error) {
	event := new(GatewayInitialized)
	if err := _Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the Gateway contract.
type GatewayOrderCreatedIterator struct {
	Event *GatewayOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderCreated represents a OrderCreated event raised by the Gateway contract.
type GatewayOrderCreated struct {
	Sender          common.Address
	Token           common.Address
	Amount          *big.Int
	ProtocolFee     *big.Int
	OrderId         [32]byte
	Rate            *big.Int
	InstitutionCode [32]byte
	MessageHash     string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x3bdd0d86e09a22d7ce596118bd3ca5ec73ea47533a465be37621e913ed2bf333.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_Gateway *GatewayFilterer) FilterOrderCreated(opts *bind.FilterOpts, sender []common.Address, token []common.Address, amount []*big.Int) (*GatewayOrderCreatedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderCreated", senderRule, tokenRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderCreatedIterator{contract: _Gateway.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x3bdd0d86e09a22d7ce596118bd3ca5ec73ea47533a465be37621e913ed2bf333.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_Gateway *GatewayFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *GatewayOrderCreated, sender []common.Address, token []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderCreated", senderRule, tokenRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderCreated)
				if err := _Gateway.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x3bdd0d86e09a22d7ce596118bd3ca5ec73ea47533a465be37621e913ed2bf333.
//
// Solidity: event OrderCreated(address indexed sender, address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_Gateway *GatewayFilterer) ParseOrderCreated(log types.Log) (*GatewayOrderCreated, error) {
	event := new(GatewayOrderCreated)
	if err := _Gateway.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderRefundedIterator is returned from FilterOrderRefunded and is used to iterate over the raw logs and unpacked data for OrderRefunded events raised by the Gateway contract.
type GatewayOrderRefundedIterator struct {
	Event *GatewayOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderRefunded represents a OrderRefunded event raised by the Gateway contract.
type GatewayOrderRefunded struct {
	Fee     *big.Int
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderRefunded is a free log retrieval operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) FilterOrderRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*GatewayOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderRefundedIterator{contract: _Gateway.contract, event: "OrderRefunded", logs: logs, sub: sub}, nil
}

// WatchOrderRefunded is a free log subscription operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) WatchOrderRefunded(opts *bind.WatchOpts, sink chan<- *GatewayOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderRefunded)
				if err := _Gateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderRefunded is a log parse operation binding the contract event 0x0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId)
func (_Gateway *GatewayFilterer) ParseOrderRefunded(log types.Log) (*GatewayOrderRefunded, error) {
	event := new(GatewayOrderRefunded)
	if err := _Gateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOrderSettledIterator is returned from FilterOrderSettled and is used to iterate over the raw logs and unpacked data for OrderSettled events raised by the Gateway contract.
type GatewayOrderSettledIterator struct {
	Event *GatewayOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOrderSettled represents a OrderSettled event raised by the Gateway contract.
type GatewayOrderSettled struct {
	SplitOrderId      [32]byte
	OrderId           [32]byte
	LiquidityProvider common.Address
	SettlePercent     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOrderSettled is a free log retrieval operation binding the contract event 0x98ece21e01a01cbe1d1c0dad3b053c8fbd368f99be78be958fcf1d1d13fd249a.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_Gateway *GatewayFilterer) FilterOrderSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*GatewayOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOrderSettledIterator{contract: _Gateway.contract, event: "OrderSettled", logs: logs, sub: sub}, nil
}

// WatchOrderSettled is a free log subscription operation binding the contract event 0x98ece21e01a01cbe1d1c0dad3b053c8fbd368f99be78be958fcf1d1d13fd249a.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_Gateway *GatewayFilterer) WatchOrderSettled(opts *bind.WatchOpts, sink chan<- *GatewayOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOrderSettled)
				if err := _Gateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSettled is a log parse operation binding the contract event 0x98ece21e01a01cbe1d1c0dad3b053c8fbd368f99be78be958fcf1d1d13fd249a.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_Gateway *GatewayFilterer) ParseOrderSettled(log types.Log) (*GatewayOrderSettled, error) {
	event := new(GatewayOrderSettled)
	if err := _Gateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the Gateway contract.
type GatewayOwnershipTransferStartedIterator struct {
	Event *GatewayOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the Gateway contract.
type GatewayOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GatewayOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOwnershipTransferStartedIterator{contract: _Gateway.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *GatewayOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOwnershipTransferStarted)
				if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) ParseOwnershipTransferStarted(log types.Log) (*GatewayOwnershipTransferStarted, error) {
	event := new(GatewayOwnershipTransferStarted)
	if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gateway contract.
type GatewayOwnershipTransferredIterator struct {
	Event *GatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayOwnershipTransferred represents a OwnershipTransferred event raised by the Gateway contract.
type GatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GatewayOwnershipTransferredIterator{contract: _Gateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayOwnershipTransferred)
				if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gateway *GatewayFilterer) ParseOwnershipTransferred(log types.Log) (*GatewayOwnershipTransferred, error) {
	event := new(GatewayOwnershipTransferred)
	if err := _Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Gateway contract.
type GatewayPausedIterator struct {
	Event *GatewayPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayPaused represents a Paused event raised by the Gateway contract.
type GatewayPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) FilterPaused(opts *bind.FilterOpts) (*GatewayPausedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &GatewayPausedIterator{contract: _Gateway.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *GatewayPaused) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayPaused)
				if err := _Gateway.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Gateway *GatewayFilterer) ParsePaused(log types.Log) (*GatewayPaused, error) {
	event := new(GatewayPaused)
	if err := _Gateway.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayProtocolAddressUpdatedIterator is returned from FilterProtocolAddressUpdated and is used to iterate over the raw logs and unpacked data for ProtocolAddressUpdated events raised by the Gateway contract.
type GatewayProtocolAddressUpdatedIterator struct {
	Event *GatewayProtocolAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayProtocolAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayProtocolAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayProtocolAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayProtocolAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayProtocolAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayProtocolAddressUpdated represents a ProtocolAddressUpdated event raised by the Gateway contract.
type GatewayProtocolAddressUpdated struct {
	What            [32]byte
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProtocolAddressUpdated is a free log retrieval operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) FilterProtocolAddressUpdated(opts *bind.FilterOpts, what [][32]byte, treasuryAddress []common.Address) (*GatewayProtocolAddressUpdatedIterator, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "ProtocolAddressUpdated", whatRule, treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return &GatewayProtocolAddressUpdatedIterator{contract: _Gateway.contract, event: "ProtocolAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolAddressUpdated is a free log subscription operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) WatchProtocolAddressUpdated(opts *bind.WatchOpts, sink chan<- *GatewayProtocolAddressUpdated, what [][32]byte, treasuryAddress []common.Address) (event.Subscription, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "ProtocolAddressUpdated", whatRule, treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayProtocolAddressUpdated)
				if err := _Gateway.contract.UnpackLog(event, "ProtocolAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolAddressUpdated is a log parse operation binding the contract event 0xbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4.
//
// Solidity: event ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) ParseProtocolAddressUpdated(log types.Log) (*GatewayProtocolAddressUpdated, error) {
	event := new(GatewayProtocolAddressUpdated)
	if err := _Gateway.contract.UnpackLog(event, "ProtocolAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayProtocolFeeUpdatedIterator is returned from FilterProtocolFeeUpdated and is used to iterate over the raw logs and unpacked data for ProtocolFeeUpdated events raised by the Gateway contract.
type GatewayProtocolFeeUpdatedIterator struct {
	Event *GatewayProtocolFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayProtocolFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayProtocolFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayProtocolFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayProtocolFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayProtocolFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayProtocolFeeUpdated represents a ProtocolFeeUpdated event raised by the Gateway contract.
type GatewayProtocolFeeUpdated struct {
	ProtocolFee uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProtocolFeeUpdated is a free log retrieval operation binding the contract event 0x1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b.
//
// Solidity: event ProtocolFeeUpdated(uint64 protocolFee)
func (_Gateway *GatewayFilterer) FilterProtocolFeeUpdated(opts *bind.FilterOpts) (*GatewayProtocolFeeUpdatedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "ProtocolFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &GatewayProtocolFeeUpdatedIterator{contract: _Gateway.contract, event: "ProtocolFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolFeeUpdated is a free log subscription operation binding the contract event 0x1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b.
//
// Solidity: event ProtocolFeeUpdated(uint64 protocolFee)
func (_Gateway *GatewayFilterer) WatchProtocolFeeUpdated(opts *bind.WatchOpts, sink chan<- *GatewayProtocolFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "ProtocolFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayProtocolFeeUpdated)
				if err := _Gateway.contract.UnpackLog(event, "ProtocolFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolFeeUpdated is a log parse operation binding the contract event 0x1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b.
//
// Solidity: event ProtocolFeeUpdated(uint64 protocolFee)
func (_Gateway *GatewayFilterer) ParseProtocolFeeUpdated(log types.Log) (*GatewayProtocolFeeUpdated, error) {
	event := new(GatewayProtocolFeeUpdated)
	if err := _Gateway.contract.UnpackLog(event, "ProtocolFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySenderFeeTransferredIterator is returned from FilterSenderFeeTransferred and is used to iterate over the raw logs and unpacked data for SenderFeeTransferred events raised by the Gateway contract.
type GatewaySenderFeeTransferredIterator struct {
	Event *GatewaySenderFeeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySenderFeeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySenderFeeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySenderFeeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySenderFeeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySenderFeeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySenderFeeTransferred represents a SenderFeeTransferred event raised by the Gateway contract.
type GatewaySenderFeeTransferred struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSenderFeeTransferred is a free log retrieval operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) FilterSenderFeeTransferred(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*GatewaySenderFeeTransferredIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySenderFeeTransferredIterator{contract: _Gateway.contract, event: "SenderFeeTransferred", logs: logs, sub: sub}, nil
}

// WatchSenderFeeTransferred is a free log subscription operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) WatchSenderFeeTransferred(opts *bind.WatchOpts, sink chan<- *GatewaySenderFeeTransferred, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySenderFeeTransferred)
				if err := _Gateway.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSenderFeeTransferred is a log parse operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Gateway *GatewayFilterer) ParseSenderFeeTransferred(log types.Log) (*GatewaySenderFeeTransferred, error) {
	event := new(GatewaySenderFeeTransferred)
	if err := _Gateway.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySetFeeRecipientIterator is returned from FilterSetFeeRecipient and is used to iterate over the raw logs and unpacked data for SetFeeRecipient events raised by the Gateway contract.
type GatewaySetFeeRecipientIterator struct {
	Event *GatewaySetFeeRecipient // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySetFeeRecipientIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySetFeeRecipient)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySetFeeRecipient)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySetFeeRecipientIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySetFeeRecipientIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySetFeeRecipient represents a SetFeeRecipient event raised by the Gateway contract.
type GatewaySetFeeRecipient struct {
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetFeeRecipient is a free log retrieval operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) FilterSetFeeRecipient(opts *bind.FilterOpts, treasuryAddress []common.Address) (*GatewaySetFeeRecipientIterator, error) {

	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SetFeeRecipient", treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySetFeeRecipientIterator{contract: _Gateway.contract, event: "SetFeeRecipient", logs: logs, sub: sub}, nil
}

// WatchSetFeeRecipient is a free log subscription operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) WatchSetFeeRecipient(opts *bind.WatchOpts, sink chan<- *GatewaySetFeeRecipient, treasuryAddress []common.Address) (event.Subscription, error) {

	var treasuryAddressRule []interface{}
	for _, treasuryAddressItem := range treasuryAddress {
		treasuryAddressRule = append(treasuryAddressRule, treasuryAddressItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SetFeeRecipient", treasuryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySetFeeRecipient)
				if err := _Gateway.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFeeRecipient is a log parse operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address indexed treasuryAddress)
func (_Gateway *GatewayFilterer) ParseSetFeeRecipient(log types.Log) (*GatewaySetFeeRecipient, error) {
	event := new(GatewaySetFeeRecipient)
	if err := _Gateway.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the Gateway contract.
type GatewaySettingManagerBoolIterator struct {
	Event *GatewaySettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySettingManagerBool represents a SettingManagerBool event raised by the Gateway contract.
type GatewaySettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) FilterSettingManagerBool(opts *bind.FilterOpts, what [][32]byte, value []common.Address) (*GatewaySettingManagerBoolIterator, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SettingManagerBool", whatRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySettingManagerBoolIterator{contract: _Gateway.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *GatewaySettingManagerBool, what [][32]byte, value []common.Address) (event.Subscription, error) {

	var whatRule []interface{}
	for _, whatItem := range what {
		whatRule = append(whatRule, whatItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SettingManagerBool", whatRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySettingManagerBool)
				if err := _Gateway.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c.
//
// Solidity: event SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status)
func (_Gateway *GatewayFilterer) ParseSettingManagerBool(log types.Log) (*GatewaySettingManagerBool, error) {
	event := new(GatewaySettingManagerBool)
	if err := _Gateway.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewaySupportedInstitutionsUpdatedIterator is returned from FilterSupportedInstitutionsUpdated and is used to iterate over the raw logs and unpacked data for SupportedInstitutionsUpdated events raised by the Gateway contract.
type GatewaySupportedInstitutionsUpdatedIterator struct {
	Event *GatewaySupportedInstitutionsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewaySupportedInstitutionsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewaySupportedInstitutionsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewaySupportedInstitutionsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewaySupportedInstitutionsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewaySupportedInstitutionsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewaySupportedInstitutionsUpdated represents a SupportedInstitutionsUpdated event raised by the Gateway contract.
type GatewaySupportedInstitutionsUpdated struct {
	Currency     [32]byte
	Institutions []SharedStructsInstitution
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSupportedInstitutionsUpdated is a free log retrieval operation binding the contract event 0x58f3a30ec15a8d3e09fa65f9ef10219bc7a9a99d872a4ed895c37c2e761ac2ac.
//
// Solidity: event SupportedInstitutionsUpdated(bytes32 indexed currency, (bytes32,bytes32)[] institutions)
func (_Gateway *GatewayFilterer) FilterSupportedInstitutionsUpdated(opts *bind.FilterOpts, currency [][32]byte) (*GatewaySupportedInstitutionsUpdatedIterator, error) {

	var currencyRule []interface{}
	for _, currencyItem := range currency {
		currencyRule = append(currencyRule, currencyItem)
	}

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "SupportedInstitutionsUpdated", currencyRule)
	if err != nil {
		return nil, err
	}
	return &GatewaySupportedInstitutionsUpdatedIterator{contract: _Gateway.contract, event: "SupportedInstitutionsUpdated", logs: logs, sub: sub}, nil
}

// WatchSupportedInstitutionsUpdated is a free log subscription operation binding the contract event 0x58f3a30ec15a8d3e09fa65f9ef10219bc7a9a99d872a4ed895c37c2e761ac2ac.
//
// Solidity: event SupportedInstitutionsUpdated(bytes32 indexed currency, (bytes32,bytes32)[] institutions)
func (_Gateway *GatewayFilterer) WatchSupportedInstitutionsUpdated(opts *bind.WatchOpts, sink chan<- *GatewaySupportedInstitutionsUpdated, currency [][32]byte) (event.Subscription, error) {

	var currencyRule []interface{}
	for _, currencyItem := range currency {
		currencyRule = append(currencyRule, currencyItem)
	}

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "SupportedInstitutionsUpdated", currencyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewaySupportedInstitutionsUpdated)
				if err := _Gateway.contract.UnpackLog(event, "SupportedInstitutionsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSupportedInstitutionsUpdated is a log parse operation binding the contract event 0x58f3a30ec15a8d3e09fa65f9ef10219bc7a9a99d872a4ed895c37c2e761ac2ac.
//
// Solidity: event SupportedInstitutionsUpdated(bytes32 indexed currency, (bytes32,bytes32)[] institutions)
func (_Gateway *GatewayFilterer) ParseSupportedInstitutionsUpdated(log types.Log) (*GatewaySupportedInstitutionsUpdated, error) {
	event := new(GatewaySupportedInstitutionsUpdated)
	if err := _Gateway.contract.UnpackLog(event, "SupportedInstitutionsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GatewayUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Gateway contract.
type GatewayUnpausedIterator struct {
	Event *GatewayUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayUnpaused represents a Unpaused event raised by the Gateway contract.
type GatewayUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) FilterUnpaused(opts *bind.FilterOpts) (*GatewayUnpausedIterator, error) {

	logs, sub, err := _Gateway.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &GatewayUnpausedIterator{contract: _Gateway.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *GatewayUnpaused) (event.Subscription, error) {

	logs, sub, err := _Gateway.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayUnpaused)
				if err := _Gateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Gateway *GatewayFilterer) ParseUnpaused(log types.Log) (*GatewayUnpaused, error) {
	event := new(GatewayUnpaused)
	if err := _Gateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
