// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providercurrencyavailability"
)

// ProviderCurrencyAvailabilityDelete is the builder for deleting a ProviderCurrencyAvailability entity.
type ProviderCurrencyAvailabilityDelete struct {
	config
	hooks    []Hook
	mutation *ProviderCurrencyAvailabilityMutation
}

// Where appends a list predicates to the ProviderCurrencyAvailabilityDelete builder.
func (pcad *ProviderCurrencyAvailabilityDelete) Where(ps ...predicate.ProviderCurrencyAvailability) *ProviderCurrencyAvailabilityDelete {
	pcad.mutation.Where(ps...)
	return pcad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pcad *ProviderCurrencyAvailabilityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pcad.sqlExec, pcad.mutation, pcad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pcad *ProviderCurrencyAvailabilityDelete) ExecX(ctx context.Context) int {
	n, err := pcad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pcad *ProviderCurrencyAvailabilityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(providercurrencyavailability.Table, sqlgraph.NewFieldSpec(providercurrencyavailability.FieldID, field.TypeUUID))
	if ps := pcad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pcad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pcad.mutation.done = true
	return affected, err
}

// ProviderCurrencyAvailabilityDeleteOne is the builder for deleting a single ProviderCurrencyAvailability entity.
type ProviderCurrencyAvailabilityDeleteOne struct {
	pcad *ProviderCurrencyAvailabilityDelete
}

// Where appends a list predicates to the ProviderCurrencyAvailabilityDelete builder.
func (pcado *ProviderCurrencyAvailabilityDeleteOne) Where(ps ...predicate.ProviderCurrencyAvailability) *ProviderCurrencyAvailabilityDeleteOne {
	pcado.pcad.mutation.Where(ps...)
	return pcado
}

// Exec executes the deletion query.
func (pcado *ProviderCurrencyAvailabilityDeleteOne) Exec(ctx context.Context) error {
	n, err := pcado.pcad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{providercurrencyavailability.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pcado *ProviderCurrencyAvailabilityDeleteOne) ExecX(ctx context.Context) {
	if err := pcado.Exec(ctx); err != nil {
		panic(err)
	}
}
