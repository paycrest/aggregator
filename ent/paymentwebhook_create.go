// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentwebhook"
)

// PaymentWebhookCreate is the builder for creating a PaymentWebhook entity.
type PaymentWebhookCreate struct {
	config
	mutation *PaymentWebhookMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pwc *PaymentWebhookCreate) SetCreatedAt(t time.Time) *PaymentWebhookCreate {
	pwc.mutation.SetCreatedAt(t)
	return pwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pwc *PaymentWebhookCreate) SetNillableCreatedAt(t *time.Time) *PaymentWebhookCreate {
	if t != nil {
		pwc.SetCreatedAt(*t)
	}
	return pwc
}

// SetUpdatedAt sets the "updated_at" field.
func (pwc *PaymentWebhookCreate) SetUpdatedAt(t time.Time) *PaymentWebhookCreate {
	pwc.mutation.SetUpdatedAt(t)
	return pwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pwc *PaymentWebhookCreate) SetNillableUpdatedAt(t *time.Time) *PaymentWebhookCreate {
	if t != nil {
		pwc.SetUpdatedAt(*t)
	}
	return pwc
}

// SetWebhookID sets the "webhook_id" field.
func (pwc *PaymentWebhookCreate) SetWebhookID(s string) *PaymentWebhookCreate {
	pwc.mutation.SetWebhookID(s)
	return pwc
}

// SetWebhookSecret sets the "webhook_secret" field.
func (pwc *PaymentWebhookCreate) SetWebhookSecret(s string) *PaymentWebhookCreate {
	pwc.mutation.SetWebhookSecret(s)
	return pwc
}

// SetCallbackURL sets the "callback_url" field.
func (pwc *PaymentWebhookCreate) SetCallbackURL(s string) *PaymentWebhookCreate {
	pwc.mutation.SetCallbackURL(s)
	return pwc
}

// SetID sets the "id" field.
func (pwc *PaymentWebhookCreate) SetID(u uuid.UUID) *PaymentWebhookCreate {
	pwc.mutation.SetID(u)
	return pwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pwc *PaymentWebhookCreate) SetNillableID(u *uuid.UUID) *PaymentWebhookCreate {
	if u != nil {
		pwc.SetID(*u)
	}
	return pwc
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (pwc *PaymentWebhookCreate) SetPaymentOrderID(id uuid.UUID) *PaymentWebhookCreate {
	pwc.mutation.SetPaymentOrderID(id)
	return pwc
}

// SetNillablePaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID if the given value is not nil.
func (pwc *PaymentWebhookCreate) SetNillablePaymentOrderID(id *uuid.UUID) *PaymentWebhookCreate {
	if id != nil {
		pwc = pwc.SetPaymentOrderID(*id)
	}
	return pwc
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (pwc *PaymentWebhookCreate) SetPaymentOrder(p *PaymentOrder) *PaymentWebhookCreate {
	return pwc.SetPaymentOrderID(p.ID)
}

// SetNetworkID sets the "network" edge to the Network entity by ID.
func (pwc *PaymentWebhookCreate) SetNetworkID(id int) *PaymentWebhookCreate {
	pwc.mutation.SetNetworkID(id)
	return pwc
}

// SetNillableNetworkID sets the "network" edge to the Network entity by ID if the given value is not nil.
func (pwc *PaymentWebhookCreate) SetNillableNetworkID(id *int) *PaymentWebhookCreate {
	if id != nil {
		pwc = pwc.SetNetworkID(*id)
	}
	return pwc
}

// SetNetwork sets the "network" edge to the Network entity.
func (pwc *PaymentWebhookCreate) SetNetwork(n *Network) *PaymentWebhookCreate {
	return pwc.SetNetworkID(n.ID)
}

// Mutation returns the PaymentWebhookMutation object of the builder.
func (pwc *PaymentWebhookCreate) Mutation() *PaymentWebhookMutation {
	return pwc.mutation
}

// Save creates the PaymentWebhook in the database.
func (pwc *PaymentWebhookCreate) Save(ctx context.Context) (*PaymentWebhook, error) {
	pwc.defaults()
	return withHooks(ctx, pwc.sqlSave, pwc.mutation, pwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pwc *PaymentWebhookCreate) SaveX(ctx context.Context) *PaymentWebhook {
	v, err := pwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwc *PaymentWebhookCreate) Exec(ctx context.Context) error {
	_, err := pwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwc *PaymentWebhookCreate) ExecX(ctx context.Context) {
	if err := pwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwc *PaymentWebhookCreate) defaults() {
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		v := paymentwebhook.DefaultCreatedAt()
		pwc.mutation.SetCreatedAt(v)
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		v := paymentwebhook.DefaultUpdatedAt()
		pwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pwc.mutation.ID(); !ok {
		v := paymentwebhook.DefaultID()
		pwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwc *PaymentWebhookCreate) check() error {
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentWebhook.created_at"`)}
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentWebhook.updated_at"`)}
	}
	if _, ok := pwc.mutation.WebhookID(); !ok {
		return &ValidationError{Name: "webhook_id", err: errors.New(`ent: missing required field "PaymentWebhook.webhook_id"`)}
	}
	if v, ok := pwc.mutation.WebhookID(); ok {
		if err := paymentwebhook.WebhookIDValidator(v); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_id": %w`, err)}
		}
	}
	if _, ok := pwc.mutation.WebhookSecret(); !ok {
		return &ValidationError{Name: "webhook_secret", err: errors.New(`ent: missing required field "PaymentWebhook.webhook_secret"`)}
	}
	if v, ok := pwc.mutation.WebhookSecret(); ok {
		if err := paymentwebhook.WebhookSecretValidator(v); err != nil {
			return &ValidationError{Name: "webhook_secret", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_secret": %w`, err)}
		}
	}
	if _, ok := pwc.mutation.CallbackURL(); !ok {
		return &ValidationError{Name: "callback_url", err: errors.New(`ent: missing required field "PaymentWebhook.callback_url"`)}
	}
	if v, ok := pwc.mutation.CallbackURL(); ok {
		if err := paymentwebhook.CallbackURLValidator(v); err != nil {
			return &ValidationError{Name: "callback_url", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.callback_url": %w`, err)}
		}
	}
	return nil
}

func (pwc *PaymentWebhookCreate) sqlSave(ctx context.Context) (*PaymentWebhook, error) {
	if err := pwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pwc.mutation.id = &_node.ID
	pwc.mutation.done = true
	return _node, nil
}

func (pwc *PaymentWebhookCreate) createSpec() (*PaymentWebhook, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentWebhook{config: pwc.config}
		_spec = sqlgraph.NewCreateSpec(paymentwebhook.Table, sqlgraph.NewFieldSpec(paymentwebhook.FieldID, field.TypeUUID))
	)
	if id, ok := pwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pwc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentwebhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pwc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentwebhook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pwc.mutation.WebhookID(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookID, field.TypeString, value)
		_node.WebhookID = value
	}
	if value, ok := pwc.mutation.WebhookSecret(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookSecret, field.TypeString, value)
		_node.WebhookSecret = value
	}
	if value, ok := pwc.mutation.CallbackURL(); ok {
		_spec.SetField(paymentwebhook.FieldCallbackURL, field.TypeString, value)
		_node.CallbackURL = value
	}
	if nodes := pwc.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.PaymentOrderTable,
			Columns: []string{paymentwebhook.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_order_payment_webhook = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pwc.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.NetworkTable,
			Columns: []string{paymentwebhook.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.network_payment_webhook = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentWebhookCreateBulk is the builder for creating many PaymentWebhook entities in bulk.
type PaymentWebhookCreateBulk struct {
	config
	err      error
	builders []*PaymentWebhookCreate
}

// Save creates the PaymentWebhook entities in the database.
func (pwcb *PaymentWebhookCreateBulk) Save(ctx context.Context) ([]*PaymentWebhook, error) {
	if pwcb.err != nil {
		return nil, pwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pwcb.builders))
	nodes := make([]*PaymentWebhook, len(pwcb.builders))
	mutators := make([]Mutator, len(pwcb.builders))
	for i := range pwcb.builders {
		func(i int, root context.Context) {
			builder := pwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentWebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pwcb *PaymentWebhookCreateBulk) SaveX(ctx context.Context) []*PaymentWebhook {
	v, err := pwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwcb *PaymentWebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := pwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwcb *PaymentWebhookCreateBulk) ExecX(ctx context.Context) {
	if err := pwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
