// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
	"github.com/paycrest/aggregator/ent/predicate"
)

// KYBFormSubmissionDelete is the builder for deleting a KYBFormSubmission entity.
type KYBFormSubmissionDelete struct {
	config
	hooks    []Hook
	mutation *KYBFormSubmissionMutation
}

// Where appends a list predicates to the KYBFormSubmissionDelete builder.
func (kfsd *KYBFormSubmissionDelete) Where(ps ...predicate.KYBFormSubmission) *KYBFormSubmissionDelete {
	kfsd.mutation.Where(ps...)
	return kfsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kfsd *KYBFormSubmissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kfsd.sqlExec, kfsd.mutation, kfsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kfsd *KYBFormSubmissionDelete) ExecX(ctx context.Context) int {
	n, err := kfsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kfsd *KYBFormSubmissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kybformsubmission.Table, sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID))
	if ps := kfsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kfsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kfsd.mutation.done = true
	return affected, err
}

// KYBFormSubmissionDeleteOne is the builder for deleting a single KYBFormSubmission entity.
type KYBFormSubmissionDeleteOne struct {
	kfsd *KYBFormSubmissionDelete
}

// Where appends a list predicates to the KYBFormSubmissionDelete builder.
func (kfsdo *KYBFormSubmissionDeleteOne) Where(ps ...predicate.KYBFormSubmission) *KYBFormSubmissionDeleteOne {
	kfsdo.kfsd.mutation.Where(ps...)
	return kfsdo
}

// Exec executes the deletion query.
func (kfsdo *KYBFormSubmissionDeleteOne) Exec(ctx context.Context) error {
	n, err := kfsdo.kfsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kybformsubmission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kfsdo *KYBFormSubmissionDeleteOne) ExecX(ctx context.Context) {
	if err := kfsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
