// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/fiatcurrency"
	"github.com/paycrest/protocol/ent/financialinstitution"
)

// FinancialInstitutionCreate is the builder for creating a FinancialInstitution entity.
type FinancialInstitutionCreate struct {
	config
	mutation *FinancialInstitutionMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (fic *FinancialInstitutionCreate) SetCode(s string) *FinancialInstitutionCreate {
	fic.mutation.SetCode(s)
	return fic
}

// SetName sets the "name" field.
func (fic *FinancialInstitutionCreate) SetName(s string) *FinancialInstitutionCreate {
	fic.mutation.SetName(s)
	return fic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fic *FinancialInstitutionCreate) SetNillableName(s *string) *FinancialInstitutionCreate {
	if s != nil {
		fic.SetName(*s)
	}
	return fic
}

// SetType sets the "Type" field.
func (fic *FinancialInstitutionCreate) SetType(s string) *FinancialInstitutionCreate {
	fic.mutation.SetType(s)
	return fic
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (fic *FinancialInstitutionCreate) SetNillableType(s *string) *FinancialInstitutionCreate {
	if s != nil {
		fic.SetType(*s)
	}
	return fic
}

// SetCreatedAt sets the "created_at" field.
func (fic *FinancialInstitutionCreate) SetCreatedAt(t time.Time) *FinancialInstitutionCreate {
	fic.mutation.SetCreatedAt(t)
	return fic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fic *FinancialInstitutionCreate) SetNillableCreatedAt(t *time.Time) *FinancialInstitutionCreate {
	if t != nil {
		fic.SetCreatedAt(*t)
	}
	return fic
}

// SetUpdatedAt sets the "updated_at" field.
func (fic *FinancialInstitutionCreate) SetUpdatedAt(t time.Time) *FinancialInstitutionCreate {
	fic.mutation.SetUpdatedAt(t)
	return fic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fic *FinancialInstitutionCreate) SetNillableUpdatedAt(t *time.Time) *FinancialInstitutionCreate {
	if t != nil {
		fic.SetUpdatedAt(*t)
	}
	return fic
}

// SetFiatID sets the "fiat" edge to the FiatCurrency entity by ID.
func (fic *FinancialInstitutionCreate) SetFiatID(id uuid.UUID) *FinancialInstitutionCreate {
	fic.mutation.SetFiatID(id)
	return fic
}

// SetNillableFiatID sets the "fiat" edge to the FiatCurrency entity by ID if the given value is not nil.
func (fic *FinancialInstitutionCreate) SetNillableFiatID(id *uuid.UUID) *FinancialInstitutionCreate {
	if id != nil {
		fic = fic.SetFiatID(*id)
	}
	return fic
}

// SetFiat sets the "fiat" edge to the FiatCurrency entity.
func (fic *FinancialInstitutionCreate) SetFiat(f *FiatCurrency) *FinancialInstitutionCreate {
	return fic.SetFiatID(f.ID)
}

// Mutation returns the FinancialInstitutionMutation object of the builder.
func (fic *FinancialInstitutionCreate) Mutation() *FinancialInstitutionMutation {
	return fic.mutation
}

// Save creates the FinancialInstitution in the database.
func (fic *FinancialInstitutionCreate) Save(ctx context.Context) (*FinancialInstitution, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FinancialInstitutionCreate) SaveX(ctx context.Context) *FinancialInstitution {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FinancialInstitutionCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FinancialInstitutionCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FinancialInstitutionCreate) defaults() {
	if _, ok := fic.mutation.CreatedAt(); !ok {
		v := financialinstitution.DefaultCreatedAt()
		fic.mutation.SetCreatedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := financialinstitution.DefaultUpdatedAt()
		fic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FinancialInstitutionCreate) check() error {
	if _, ok := fic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "FinancialInstitution.code"`)}
	}
	if _, ok := fic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinancialInstitution.created_at"`)}
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinancialInstitution.updated_at"`)}
	}
	return nil
}

func (fic *FinancialInstitutionCreate) sqlSave(ctx context.Context) (*FinancialInstitution, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FinancialInstitutionCreate) createSpec() (*FinancialInstitution, *sqlgraph.CreateSpec) {
	var (
		_node = &FinancialInstitution{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(financialinstitution.Table, sqlgraph.NewFieldSpec(financialinstitution.FieldID, field.TypeInt))
	)
	if value, ok := fic.mutation.Code(); ok {
		_spec.SetField(financialinstitution.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := fic.mutation.Name(); ok {
		_spec.SetField(financialinstitution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fic.mutation.GetType(); ok {
		_spec.SetField(financialinstitution.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fic.mutation.CreatedAt(); ok {
		_spec.SetField(financialinstitution.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.SetField(financialinstitution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fic.mutation.FiatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialinstitution.FiatTable,
			Columns: []string{financialinstitution.FiatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fiat_currency_financial_institutions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FinancialInstitutionCreateBulk is the builder for creating many FinancialInstitution entities in bulk.
type FinancialInstitutionCreateBulk struct {
	config
	builders []*FinancialInstitutionCreate
}

// Save creates the FinancialInstitution entities in the database.
func (ficb *FinancialInstitutionCreateBulk) Save(ctx context.Context) ([]*FinancialInstitution, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FinancialInstitution, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinancialInstitutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FinancialInstitutionCreateBulk) SaveX(ctx context.Context) []*FinancialInstitution {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FinancialInstitutionCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FinancialInstitutionCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
