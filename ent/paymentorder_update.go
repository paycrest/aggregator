// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/receiveaddress"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/paycrest/aggregator/ent/transactionlog"
	"github.com/shopspring/decimal"
)

// PaymentOrderUpdate is the builder for updating PaymentOrder entities.
type PaymentOrderUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentOrderMutation
}

// Where appends a list predicates to the PaymentOrderUpdate builder.
func (pou *PaymentOrderUpdate) Where(ps ...predicate.PaymentOrder) *PaymentOrderUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetUpdatedAt sets the "updated_at" field.
func (pou *PaymentOrderUpdate) SetUpdatedAt(t time.Time) *PaymentOrderUpdate {
	pou.mutation.SetUpdatedAt(t)
	return pou
}

// SetAmount sets the "amount" field.
func (pou *PaymentOrderUpdate) SetAmount(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetAmount()
	pou.mutation.SetAmount(d)
	return pou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableAmount(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetAmount(*d)
	}
	return pou
}

// AddAmount adds d to the "amount" field.
func (pou *PaymentOrderUpdate) AddAmount(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddAmount(d)
	return pou
}

// SetAmountPaid sets the "amount_paid" field.
func (pou *PaymentOrderUpdate) SetAmountPaid(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetAmountPaid()
	pou.mutation.SetAmountPaid(d)
	return pou
}

// SetNillableAmountPaid sets the "amount_paid" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableAmountPaid(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetAmountPaid(*d)
	}
	return pou
}

// AddAmountPaid adds d to the "amount_paid" field.
func (pou *PaymentOrderUpdate) AddAmountPaid(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddAmountPaid(d)
	return pou
}

// SetAmountReturned sets the "amount_returned" field.
func (pou *PaymentOrderUpdate) SetAmountReturned(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetAmountReturned()
	pou.mutation.SetAmountReturned(d)
	return pou
}

// SetNillableAmountReturned sets the "amount_returned" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableAmountReturned(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetAmountReturned(*d)
	}
	return pou
}

// AddAmountReturned adds d to the "amount_returned" field.
func (pou *PaymentOrderUpdate) AddAmountReturned(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddAmountReturned(d)
	return pou
}

// SetPercentSettled sets the "percent_settled" field.
func (pou *PaymentOrderUpdate) SetPercentSettled(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetPercentSettled()
	pou.mutation.SetPercentSettled(d)
	return pou
}

// SetNillablePercentSettled sets the "percent_settled" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillablePercentSettled(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetPercentSettled(*d)
	}
	return pou
}

// AddPercentSettled adds d to the "percent_settled" field.
func (pou *PaymentOrderUpdate) AddPercentSettled(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddPercentSettled(d)
	return pou
}

// SetSenderFee sets the "sender_fee" field.
func (pou *PaymentOrderUpdate) SetSenderFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetSenderFee()
	pou.mutation.SetSenderFee(d)
	return pou
}

// SetNillableSenderFee sets the "sender_fee" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableSenderFee(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetSenderFee(*d)
	}
	return pou
}

// AddSenderFee adds d to the "sender_fee" field.
func (pou *PaymentOrderUpdate) AddSenderFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddSenderFee(d)
	return pou
}

// SetNetworkFee sets the "network_fee" field.
func (pou *PaymentOrderUpdate) SetNetworkFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetNetworkFee()
	pou.mutation.SetNetworkFee(d)
	return pou
}

// SetNillableNetworkFee sets the "network_fee" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableNetworkFee(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetNetworkFee(*d)
	}
	return pou
}

// AddNetworkFee adds d to the "network_fee" field.
func (pou *PaymentOrderUpdate) AddNetworkFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddNetworkFee(d)
	return pou
}

// SetProtocolFee sets the "protocol_fee" field.
func (pou *PaymentOrderUpdate) SetProtocolFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetProtocolFee()
	pou.mutation.SetProtocolFee(d)
	return pou
}

// SetNillableProtocolFee sets the "protocol_fee" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableProtocolFee(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetProtocolFee(*d)
	}
	return pou
}

// AddProtocolFee adds d to the "protocol_fee" field.
func (pou *PaymentOrderUpdate) AddProtocolFee(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddProtocolFee(d)
	return pou
}

// SetRate sets the "rate" field.
func (pou *PaymentOrderUpdate) SetRate(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetRate()
	pou.mutation.SetRate(d)
	return pou
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableRate(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetRate(*d)
	}
	return pou
}

// AddRate adds d to the "rate" field.
func (pou *PaymentOrderUpdate) AddRate(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddRate(d)
	return pou
}

// SetTxHash sets the "tx_hash" field.
func (pou *PaymentOrderUpdate) SetTxHash(s string) *PaymentOrderUpdate {
	pou.mutation.SetTxHash(s)
	return pou
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableTxHash(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetTxHash(*s)
	}
	return pou
}

// ClearTxHash clears the value of the "tx_hash" field.
func (pou *PaymentOrderUpdate) ClearTxHash() *PaymentOrderUpdate {
	pou.mutation.ClearTxHash()
	return pou
}

// SetBlockNumber sets the "block_number" field.
func (pou *PaymentOrderUpdate) SetBlockNumber(i int64) *PaymentOrderUpdate {
	pou.mutation.ResetBlockNumber()
	pou.mutation.SetBlockNumber(i)
	return pou
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableBlockNumber(i *int64) *PaymentOrderUpdate {
	if i != nil {
		pou.SetBlockNumber(*i)
	}
	return pou
}

// AddBlockNumber adds i to the "block_number" field.
func (pou *PaymentOrderUpdate) AddBlockNumber(i int64) *PaymentOrderUpdate {
	pou.mutation.AddBlockNumber(i)
	return pou
}

// SetFromAddress sets the "from_address" field.
func (pou *PaymentOrderUpdate) SetFromAddress(s string) *PaymentOrderUpdate {
	pou.mutation.SetFromAddress(s)
	return pou
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableFromAddress(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetFromAddress(*s)
	}
	return pou
}

// ClearFromAddress clears the value of the "from_address" field.
func (pou *PaymentOrderUpdate) ClearFromAddress() *PaymentOrderUpdate {
	pou.mutation.ClearFromAddress()
	return pou
}

// SetReturnAddress sets the "return_address" field.
func (pou *PaymentOrderUpdate) SetReturnAddress(s string) *PaymentOrderUpdate {
	pou.mutation.SetReturnAddress(s)
	return pou
}

// SetNillableReturnAddress sets the "return_address" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableReturnAddress(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetReturnAddress(*s)
	}
	return pou
}

// ClearReturnAddress clears the value of the "return_address" field.
func (pou *PaymentOrderUpdate) ClearReturnAddress() *PaymentOrderUpdate {
	pou.mutation.ClearReturnAddress()
	return pou
}

// SetReceiveAddressText sets the "receive_address_text" field.
func (pou *PaymentOrderUpdate) SetReceiveAddressText(s string) *PaymentOrderUpdate {
	pou.mutation.SetReceiveAddressText(s)
	return pou
}

// SetNillableReceiveAddressText sets the "receive_address_text" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableReceiveAddressText(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetReceiveAddressText(*s)
	}
	return pou
}

// SetFeePercent sets the "fee_percent" field.
func (pou *PaymentOrderUpdate) SetFeePercent(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.ResetFeePercent()
	pou.mutation.SetFeePercent(d)
	return pou
}

// SetNillableFeePercent sets the "fee_percent" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableFeePercent(d *decimal.Decimal) *PaymentOrderUpdate {
	if d != nil {
		pou.SetFeePercent(*d)
	}
	return pou
}

// AddFeePercent adds d to the "fee_percent" field.
func (pou *PaymentOrderUpdate) AddFeePercent(d decimal.Decimal) *PaymentOrderUpdate {
	pou.mutation.AddFeePercent(d)
	return pou
}

// SetFeeAddress sets the "fee_address" field.
func (pou *PaymentOrderUpdate) SetFeeAddress(s string) *PaymentOrderUpdate {
	pou.mutation.SetFeeAddress(s)
	return pou
}

// SetNillableFeeAddress sets the "fee_address" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableFeeAddress(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetFeeAddress(*s)
	}
	return pou
}

// ClearFeeAddress clears the value of the "fee_address" field.
func (pou *PaymentOrderUpdate) ClearFeeAddress() *PaymentOrderUpdate {
	pou.mutation.ClearFeeAddress()
	return pou
}

// SetGatewayID sets the "gateway_id" field.
func (pou *PaymentOrderUpdate) SetGatewayID(s string) *PaymentOrderUpdate {
	pou.mutation.SetGatewayID(s)
	return pou
}

// SetNillableGatewayID sets the "gateway_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableGatewayID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetGatewayID(*s)
	}
	return pou
}

// ClearGatewayID clears the value of the "gateway_id" field.
func (pou *PaymentOrderUpdate) ClearGatewayID() *PaymentOrderUpdate {
	pou.mutation.ClearGatewayID()
	return pou
}

// SetReference sets the "reference" field.
func (pou *PaymentOrderUpdate) SetReference(s string) *PaymentOrderUpdate {
	pou.mutation.SetReference(s)
	return pou
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableReference(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetReference(*s)
	}
	return pou
}

// ClearReference clears the value of the "reference" field.
func (pou *PaymentOrderUpdate) ClearReference() *PaymentOrderUpdate {
	pou.mutation.ClearReference()
	return pou
}

// SetStatus sets the "status" field.
func (pou *PaymentOrderUpdate) SetStatus(pa paymentorder.Status) *PaymentOrderUpdate {
	pou.mutation.SetStatus(pa)
	return pou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableStatus(pa *paymentorder.Status) *PaymentOrderUpdate {
	if pa != nil {
		pou.SetStatus(*pa)
	}
	return pou
}

// SetSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by ID.
func (pou *PaymentOrderUpdate) SetSenderProfileID(id uuid.UUID) *PaymentOrderUpdate {
	pou.mutation.SetSenderProfileID(id)
	return pou
}

// SetNillableSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by ID if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableSenderProfileID(id *uuid.UUID) *PaymentOrderUpdate {
	if id != nil {
		pou = pou.SetSenderProfileID(*id)
	}
	return pou
}

// SetSenderProfile sets the "sender_profile" edge to the SenderProfile entity.
func (pou *PaymentOrderUpdate) SetSenderProfile(s *SenderProfile) *PaymentOrderUpdate {
	return pou.SetSenderProfileID(s.ID)
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (pou *PaymentOrderUpdate) SetTokenID(id int) *PaymentOrderUpdate {
	pou.mutation.SetTokenID(id)
	return pou
}

// SetToken sets the "token" edge to the Token entity.
func (pou *PaymentOrderUpdate) SetToken(t *Token) *PaymentOrderUpdate {
	return pou.SetTokenID(t.ID)
}

// SetLinkedAddressID sets the "linked_address" edge to the LinkedAddress entity by ID.
func (pou *PaymentOrderUpdate) SetLinkedAddressID(id int) *PaymentOrderUpdate {
	pou.mutation.SetLinkedAddressID(id)
	return pou
}

// SetNillableLinkedAddressID sets the "linked_address" edge to the LinkedAddress entity by ID if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableLinkedAddressID(id *int) *PaymentOrderUpdate {
	if id != nil {
		pou = pou.SetLinkedAddressID(*id)
	}
	return pou
}

// SetLinkedAddress sets the "linked_address" edge to the LinkedAddress entity.
func (pou *PaymentOrderUpdate) SetLinkedAddress(l *LinkedAddress) *PaymentOrderUpdate {
	return pou.SetLinkedAddressID(l.ID)
}

// SetReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by ID.
func (pou *PaymentOrderUpdate) SetReceiveAddressID(id int) *PaymentOrderUpdate {
	pou.mutation.SetReceiveAddressID(id)
	return pou
}

// SetNillableReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by ID if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableReceiveAddressID(id *int) *PaymentOrderUpdate {
	if id != nil {
		pou = pou.SetReceiveAddressID(*id)
	}
	return pou
}

// SetReceiveAddress sets the "receive_address" edge to the ReceiveAddress entity.
func (pou *PaymentOrderUpdate) SetReceiveAddress(r *ReceiveAddress) *PaymentOrderUpdate {
	return pou.SetReceiveAddressID(r.ID)
}

// SetRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by ID.
func (pou *PaymentOrderUpdate) SetRecipientID(id int) *PaymentOrderUpdate {
	pou.mutation.SetRecipientID(id)
	return pou
}

// SetNillableRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by ID if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableRecipientID(id *int) *PaymentOrderUpdate {
	if id != nil {
		pou = pou.SetRecipientID(*id)
	}
	return pou
}

// SetRecipient sets the "recipient" edge to the PaymentOrderRecipient entity.
func (pou *PaymentOrderUpdate) SetRecipient(p *PaymentOrderRecipient) *PaymentOrderUpdate {
	return pou.SetRecipientID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the TransactionLog entity by IDs.
func (pou *PaymentOrderUpdate) AddTransactionIDs(ids ...uuid.UUID) *PaymentOrderUpdate {
	pou.mutation.AddTransactionIDs(ids...)
	return pou
}

// AddTransactions adds the "transactions" edges to the TransactionLog entity.
func (pou *PaymentOrderUpdate) AddTransactions(t ...*TransactionLog) *PaymentOrderUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pou.AddTransactionIDs(ids...)
}

// Mutation returns the PaymentOrderMutation object of the builder.
func (pou *PaymentOrderUpdate) Mutation() *PaymentOrderMutation {
	return pou.mutation
}

// ClearSenderProfile clears the "sender_profile" edge to the SenderProfile entity.
func (pou *PaymentOrderUpdate) ClearSenderProfile() *PaymentOrderUpdate {
	pou.mutation.ClearSenderProfile()
	return pou
}

// ClearToken clears the "token" edge to the Token entity.
func (pou *PaymentOrderUpdate) ClearToken() *PaymentOrderUpdate {
	pou.mutation.ClearToken()
	return pou
}

// ClearLinkedAddress clears the "linked_address" edge to the LinkedAddress entity.
func (pou *PaymentOrderUpdate) ClearLinkedAddress() *PaymentOrderUpdate {
	pou.mutation.ClearLinkedAddress()
	return pou
}

// ClearReceiveAddress clears the "receive_address" edge to the ReceiveAddress entity.
func (pou *PaymentOrderUpdate) ClearReceiveAddress() *PaymentOrderUpdate {
	pou.mutation.ClearReceiveAddress()
	return pou
}

// ClearRecipient clears the "recipient" edge to the PaymentOrderRecipient entity.
func (pou *PaymentOrderUpdate) ClearRecipient() *PaymentOrderUpdate {
	pou.mutation.ClearRecipient()
	return pou
}

// ClearTransactions clears all "transactions" edges to the TransactionLog entity.
func (pou *PaymentOrderUpdate) ClearTransactions() *PaymentOrderUpdate {
	pou.mutation.ClearTransactions()
	return pou
}

// RemoveTransactionIDs removes the "transactions" edge to TransactionLog entities by IDs.
func (pou *PaymentOrderUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *PaymentOrderUpdate {
	pou.mutation.RemoveTransactionIDs(ids...)
	return pou
}

// RemoveTransactions removes "transactions" edges to TransactionLog entities.
func (pou *PaymentOrderUpdate) RemoveTransactions(t ...*TransactionLog) *PaymentOrderUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pou.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PaymentOrderUpdate) Save(ctx context.Context) (int, error) {
	pou.defaults()
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PaymentOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PaymentOrderUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PaymentOrderUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pou *PaymentOrderUpdate) defaults() {
	if _, ok := pou.mutation.UpdatedAt(); !ok {
		v := paymentorder.UpdateDefaultUpdatedAt()
		pou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pou *PaymentOrderUpdate) check() error {
	if v, ok := pou.mutation.TxHash(); ok {
		if err := paymentorder.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.tx_hash": %w`, err)}
		}
	}
	if v, ok := pou.mutation.FromAddress(); ok {
		if err := paymentorder.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.from_address": %w`, err)}
		}
	}
	if v, ok := pou.mutation.ReturnAddress(); ok {
		if err := paymentorder.ReturnAddressValidator(v); err != nil {
			return &ValidationError{Name: "return_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.return_address": %w`, err)}
		}
	}
	if v, ok := pou.mutation.ReceiveAddressText(); ok {
		if err := paymentorder.ReceiveAddressTextValidator(v); err != nil {
			return &ValidationError{Name: "receive_address_text", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.receive_address_text": %w`, err)}
		}
	}
	if v, ok := pou.mutation.FeeAddress(); ok {
		if err := paymentorder.FeeAddressValidator(v); err != nil {
			return &ValidationError{Name: "fee_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.fee_address": %w`, err)}
		}
	}
	if v, ok := pou.mutation.GatewayID(); ok {
		if err := paymentorder.GatewayIDValidator(v); err != nil {
			return &ValidationError{Name: "gateway_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.gateway_id": %w`, err)}
		}
	}
	if v, ok := pou.mutation.Reference(); ok {
		if err := paymentorder.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.reference": %w`, err)}
		}
	}
	if v, ok := pou.mutation.Status(); ok {
		if err := paymentorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.status": %w`, err)}
		}
	}
	if pou.mutation.TokenCleared() && len(pou.mutation.TokenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentOrder.token"`)
	}
	return nil
}

func (pou *PaymentOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorder.Table, paymentorder.Columns, sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pou.mutation.Amount(); ok {
		_spec.SetField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedAmount(); ok {
		_spec.AddField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AmountPaid(); ok {
		_spec.SetField(paymentorder.FieldAmountPaid, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedAmountPaid(); ok {
		_spec.AddField(paymentorder.FieldAmountPaid, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AmountReturned(); ok {
		_spec.SetField(paymentorder.FieldAmountReturned, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedAmountReturned(); ok {
		_spec.AddField(paymentorder.FieldAmountReturned, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.PercentSettled(); ok {
		_spec.SetField(paymentorder.FieldPercentSettled, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedPercentSettled(); ok {
		_spec.AddField(paymentorder.FieldPercentSettled, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.SenderFee(); ok {
		_spec.SetField(paymentorder.FieldSenderFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedSenderFee(); ok {
		_spec.AddField(paymentorder.FieldSenderFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.NetworkFee(); ok {
		_spec.SetField(paymentorder.FieldNetworkFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedNetworkFee(); ok {
		_spec.AddField(paymentorder.FieldNetworkFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.ProtocolFee(); ok {
		_spec.SetField(paymentorder.FieldProtocolFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedProtocolFee(); ok {
		_spec.AddField(paymentorder.FieldProtocolFee, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.Rate(); ok {
		_spec.SetField(paymentorder.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedRate(); ok {
		_spec.AddField(paymentorder.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.TxHash(); ok {
		_spec.SetField(paymentorder.FieldTxHash, field.TypeString, value)
	}
	if pou.mutation.TxHashCleared() {
		_spec.ClearField(paymentorder.FieldTxHash, field.TypeString)
	}
	if value, ok := pou.mutation.BlockNumber(); ok {
		_spec.SetField(paymentorder.FieldBlockNumber, field.TypeInt64, value)
	}
	if value, ok := pou.mutation.AddedBlockNumber(); ok {
		_spec.AddField(paymentorder.FieldBlockNumber, field.TypeInt64, value)
	}
	if value, ok := pou.mutation.FromAddress(); ok {
		_spec.SetField(paymentorder.FieldFromAddress, field.TypeString, value)
	}
	if pou.mutation.FromAddressCleared() {
		_spec.ClearField(paymentorder.FieldFromAddress, field.TypeString)
	}
	if value, ok := pou.mutation.ReturnAddress(); ok {
		_spec.SetField(paymentorder.FieldReturnAddress, field.TypeString, value)
	}
	if pou.mutation.ReturnAddressCleared() {
		_spec.ClearField(paymentorder.FieldReturnAddress, field.TypeString)
	}
	if value, ok := pou.mutation.ReceiveAddressText(); ok {
		_spec.SetField(paymentorder.FieldReceiveAddressText, field.TypeString, value)
	}
	if value, ok := pou.mutation.FeePercent(); ok {
		_spec.SetField(paymentorder.FieldFeePercent, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedFeePercent(); ok {
		_spec.AddField(paymentorder.FieldFeePercent, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.FeeAddress(); ok {
		_spec.SetField(paymentorder.FieldFeeAddress, field.TypeString, value)
	}
	if pou.mutation.FeeAddressCleared() {
		_spec.ClearField(paymentorder.FieldFeeAddress, field.TypeString)
	}
	if value, ok := pou.mutation.GatewayID(); ok {
		_spec.SetField(paymentorder.FieldGatewayID, field.TypeString, value)
	}
	if pou.mutation.GatewayIDCleared() {
		_spec.ClearField(paymentorder.FieldGatewayID, field.TypeString)
	}
	if value, ok := pou.mutation.Reference(); ok {
		_spec.SetField(paymentorder.FieldReference, field.TypeString, value)
	}
	if pou.mutation.ReferenceCleared() {
		_spec.ClearField(paymentorder.FieldReference, field.TypeString)
	}
	if value, ok := pou.mutation.Status(); ok {
		_spec.SetField(paymentorder.FieldStatus, field.TypeEnum, value)
	}
	if pou.mutation.SenderProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.SenderProfileTable,
			Columns: []string{paymentorder.SenderProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.SenderProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.SenderProfileTable,
			Columns: []string{paymentorder.SenderProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.TokenTable,
			Columns: []string{paymentorder.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.TokenTable,
			Columns: []string{paymentorder.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.LinkedAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.LinkedAddressTable,
			Columns: []string{paymentorder.LinkedAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.LinkedAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.LinkedAddressTable,
			Columns: []string{paymentorder.LinkedAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.ReceiveAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.ReceiveAddressTable,
			Columns: []string{paymentorder.ReceiveAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiveaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.ReceiveAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.ReceiveAddressTable,
			Columns: []string{paymentorder.ReceiveAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiveaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.RecipientTable,
			Columns: []string{paymentorder.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.RecipientTable,
			Columns: []string{paymentorder.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pou.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PaymentOrderUpdateOne is the builder for updating a single PaymentOrder entity.
type PaymentOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentOrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pouo *PaymentOrderUpdateOne) SetUpdatedAt(t time.Time) *PaymentOrderUpdateOne {
	pouo.mutation.SetUpdatedAt(t)
	return pouo
}

// SetAmount sets the "amount" field.
func (pouo *PaymentOrderUpdateOne) SetAmount(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetAmount()
	pouo.mutation.SetAmount(d)
	return pouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableAmount(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetAmount(*d)
	}
	return pouo
}

// AddAmount adds d to the "amount" field.
func (pouo *PaymentOrderUpdateOne) AddAmount(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddAmount(d)
	return pouo
}

// SetAmountPaid sets the "amount_paid" field.
func (pouo *PaymentOrderUpdateOne) SetAmountPaid(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetAmountPaid()
	pouo.mutation.SetAmountPaid(d)
	return pouo
}

// SetNillableAmountPaid sets the "amount_paid" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableAmountPaid(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetAmountPaid(*d)
	}
	return pouo
}

// AddAmountPaid adds d to the "amount_paid" field.
func (pouo *PaymentOrderUpdateOne) AddAmountPaid(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddAmountPaid(d)
	return pouo
}

// SetAmountReturned sets the "amount_returned" field.
func (pouo *PaymentOrderUpdateOne) SetAmountReturned(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetAmountReturned()
	pouo.mutation.SetAmountReturned(d)
	return pouo
}

// SetNillableAmountReturned sets the "amount_returned" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableAmountReturned(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetAmountReturned(*d)
	}
	return pouo
}

// AddAmountReturned adds d to the "amount_returned" field.
func (pouo *PaymentOrderUpdateOne) AddAmountReturned(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddAmountReturned(d)
	return pouo
}

// SetPercentSettled sets the "percent_settled" field.
func (pouo *PaymentOrderUpdateOne) SetPercentSettled(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetPercentSettled()
	pouo.mutation.SetPercentSettled(d)
	return pouo
}

// SetNillablePercentSettled sets the "percent_settled" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillablePercentSettled(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetPercentSettled(*d)
	}
	return pouo
}

// AddPercentSettled adds d to the "percent_settled" field.
func (pouo *PaymentOrderUpdateOne) AddPercentSettled(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddPercentSettled(d)
	return pouo
}

// SetSenderFee sets the "sender_fee" field.
func (pouo *PaymentOrderUpdateOne) SetSenderFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetSenderFee()
	pouo.mutation.SetSenderFee(d)
	return pouo
}

// SetNillableSenderFee sets the "sender_fee" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableSenderFee(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetSenderFee(*d)
	}
	return pouo
}

// AddSenderFee adds d to the "sender_fee" field.
func (pouo *PaymentOrderUpdateOne) AddSenderFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddSenderFee(d)
	return pouo
}

// SetNetworkFee sets the "network_fee" field.
func (pouo *PaymentOrderUpdateOne) SetNetworkFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetNetworkFee()
	pouo.mutation.SetNetworkFee(d)
	return pouo
}

// SetNillableNetworkFee sets the "network_fee" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableNetworkFee(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetNetworkFee(*d)
	}
	return pouo
}

// AddNetworkFee adds d to the "network_fee" field.
func (pouo *PaymentOrderUpdateOne) AddNetworkFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddNetworkFee(d)
	return pouo
}

// SetProtocolFee sets the "protocol_fee" field.
func (pouo *PaymentOrderUpdateOne) SetProtocolFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetProtocolFee()
	pouo.mutation.SetProtocolFee(d)
	return pouo
}

// SetNillableProtocolFee sets the "protocol_fee" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableProtocolFee(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetProtocolFee(*d)
	}
	return pouo
}

// AddProtocolFee adds d to the "protocol_fee" field.
func (pouo *PaymentOrderUpdateOne) AddProtocolFee(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddProtocolFee(d)
	return pouo
}

// SetRate sets the "rate" field.
func (pouo *PaymentOrderUpdateOne) SetRate(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetRate()
	pouo.mutation.SetRate(d)
	return pouo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableRate(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetRate(*d)
	}
	return pouo
}

// AddRate adds d to the "rate" field.
func (pouo *PaymentOrderUpdateOne) AddRate(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddRate(d)
	return pouo
}

// SetTxHash sets the "tx_hash" field.
func (pouo *PaymentOrderUpdateOne) SetTxHash(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetTxHash(s)
	return pouo
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableTxHash(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetTxHash(*s)
	}
	return pouo
}

// ClearTxHash clears the value of the "tx_hash" field.
func (pouo *PaymentOrderUpdateOne) ClearTxHash() *PaymentOrderUpdateOne {
	pouo.mutation.ClearTxHash()
	return pouo
}

// SetBlockNumber sets the "block_number" field.
func (pouo *PaymentOrderUpdateOne) SetBlockNumber(i int64) *PaymentOrderUpdateOne {
	pouo.mutation.ResetBlockNumber()
	pouo.mutation.SetBlockNumber(i)
	return pouo
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableBlockNumber(i *int64) *PaymentOrderUpdateOne {
	if i != nil {
		pouo.SetBlockNumber(*i)
	}
	return pouo
}

// AddBlockNumber adds i to the "block_number" field.
func (pouo *PaymentOrderUpdateOne) AddBlockNumber(i int64) *PaymentOrderUpdateOne {
	pouo.mutation.AddBlockNumber(i)
	return pouo
}

// SetFromAddress sets the "from_address" field.
func (pouo *PaymentOrderUpdateOne) SetFromAddress(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetFromAddress(s)
	return pouo
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableFromAddress(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetFromAddress(*s)
	}
	return pouo
}

// ClearFromAddress clears the value of the "from_address" field.
func (pouo *PaymentOrderUpdateOne) ClearFromAddress() *PaymentOrderUpdateOne {
	pouo.mutation.ClearFromAddress()
	return pouo
}

// SetReturnAddress sets the "return_address" field.
func (pouo *PaymentOrderUpdateOne) SetReturnAddress(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetReturnAddress(s)
	return pouo
}

// SetNillableReturnAddress sets the "return_address" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableReturnAddress(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetReturnAddress(*s)
	}
	return pouo
}

// ClearReturnAddress clears the value of the "return_address" field.
func (pouo *PaymentOrderUpdateOne) ClearReturnAddress() *PaymentOrderUpdateOne {
	pouo.mutation.ClearReturnAddress()
	return pouo
}

// SetReceiveAddressText sets the "receive_address_text" field.
func (pouo *PaymentOrderUpdateOne) SetReceiveAddressText(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetReceiveAddressText(s)
	return pouo
}

// SetNillableReceiveAddressText sets the "receive_address_text" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableReceiveAddressText(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetReceiveAddressText(*s)
	}
	return pouo
}

// SetFeePercent sets the "fee_percent" field.
func (pouo *PaymentOrderUpdateOne) SetFeePercent(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.ResetFeePercent()
	pouo.mutation.SetFeePercent(d)
	return pouo
}

// SetNillableFeePercent sets the "fee_percent" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableFeePercent(d *decimal.Decimal) *PaymentOrderUpdateOne {
	if d != nil {
		pouo.SetFeePercent(*d)
	}
	return pouo
}

// AddFeePercent adds d to the "fee_percent" field.
func (pouo *PaymentOrderUpdateOne) AddFeePercent(d decimal.Decimal) *PaymentOrderUpdateOne {
	pouo.mutation.AddFeePercent(d)
	return pouo
}

// SetFeeAddress sets the "fee_address" field.
func (pouo *PaymentOrderUpdateOne) SetFeeAddress(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetFeeAddress(s)
	return pouo
}

// SetNillableFeeAddress sets the "fee_address" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableFeeAddress(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetFeeAddress(*s)
	}
	return pouo
}

// ClearFeeAddress clears the value of the "fee_address" field.
func (pouo *PaymentOrderUpdateOne) ClearFeeAddress() *PaymentOrderUpdateOne {
	pouo.mutation.ClearFeeAddress()
	return pouo
}

// SetGatewayID sets the "gateway_id" field.
func (pouo *PaymentOrderUpdateOne) SetGatewayID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetGatewayID(s)
	return pouo
}

// SetNillableGatewayID sets the "gateway_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableGatewayID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetGatewayID(*s)
	}
	return pouo
}

// ClearGatewayID clears the value of the "gateway_id" field.
func (pouo *PaymentOrderUpdateOne) ClearGatewayID() *PaymentOrderUpdateOne {
	pouo.mutation.ClearGatewayID()
	return pouo
}

// SetReference sets the "reference" field.
func (pouo *PaymentOrderUpdateOne) SetReference(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetReference(s)
	return pouo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableReference(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetReference(*s)
	}
	return pouo
}

// ClearReference clears the value of the "reference" field.
func (pouo *PaymentOrderUpdateOne) ClearReference() *PaymentOrderUpdateOne {
	pouo.mutation.ClearReference()
	return pouo
}

// SetStatus sets the "status" field.
func (pouo *PaymentOrderUpdateOne) SetStatus(pa paymentorder.Status) *PaymentOrderUpdateOne {
	pouo.mutation.SetStatus(pa)
	return pouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableStatus(pa *paymentorder.Status) *PaymentOrderUpdateOne {
	if pa != nil {
		pouo.SetStatus(*pa)
	}
	return pouo
}

// SetSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by ID.
func (pouo *PaymentOrderUpdateOne) SetSenderProfileID(id uuid.UUID) *PaymentOrderUpdateOne {
	pouo.mutation.SetSenderProfileID(id)
	return pouo
}

// SetNillableSenderProfileID sets the "sender_profile" edge to the SenderProfile entity by ID if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableSenderProfileID(id *uuid.UUID) *PaymentOrderUpdateOne {
	if id != nil {
		pouo = pouo.SetSenderProfileID(*id)
	}
	return pouo
}

// SetSenderProfile sets the "sender_profile" edge to the SenderProfile entity.
func (pouo *PaymentOrderUpdateOne) SetSenderProfile(s *SenderProfile) *PaymentOrderUpdateOne {
	return pouo.SetSenderProfileID(s.ID)
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (pouo *PaymentOrderUpdateOne) SetTokenID(id int) *PaymentOrderUpdateOne {
	pouo.mutation.SetTokenID(id)
	return pouo
}

// SetToken sets the "token" edge to the Token entity.
func (pouo *PaymentOrderUpdateOne) SetToken(t *Token) *PaymentOrderUpdateOne {
	return pouo.SetTokenID(t.ID)
}

// SetLinkedAddressID sets the "linked_address" edge to the LinkedAddress entity by ID.
func (pouo *PaymentOrderUpdateOne) SetLinkedAddressID(id int) *PaymentOrderUpdateOne {
	pouo.mutation.SetLinkedAddressID(id)
	return pouo
}

// SetNillableLinkedAddressID sets the "linked_address" edge to the LinkedAddress entity by ID if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableLinkedAddressID(id *int) *PaymentOrderUpdateOne {
	if id != nil {
		pouo = pouo.SetLinkedAddressID(*id)
	}
	return pouo
}

// SetLinkedAddress sets the "linked_address" edge to the LinkedAddress entity.
func (pouo *PaymentOrderUpdateOne) SetLinkedAddress(l *LinkedAddress) *PaymentOrderUpdateOne {
	return pouo.SetLinkedAddressID(l.ID)
}

// SetReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by ID.
func (pouo *PaymentOrderUpdateOne) SetReceiveAddressID(id int) *PaymentOrderUpdateOne {
	pouo.mutation.SetReceiveAddressID(id)
	return pouo
}

// SetNillableReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by ID if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableReceiveAddressID(id *int) *PaymentOrderUpdateOne {
	if id != nil {
		pouo = pouo.SetReceiveAddressID(*id)
	}
	return pouo
}

// SetReceiveAddress sets the "receive_address" edge to the ReceiveAddress entity.
func (pouo *PaymentOrderUpdateOne) SetReceiveAddress(r *ReceiveAddress) *PaymentOrderUpdateOne {
	return pouo.SetReceiveAddressID(r.ID)
}

// SetRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by ID.
func (pouo *PaymentOrderUpdateOne) SetRecipientID(id int) *PaymentOrderUpdateOne {
	pouo.mutation.SetRecipientID(id)
	return pouo
}

// SetNillableRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by ID if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableRecipientID(id *int) *PaymentOrderUpdateOne {
	if id != nil {
		pouo = pouo.SetRecipientID(*id)
	}
	return pouo
}

// SetRecipient sets the "recipient" edge to the PaymentOrderRecipient entity.
func (pouo *PaymentOrderUpdateOne) SetRecipient(p *PaymentOrderRecipient) *PaymentOrderUpdateOne {
	return pouo.SetRecipientID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the TransactionLog entity by IDs.
func (pouo *PaymentOrderUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *PaymentOrderUpdateOne {
	pouo.mutation.AddTransactionIDs(ids...)
	return pouo
}

// AddTransactions adds the "transactions" edges to the TransactionLog entity.
func (pouo *PaymentOrderUpdateOne) AddTransactions(t ...*TransactionLog) *PaymentOrderUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pouo.AddTransactionIDs(ids...)
}

// Mutation returns the PaymentOrderMutation object of the builder.
func (pouo *PaymentOrderUpdateOne) Mutation() *PaymentOrderMutation {
	return pouo.mutation
}

// ClearSenderProfile clears the "sender_profile" edge to the SenderProfile entity.
func (pouo *PaymentOrderUpdateOne) ClearSenderProfile() *PaymentOrderUpdateOne {
	pouo.mutation.ClearSenderProfile()
	return pouo
}

// ClearToken clears the "token" edge to the Token entity.
func (pouo *PaymentOrderUpdateOne) ClearToken() *PaymentOrderUpdateOne {
	pouo.mutation.ClearToken()
	return pouo
}

// ClearLinkedAddress clears the "linked_address" edge to the LinkedAddress entity.
func (pouo *PaymentOrderUpdateOne) ClearLinkedAddress() *PaymentOrderUpdateOne {
	pouo.mutation.ClearLinkedAddress()
	return pouo
}

// ClearReceiveAddress clears the "receive_address" edge to the ReceiveAddress entity.
func (pouo *PaymentOrderUpdateOne) ClearReceiveAddress() *PaymentOrderUpdateOne {
	pouo.mutation.ClearReceiveAddress()
	return pouo
}

// ClearRecipient clears the "recipient" edge to the PaymentOrderRecipient entity.
func (pouo *PaymentOrderUpdateOne) ClearRecipient() *PaymentOrderUpdateOne {
	pouo.mutation.ClearRecipient()
	return pouo
}

// ClearTransactions clears all "transactions" edges to the TransactionLog entity.
func (pouo *PaymentOrderUpdateOne) ClearTransactions() *PaymentOrderUpdateOne {
	pouo.mutation.ClearTransactions()
	return pouo
}

// RemoveTransactionIDs removes the "transactions" edge to TransactionLog entities by IDs.
func (pouo *PaymentOrderUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *PaymentOrderUpdateOne {
	pouo.mutation.RemoveTransactionIDs(ids...)
	return pouo
}

// RemoveTransactions removes "transactions" edges to TransactionLog entities.
func (pouo *PaymentOrderUpdateOne) RemoveTransactions(t ...*TransactionLog) *PaymentOrderUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pouo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the PaymentOrderUpdate builder.
func (pouo *PaymentOrderUpdateOne) Where(ps ...predicate.PaymentOrder) *PaymentOrderUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PaymentOrderUpdateOne) Select(field string, fields ...string) *PaymentOrderUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PaymentOrder entity.
func (pouo *PaymentOrderUpdateOne) Save(ctx context.Context) (*PaymentOrder, error) {
	pouo.defaults()
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PaymentOrderUpdateOne) SaveX(ctx context.Context) *PaymentOrder {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PaymentOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PaymentOrderUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouo *PaymentOrderUpdateOne) defaults() {
	if _, ok := pouo.mutation.UpdatedAt(); !ok {
		v := paymentorder.UpdateDefaultUpdatedAt()
		pouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PaymentOrderUpdateOne) check() error {
	if v, ok := pouo.mutation.TxHash(); ok {
		if err := paymentorder.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.tx_hash": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.FromAddress(); ok {
		if err := paymentorder.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.from_address": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.ReturnAddress(); ok {
		if err := paymentorder.ReturnAddressValidator(v); err != nil {
			return &ValidationError{Name: "return_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.return_address": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.ReceiveAddressText(); ok {
		if err := paymentorder.ReceiveAddressTextValidator(v); err != nil {
			return &ValidationError{Name: "receive_address_text", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.receive_address_text": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.FeeAddress(); ok {
		if err := paymentorder.FeeAddressValidator(v); err != nil {
			return &ValidationError{Name: "fee_address", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.fee_address": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.GatewayID(); ok {
		if err := paymentorder.GatewayIDValidator(v); err != nil {
			return &ValidationError{Name: "gateway_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.gateway_id": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.Reference(); ok {
		if err := paymentorder.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.reference": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.Status(); ok {
		if err := paymentorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.status": %w`, err)}
		}
	}
	if pouo.mutation.TokenCleared() && len(pouo.mutation.TokenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentOrder.token"`)
	}
	return nil
}

func (pouo *PaymentOrderUpdateOne) sqlSave(ctx context.Context) (_node *PaymentOrder, err error) {
	if err := pouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorder.Table, paymentorder.Columns, sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentorder.FieldID)
		for _, f := range fields {
			if !paymentorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pouo.mutation.Amount(); ok {
		_spec.SetField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedAmount(); ok {
		_spec.AddField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AmountPaid(); ok {
		_spec.SetField(paymentorder.FieldAmountPaid, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedAmountPaid(); ok {
		_spec.AddField(paymentorder.FieldAmountPaid, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AmountReturned(); ok {
		_spec.SetField(paymentorder.FieldAmountReturned, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedAmountReturned(); ok {
		_spec.AddField(paymentorder.FieldAmountReturned, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.PercentSettled(); ok {
		_spec.SetField(paymentorder.FieldPercentSettled, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedPercentSettled(); ok {
		_spec.AddField(paymentorder.FieldPercentSettled, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.SenderFee(); ok {
		_spec.SetField(paymentorder.FieldSenderFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedSenderFee(); ok {
		_spec.AddField(paymentorder.FieldSenderFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.NetworkFee(); ok {
		_spec.SetField(paymentorder.FieldNetworkFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedNetworkFee(); ok {
		_spec.AddField(paymentorder.FieldNetworkFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.ProtocolFee(); ok {
		_spec.SetField(paymentorder.FieldProtocolFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedProtocolFee(); ok {
		_spec.AddField(paymentorder.FieldProtocolFee, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.Rate(); ok {
		_spec.SetField(paymentorder.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedRate(); ok {
		_spec.AddField(paymentorder.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.TxHash(); ok {
		_spec.SetField(paymentorder.FieldTxHash, field.TypeString, value)
	}
	if pouo.mutation.TxHashCleared() {
		_spec.ClearField(paymentorder.FieldTxHash, field.TypeString)
	}
	if value, ok := pouo.mutation.BlockNumber(); ok {
		_spec.SetField(paymentorder.FieldBlockNumber, field.TypeInt64, value)
	}
	if value, ok := pouo.mutation.AddedBlockNumber(); ok {
		_spec.AddField(paymentorder.FieldBlockNumber, field.TypeInt64, value)
	}
	if value, ok := pouo.mutation.FromAddress(); ok {
		_spec.SetField(paymentorder.FieldFromAddress, field.TypeString, value)
	}
	if pouo.mutation.FromAddressCleared() {
		_spec.ClearField(paymentorder.FieldFromAddress, field.TypeString)
	}
	if value, ok := pouo.mutation.ReturnAddress(); ok {
		_spec.SetField(paymentorder.FieldReturnAddress, field.TypeString, value)
	}
	if pouo.mutation.ReturnAddressCleared() {
		_spec.ClearField(paymentorder.FieldReturnAddress, field.TypeString)
	}
	if value, ok := pouo.mutation.ReceiveAddressText(); ok {
		_spec.SetField(paymentorder.FieldReceiveAddressText, field.TypeString, value)
	}
	if value, ok := pouo.mutation.FeePercent(); ok {
		_spec.SetField(paymentorder.FieldFeePercent, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedFeePercent(); ok {
		_spec.AddField(paymentorder.FieldFeePercent, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.FeeAddress(); ok {
		_spec.SetField(paymentorder.FieldFeeAddress, field.TypeString, value)
	}
	if pouo.mutation.FeeAddressCleared() {
		_spec.ClearField(paymentorder.FieldFeeAddress, field.TypeString)
	}
	if value, ok := pouo.mutation.GatewayID(); ok {
		_spec.SetField(paymentorder.FieldGatewayID, field.TypeString, value)
	}
	if pouo.mutation.GatewayIDCleared() {
		_spec.ClearField(paymentorder.FieldGatewayID, field.TypeString)
	}
	if value, ok := pouo.mutation.Reference(); ok {
		_spec.SetField(paymentorder.FieldReference, field.TypeString, value)
	}
	if pouo.mutation.ReferenceCleared() {
		_spec.ClearField(paymentorder.FieldReference, field.TypeString)
	}
	if value, ok := pouo.mutation.Status(); ok {
		_spec.SetField(paymentorder.FieldStatus, field.TypeEnum, value)
	}
	if pouo.mutation.SenderProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.SenderProfileTable,
			Columns: []string{paymentorder.SenderProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.SenderProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.SenderProfileTable,
			Columns: []string{paymentorder.SenderProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.TokenTable,
			Columns: []string{paymentorder.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.TokenTable,
			Columns: []string{paymentorder.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.LinkedAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.LinkedAddressTable,
			Columns: []string{paymentorder.LinkedAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.LinkedAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentorder.LinkedAddressTable,
			Columns: []string{paymentorder.LinkedAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.ReceiveAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.ReceiveAddressTable,
			Columns: []string{paymentorder.ReceiveAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiveaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.ReceiveAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.ReceiveAddressTable,
			Columns: []string{paymentorder.ReceiveAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receiveaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.RecipientTable,
			Columns: []string{paymentorder.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentorder.RecipientTable,
			Columns: []string{paymentorder.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pouo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.TransactionsTable,
			Columns: []string{paymentorder.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentOrder{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
