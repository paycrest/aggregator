// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providercurrencies"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/shopspring/decimal"
)

// ProviderCurrenciesUpdate is the builder for updating ProviderCurrencies entities.
type ProviderCurrenciesUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderCurrenciesMutation
}

// Where appends a list predicates to the ProviderCurrenciesUpdate builder.
func (pcu *ProviderCurrenciesUpdate) Where(ps ...predicate.ProviderCurrencies) *ProviderCurrenciesUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetAvailableBalance sets the "available_balance" field.
func (pcu *ProviderCurrenciesUpdate) SetAvailableBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.ResetAvailableBalance()
	pcu.mutation.SetAvailableBalance(d)
	return pcu
}

// SetNillableAvailableBalance sets the "available_balance" field if the given value is not nil.
func (pcu *ProviderCurrenciesUpdate) SetNillableAvailableBalance(d *decimal.Decimal) *ProviderCurrenciesUpdate {
	if d != nil {
		pcu.SetAvailableBalance(*d)
	}
	return pcu
}

// AddAvailableBalance adds d to the "available_balance" field.
func (pcu *ProviderCurrenciesUpdate) AddAvailableBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.AddAvailableBalance(d)
	return pcu
}

// SetTotalBalance sets the "total_balance" field.
func (pcu *ProviderCurrenciesUpdate) SetTotalBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.ResetTotalBalance()
	pcu.mutation.SetTotalBalance(d)
	return pcu
}

// SetNillableTotalBalance sets the "total_balance" field if the given value is not nil.
func (pcu *ProviderCurrenciesUpdate) SetNillableTotalBalance(d *decimal.Decimal) *ProviderCurrenciesUpdate {
	if d != nil {
		pcu.SetTotalBalance(*d)
	}
	return pcu
}

// AddTotalBalance adds d to the "total_balance" field.
func (pcu *ProviderCurrenciesUpdate) AddTotalBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.AddTotalBalance(d)
	return pcu
}

// SetReservedBalance sets the "reserved_balance" field.
func (pcu *ProviderCurrenciesUpdate) SetReservedBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.ResetReservedBalance()
	pcu.mutation.SetReservedBalance(d)
	return pcu
}

// SetNillableReservedBalance sets the "reserved_balance" field if the given value is not nil.
func (pcu *ProviderCurrenciesUpdate) SetNillableReservedBalance(d *decimal.Decimal) *ProviderCurrenciesUpdate {
	if d != nil {
		pcu.SetReservedBalance(*d)
	}
	return pcu
}

// AddReservedBalance adds d to the "reserved_balance" field.
func (pcu *ProviderCurrenciesUpdate) AddReservedBalance(d decimal.Decimal) *ProviderCurrenciesUpdate {
	pcu.mutation.AddReservedBalance(d)
	return pcu
}

// SetIsAvailable sets the "is_available" field.
func (pcu *ProviderCurrenciesUpdate) SetIsAvailable(b bool) *ProviderCurrenciesUpdate {
	pcu.mutation.SetIsAvailable(b)
	return pcu
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcu *ProviderCurrenciesUpdate) SetNillableIsAvailable(b *bool) *ProviderCurrenciesUpdate {
	if b != nil {
		pcu.SetIsAvailable(*b)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProviderCurrenciesUpdate) SetUpdatedAt(t time.Time) *ProviderCurrenciesUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcu *ProviderCurrenciesUpdate) SetProviderID(id string) *ProviderCurrenciesUpdate {
	pcu.mutation.SetProviderID(id)
	return pcu
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcu *ProviderCurrenciesUpdate) SetProvider(p *ProviderProfile) *ProviderCurrenciesUpdate {
	return pcu.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcu *ProviderCurrenciesUpdate) SetCurrencyID(id uuid.UUID) *ProviderCurrenciesUpdate {
	pcu.mutation.SetCurrencyID(id)
	return pcu
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcu *ProviderCurrenciesUpdate) SetCurrency(f *FiatCurrency) *ProviderCurrenciesUpdate {
	return pcu.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrenciesMutation object of the builder.
func (pcu *ProviderCurrenciesUpdate) Mutation() *ProviderCurrenciesMutation {
	return pcu.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pcu *ProviderCurrenciesUpdate) ClearProvider() *ProviderCurrenciesUpdate {
	pcu.mutation.ClearProvider()
	return pcu
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pcu *ProviderCurrenciesUpdate) ClearCurrency() *ProviderCurrenciesUpdate {
	pcu.mutation.ClearCurrency()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProviderCurrenciesUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProviderCurrenciesUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProviderCurrenciesUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProviderCurrenciesUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *ProviderCurrenciesUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := providercurrencies.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProviderCurrenciesUpdate) check() error {
	if pcu.mutation.ProviderCleared() && len(pcu.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencies.provider"`)
	}
	if pcu.mutation.CurrencyCleared() && len(pcu.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencies.currency"`)
	}
	return nil
}

func (pcu *ProviderCurrenciesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providercurrencies.Table, providercurrencies.Columns, sqlgraph.NewFieldSpec(providercurrencies.FieldID, field.TypeUUID))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.AvailableBalance(); ok {
		_spec.SetField(providercurrencies.FieldAvailableBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedAvailableBalance(); ok {
		_spec.AddField(providercurrencies.FieldAvailableBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.TotalBalance(); ok {
		_spec.SetField(providercurrencies.FieldTotalBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedTotalBalance(); ok {
		_spec.AddField(providercurrencies.FieldTotalBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.ReservedBalance(); ok {
		_spec.SetField(providercurrencies.FieldReservedBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedReservedBalance(); ok {
		_spec.AddField(providercurrencies.FieldReservedBalance, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencies.FieldIsAvailable, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(providercurrencies.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcu.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.ProviderTable,
			Columns: []string{providercurrencies.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.ProviderTable,
			Columns: []string{providercurrencies.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.CurrencyTable,
			Columns: []string{providercurrencies.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.CurrencyTable,
			Columns: []string{providercurrencies.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providercurrencies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProviderCurrenciesUpdateOne is the builder for updating a single ProviderCurrencies entity.
type ProviderCurrenciesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderCurrenciesMutation
}

// SetAvailableBalance sets the "available_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) SetAvailableBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.ResetAvailableBalance()
	pcuo.mutation.SetAvailableBalance(d)
	return pcuo
}

// SetNillableAvailableBalance sets the "available_balance" field if the given value is not nil.
func (pcuo *ProviderCurrenciesUpdateOne) SetNillableAvailableBalance(d *decimal.Decimal) *ProviderCurrenciesUpdateOne {
	if d != nil {
		pcuo.SetAvailableBalance(*d)
	}
	return pcuo
}

// AddAvailableBalance adds d to the "available_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) AddAvailableBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.AddAvailableBalance(d)
	return pcuo
}

// SetTotalBalance sets the "total_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) SetTotalBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.ResetTotalBalance()
	pcuo.mutation.SetTotalBalance(d)
	return pcuo
}

// SetNillableTotalBalance sets the "total_balance" field if the given value is not nil.
func (pcuo *ProviderCurrenciesUpdateOne) SetNillableTotalBalance(d *decimal.Decimal) *ProviderCurrenciesUpdateOne {
	if d != nil {
		pcuo.SetTotalBalance(*d)
	}
	return pcuo
}

// AddTotalBalance adds d to the "total_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) AddTotalBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.AddTotalBalance(d)
	return pcuo
}

// SetReservedBalance sets the "reserved_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) SetReservedBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.ResetReservedBalance()
	pcuo.mutation.SetReservedBalance(d)
	return pcuo
}

// SetNillableReservedBalance sets the "reserved_balance" field if the given value is not nil.
func (pcuo *ProviderCurrenciesUpdateOne) SetNillableReservedBalance(d *decimal.Decimal) *ProviderCurrenciesUpdateOne {
	if d != nil {
		pcuo.SetReservedBalance(*d)
	}
	return pcuo
}

// AddReservedBalance adds d to the "reserved_balance" field.
func (pcuo *ProviderCurrenciesUpdateOne) AddReservedBalance(d decimal.Decimal) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.AddReservedBalance(d)
	return pcuo
}

// SetIsAvailable sets the "is_available" field.
func (pcuo *ProviderCurrenciesUpdateOne) SetIsAvailable(b bool) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.SetIsAvailable(b)
	return pcuo
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcuo *ProviderCurrenciesUpdateOne) SetNillableIsAvailable(b *bool) *ProviderCurrenciesUpdateOne {
	if b != nil {
		pcuo.SetIsAvailable(*b)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProviderCurrenciesUpdateOne) SetUpdatedAt(t time.Time) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcuo *ProviderCurrenciesUpdateOne) SetProviderID(id string) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.SetProviderID(id)
	return pcuo
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcuo *ProviderCurrenciesUpdateOne) SetProvider(p *ProviderProfile) *ProviderCurrenciesUpdateOne {
	return pcuo.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcuo *ProviderCurrenciesUpdateOne) SetCurrencyID(id uuid.UUID) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.SetCurrencyID(id)
	return pcuo
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcuo *ProviderCurrenciesUpdateOne) SetCurrency(f *FiatCurrency) *ProviderCurrenciesUpdateOne {
	return pcuo.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrenciesMutation object of the builder.
func (pcuo *ProviderCurrenciesUpdateOne) Mutation() *ProviderCurrenciesMutation {
	return pcuo.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pcuo *ProviderCurrenciesUpdateOne) ClearProvider() *ProviderCurrenciesUpdateOne {
	pcuo.mutation.ClearProvider()
	return pcuo
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pcuo *ProviderCurrenciesUpdateOne) ClearCurrency() *ProviderCurrenciesUpdateOne {
	pcuo.mutation.ClearCurrency()
	return pcuo
}

// Where appends a list predicates to the ProviderCurrenciesUpdate builder.
func (pcuo *ProviderCurrenciesUpdateOne) Where(ps ...predicate.ProviderCurrencies) *ProviderCurrenciesUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProviderCurrenciesUpdateOne) Select(field string, fields ...string) *ProviderCurrenciesUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProviderCurrencies entity.
func (pcuo *ProviderCurrenciesUpdateOne) Save(ctx context.Context) (*ProviderCurrencies, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProviderCurrenciesUpdateOne) SaveX(ctx context.Context) *ProviderCurrencies {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProviderCurrenciesUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProviderCurrenciesUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *ProviderCurrenciesUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := providercurrencies.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProviderCurrenciesUpdateOne) check() error {
	if pcuo.mutation.ProviderCleared() && len(pcuo.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencies.provider"`)
	}
	if pcuo.mutation.CurrencyCleared() && len(pcuo.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencies.currency"`)
	}
	return nil
}

func (pcuo *ProviderCurrenciesUpdateOne) sqlSave(ctx context.Context) (_node *ProviderCurrencies, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providercurrencies.Table, providercurrencies.Columns, sqlgraph.NewFieldSpec(providercurrencies.FieldID, field.TypeUUID))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderCurrencies.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providercurrencies.FieldID)
		for _, f := range fields {
			if !providercurrencies.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providercurrencies.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.AvailableBalance(); ok {
		_spec.SetField(providercurrencies.FieldAvailableBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedAvailableBalance(); ok {
		_spec.AddField(providercurrencies.FieldAvailableBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.TotalBalance(); ok {
		_spec.SetField(providercurrencies.FieldTotalBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedTotalBalance(); ok {
		_spec.AddField(providercurrencies.FieldTotalBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.ReservedBalance(); ok {
		_spec.SetField(providercurrencies.FieldReservedBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedReservedBalance(); ok {
		_spec.AddField(providercurrencies.FieldReservedBalance, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencies.FieldIsAvailable, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(providercurrencies.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.ProviderTable,
			Columns: []string{providercurrencies.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.ProviderTable,
			Columns: []string{providercurrencies.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.CurrencyTable,
			Columns: []string{providercurrencies.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.CurrencyTable,
			Columns: []string{providercurrencies.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderCurrencies{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providercurrencies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
