// Code generated by ent, DO NOT EDIT.

package fiatcurrency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the fiatcurrency type in the database.
	Label = "fiat_currency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldShortName holds the string denoting the short_name field in the database.
	FieldShortName = "short_name"
	// FieldDecimals holds the string denoting the decimals field in the database.
	FieldDecimals = "decimals"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMarketRate holds the string denoting the market_rate field in the database.
	FieldMarketRate = "market_rate"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldMinimumAvailableBalance holds the string denoting the minimum_available_balance field in the database.
	FieldMinimumAvailableBalance = "minimum_available_balance"
	// FieldCriticalThreshold holds the string denoting the critical_threshold field in the database.
	FieldCriticalThreshold = "critical_threshold"
	// EdgeProviderCurrencies holds the string denoting the provider_currencies edge name in mutations.
	EdgeProviderCurrencies = "provider_currencies"
	// EdgeProvisionBuckets holds the string denoting the provision_buckets edge name in mutations.
	EdgeProvisionBuckets = "provision_buckets"
	// EdgeInstitutions holds the string denoting the institutions edge name in mutations.
	EdgeInstitutions = "institutions"
	// EdgeProviderOrderTokens holds the string denoting the provider_order_tokens edge name in mutations.
	EdgeProviderOrderTokens = "provider_order_tokens"
	// Table holds the table name of the fiatcurrency in the database.
	Table = "fiat_currencies"
	// ProviderCurrenciesTable is the table that holds the provider_currencies relation/edge.
	ProviderCurrenciesTable = "provider_currencies"
	// ProviderCurrenciesInverseTable is the table name for the ProviderCurrencies entity.
	// It exists in this package in order to avoid circular dependency with the "providercurrencies" package.
	ProviderCurrenciesInverseTable = "provider_currencies"
	// ProviderCurrenciesColumn is the table column denoting the provider_currencies relation/edge.
	ProviderCurrenciesColumn = "fiat_currency_provider_currencies"
	// ProvisionBucketsTable is the table that holds the provision_buckets relation/edge.
	ProvisionBucketsTable = "provision_buckets"
	// ProvisionBucketsInverseTable is the table name for the ProvisionBucket entity.
	// It exists in this package in order to avoid circular dependency with the "provisionbucket" package.
	ProvisionBucketsInverseTable = "provision_buckets"
	// ProvisionBucketsColumn is the table column denoting the provision_buckets relation/edge.
	ProvisionBucketsColumn = "fiat_currency_provision_buckets"
	// InstitutionsTable is the table that holds the institutions relation/edge.
	InstitutionsTable = "institutions"
	// InstitutionsInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionsInverseTable = "institutions"
	// InstitutionsColumn is the table column denoting the institutions relation/edge.
	InstitutionsColumn = "fiat_currency_institutions"
	// ProviderOrderTokensTable is the table that holds the provider_order_tokens relation/edge.
	ProviderOrderTokensTable = "provider_order_tokens"
	// ProviderOrderTokensInverseTable is the table name for the ProviderOrderToken entity.
	// It exists in this package in order to avoid circular dependency with the "providerordertoken" package.
	ProviderOrderTokensInverseTable = "provider_order_tokens"
	// ProviderOrderTokensColumn is the table column denoting the provider_order_tokens relation/edge.
	ProviderOrderTokensColumn = "fiat_currency_provider_order_tokens"
)

// Columns holds all SQL columns for fiatcurrency fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldShortName,
	FieldDecimals,
	FieldSymbol,
	FieldName,
	FieldMarketRate,
	FieldIsEnabled,
	FieldMinimumAvailableBalance,
	FieldCriticalThreshold,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDecimals holds the default value on creation for the "decimals" field.
	DefaultDecimals int
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// DefaultMinimumAvailableBalance holds the default value on creation for the "minimum_available_balance" field.
	DefaultMinimumAvailableBalance decimal.Decimal
	// DefaultCriticalThreshold holds the default value on creation for the "critical_threshold" field.
	DefaultCriticalThreshold decimal.Decimal
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the FiatCurrency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByShortName orders the results by the short_name field.
func ByShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortName, opts...).ToFunc()
}

// ByDecimals orders the results by the decimals field.
func ByDecimals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDecimals, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMarketRate orders the results by the market_rate field.
func ByMarketRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketRate, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByMinimumAvailableBalance orders the results by the minimum_available_balance field.
func ByMinimumAvailableBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumAvailableBalance, opts...).ToFunc()
}

// ByCriticalThreshold orders the results by the critical_threshold field.
func ByCriticalThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCriticalThreshold, opts...).ToFunc()
}

// ByProviderCurrenciesCount orders the results by provider_currencies count.
func ByProviderCurrenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProviderCurrenciesStep(), opts...)
	}
}

// ByProviderCurrencies orders the results by provider_currencies terms.
func ByProviderCurrencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderCurrenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProvisionBucketsCount orders the results by provision_buckets count.
func ByProvisionBucketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProvisionBucketsStep(), opts...)
	}
}

// ByProvisionBuckets orders the results by provision_buckets terms.
func ByProvisionBuckets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionBucketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInstitutionsCount orders the results by institutions count.
func ByInstitutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInstitutionsStep(), opts...)
	}
}

// ByInstitutions orders the results by institutions terms.
func ByInstitutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProviderOrderTokensCount orders the results by provider_order_tokens count.
func ByProviderOrderTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProviderOrderTokensStep(), opts...)
	}
}

// ByProviderOrderTokens orders the results by provider_order_tokens terms.
func ByProviderOrderTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderOrderTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProviderCurrenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderCurrenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProviderCurrenciesTable, ProviderCurrenciesColumn),
	)
}
func newProvisionBucketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionBucketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProvisionBucketsTable, ProvisionBucketsColumn),
	)
}
func newInstitutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InstitutionsTable, InstitutionsColumn),
	)
}
func newProviderOrderTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderOrderTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProviderOrderTokensTable, ProviderOrderTokensColumn),
	)
}
