// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
	"github.com/paycrest/aggregator/ent/predicate"
)

// IdentityVerificationRequestDelete is the builder for deleting a IdentityVerificationRequest entity.
type IdentityVerificationRequestDelete struct {
	config
	hooks    []Hook
	mutation *IdentityVerificationRequestMutation
}

// Where appends a list predicates to the IdentityVerificationRequestDelete builder.
func (ivrd *IdentityVerificationRequestDelete) Where(ps ...predicate.IdentityVerificationRequest) *IdentityVerificationRequestDelete {
	ivrd.mutation.Where(ps...)
	return ivrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ivrd *IdentityVerificationRequestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ivrd.sqlExec, ivrd.mutation, ivrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ivrd *IdentityVerificationRequestDelete) ExecX(ctx context.Context) int {
	n, err := ivrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ivrd *IdentityVerificationRequestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(identityverificationrequest.Table, sqlgraph.NewFieldSpec(identityverificationrequest.FieldID, field.TypeUUID))
	if ps := ivrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ivrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ivrd.mutation.done = true
	return affected, err
}

// IdentityVerificationRequestDeleteOne is the builder for deleting a single IdentityVerificationRequest entity.
type IdentityVerificationRequestDeleteOne struct {
	ivrd *IdentityVerificationRequestDelete
}

// Where appends a list predicates to the IdentityVerificationRequestDelete builder.
func (ivrdo *IdentityVerificationRequestDeleteOne) Where(ps ...predicate.IdentityVerificationRequest) *IdentityVerificationRequestDeleteOne {
	ivrdo.ivrd.mutation.Where(ps...)
	return ivrdo
}

// Exec executes the deletion query.
func (ivrdo *IdentityVerificationRequestDeleteOne) Exec(ctx context.Context) error {
	n, err := ivrdo.ivrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{identityverificationrequest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ivrdo *IdentityVerificationRequestDeleteOne) ExecX(ctx context.Context) {
	if err := ivrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
