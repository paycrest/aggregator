// Code generated by ent, DO NOT EDIT.

package transactionlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldID, id))
}

// GatewayID applies equality check predicate on the "gateway_id" field. It's identical to GatewayIDEQ.
func GatewayID(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldGatewayID, v))
}

// Network applies equality check predicate on the "network" field. It's identical to NetworkEQ.
func Network(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldNetwork, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldTxHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// GatewayIDEQ applies the EQ predicate on the "gateway_id" field.
func GatewayIDEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldGatewayID, v))
}

// GatewayIDNEQ applies the NEQ predicate on the "gateway_id" field.
func GatewayIDNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldGatewayID, v))
}

// GatewayIDIn applies the In predicate on the "gateway_id" field.
func GatewayIDIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldGatewayID, vs...))
}

// GatewayIDNotIn applies the NotIn predicate on the "gateway_id" field.
func GatewayIDNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldGatewayID, vs...))
}

// GatewayIDGT applies the GT predicate on the "gateway_id" field.
func GatewayIDGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldGatewayID, v))
}

// GatewayIDGTE applies the GTE predicate on the "gateway_id" field.
func GatewayIDGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldGatewayID, v))
}

// GatewayIDLT applies the LT predicate on the "gateway_id" field.
func GatewayIDLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldGatewayID, v))
}

// GatewayIDLTE applies the LTE predicate on the "gateway_id" field.
func GatewayIDLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldGatewayID, v))
}

// GatewayIDContains applies the Contains predicate on the "gateway_id" field.
func GatewayIDContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldGatewayID, v))
}

// GatewayIDHasPrefix applies the HasPrefix predicate on the "gateway_id" field.
func GatewayIDHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldGatewayID, v))
}

// GatewayIDHasSuffix applies the HasSuffix predicate on the "gateway_id" field.
func GatewayIDHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldGatewayID, v))
}

// GatewayIDIsNil applies the IsNil predicate on the "gateway_id" field.
func GatewayIDIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldGatewayID))
}

// GatewayIDNotNil applies the NotNil predicate on the "gateway_id" field.
func GatewayIDNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldGatewayID))
}

// GatewayIDEqualFold applies the EqualFold predicate on the "gateway_id" field.
func GatewayIDEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldGatewayID, v))
}

// GatewayIDContainsFold applies the ContainsFold predicate on the "gateway_id" field.
func GatewayIDContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldGatewayID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldStatus, vs...))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldNetwork, v))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldNetwork, v))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldNetwork, vs...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldNetwork, vs...))
}

// NetworkGT applies the GT predicate on the "network" field.
func NetworkGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldNetwork, v))
}

// NetworkGTE applies the GTE predicate on the "network" field.
func NetworkGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldNetwork, v))
}

// NetworkLT applies the LT predicate on the "network" field.
func NetworkLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldNetwork, v))
}

// NetworkLTE applies the LTE predicate on the "network" field.
func NetworkLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldNetwork, v))
}

// NetworkContains applies the Contains predicate on the "network" field.
func NetworkContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldNetwork, v))
}

// NetworkHasPrefix applies the HasPrefix predicate on the "network" field.
func NetworkHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldNetwork, v))
}

// NetworkHasSuffix applies the HasSuffix predicate on the "network" field.
func NetworkHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldNetwork, v))
}

// NetworkIsNil applies the IsNil predicate on the "network" field.
func NetworkIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldNetwork))
}

// NetworkNotNil applies the NotNil predicate on the "network" field.
func NetworkNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldNetwork))
}

// NetworkEqualFold applies the EqualFold predicate on the "network" field.
func NetworkEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldNetwork, v))
}

// NetworkContainsFold applies the ContainsFold predicate on the "network" field.
func NetworkContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldNetwork, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldTxHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(sql.NotPredicates(p))
}
