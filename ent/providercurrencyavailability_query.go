// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providercurrencyavailability"
	"github.com/paycrest/aggregator/ent/providerprofile"
)

// ProviderCurrencyAvailabilityQuery is the builder for querying ProviderCurrencyAvailability entities.
type ProviderCurrencyAvailabilityQuery struct {
	config
	ctx          *QueryContext
	order        []providercurrencyavailability.OrderOption
	inters       []Interceptor
	predicates   []predicate.ProviderCurrencyAvailability
	withProvider *ProviderProfileQuery
	withCurrency *FiatCurrencyQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProviderCurrencyAvailabilityQuery builder.
func (pcaq *ProviderCurrencyAvailabilityQuery) Where(ps ...predicate.ProviderCurrencyAvailability) *ProviderCurrencyAvailabilityQuery {
	pcaq.predicates = append(pcaq.predicates, ps...)
	return pcaq
}

// Limit the number of records to be returned by this query.
func (pcaq *ProviderCurrencyAvailabilityQuery) Limit(limit int) *ProviderCurrencyAvailabilityQuery {
	pcaq.ctx.Limit = &limit
	return pcaq
}

// Offset to start from.
func (pcaq *ProviderCurrencyAvailabilityQuery) Offset(offset int) *ProviderCurrencyAvailabilityQuery {
	pcaq.ctx.Offset = &offset
	return pcaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcaq *ProviderCurrencyAvailabilityQuery) Unique(unique bool) *ProviderCurrencyAvailabilityQuery {
	pcaq.ctx.Unique = &unique
	return pcaq
}

// Order specifies how the records should be ordered.
func (pcaq *ProviderCurrencyAvailabilityQuery) Order(o ...providercurrencyavailability.OrderOption) *ProviderCurrencyAvailabilityQuery {
	pcaq.order = append(pcaq.order, o...)
	return pcaq
}

// QueryProvider chains the current query on the "provider" edge.
func (pcaq *ProviderCurrencyAvailabilityQuery) QueryProvider() *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: pcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providercurrencyavailability.Table, providercurrencyavailability.FieldID, selector),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providercurrencyavailability.ProviderTable, providercurrencyavailability.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrency chains the current query on the "currency" edge.
func (pcaq *ProviderCurrencyAvailabilityQuery) QueryCurrency() *FiatCurrencyQuery {
	query := (&FiatCurrencyClient{config: pcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providercurrencyavailability.Table, providercurrencyavailability.FieldID, selector),
			sqlgraph.To(fiatcurrency.Table, fiatcurrency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providercurrencyavailability.CurrencyTable, providercurrencyavailability.CurrencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProviderCurrencyAvailability entity from the query.
// Returns a *NotFoundError when no ProviderCurrencyAvailability was found.
func (pcaq *ProviderCurrencyAvailabilityQuery) First(ctx context.Context) (*ProviderCurrencyAvailability, error) {
	nodes, err := pcaq.Limit(1).All(setContextOp(ctx, pcaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{providercurrencyavailability.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) FirstX(ctx context.Context) *ProviderCurrencyAvailability {
	node, err := pcaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProviderCurrencyAvailability ID from the query.
// Returns a *NotFoundError when no ProviderCurrencyAvailability ID was found.
func (pcaq *ProviderCurrencyAvailabilityQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pcaq.Limit(1).IDs(setContextOp(ctx, pcaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{providercurrencyavailability.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pcaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProviderCurrencyAvailability entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProviderCurrencyAvailability entity is found.
// Returns a *NotFoundError when no ProviderCurrencyAvailability entities are found.
func (pcaq *ProviderCurrencyAvailabilityQuery) Only(ctx context.Context) (*ProviderCurrencyAvailability, error) {
	nodes, err := pcaq.Limit(2).All(setContextOp(ctx, pcaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{providercurrencyavailability.Label}
	default:
		return nil, &NotSingularError{providercurrencyavailability.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) OnlyX(ctx context.Context) *ProviderCurrencyAvailability {
	node, err := pcaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProviderCurrencyAvailability ID in the query.
// Returns a *NotSingularError when more than one ProviderCurrencyAvailability ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcaq *ProviderCurrencyAvailabilityQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pcaq.Limit(2).IDs(setContextOp(ctx, pcaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{providercurrencyavailability.Label}
	default:
		err = &NotSingularError{providercurrencyavailability.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pcaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProviderCurrencyAvailabilities.
func (pcaq *ProviderCurrencyAvailabilityQuery) All(ctx context.Context) ([]*ProviderCurrencyAvailability, error) {
	ctx = setContextOp(ctx, pcaq.ctx, ent.OpQueryAll)
	if err := pcaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProviderCurrencyAvailability, *ProviderCurrencyAvailabilityQuery]()
	return withInterceptors[[]*ProviderCurrencyAvailability](ctx, pcaq, qr, pcaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) AllX(ctx context.Context) []*ProviderCurrencyAvailability {
	nodes, err := pcaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProviderCurrencyAvailability IDs.
func (pcaq *ProviderCurrencyAvailabilityQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pcaq.ctx.Unique == nil && pcaq.path != nil {
		pcaq.Unique(true)
	}
	ctx = setContextOp(ctx, pcaq.ctx, ent.OpQueryIDs)
	if err = pcaq.Select(providercurrencyavailability.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pcaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcaq *ProviderCurrencyAvailabilityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcaq.ctx, ent.OpQueryCount)
	if err := pcaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcaq, querierCount[*ProviderCurrencyAvailabilityQuery](), pcaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) CountX(ctx context.Context) int {
	count, err := pcaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcaq *ProviderCurrencyAvailabilityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcaq.ctx, ent.OpQueryExist)
	switch _, err := pcaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcaq *ProviderCurrencyAvailabilityQuery) ExistX(ctx context.Context) bool {
	exist, err := pcaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProviderCurrencyAvailabilityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcaq *ProviderCurrencyAvailabilityQuery) Clone() *ProviderCurrencyAvailabilityQuery {
	if pcaq == nil {
		return nil
	}
	return &ProviderCurrencyAvailabilityQuery{
		config:       pcaq.config,
		ctx:          pcaq.ctx.Clone(),
		order:        append([]providercurrencyavailability.OrderOption{}, pcaq.order...),
		inters:       append([]Interceptor{}, pcaq.inters...),
		predicates:   append([]predicate.ProviderCurrencyAvailability{}, pcaq.predicates...),
		withProvider: pcaq.withProvider.Clone(),
		withCurrency: pcaq.withCurrency.Clone(),
		// clone intermediate query.
		sql:  pcaq.sql.Clone(),
		path: pcaq.path,
	}
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (pcaq *ProviderCurrencyAvailabilityQuery) WithProvider(opts ...func(*ProviderProfileQuery)) *ProviderCurrencyAvailabilityQuery {
	query := (&ProviderProfileClient{config: pcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcaq.withProvider = query
	return pcaq
}

// WithCurrency tells the query-builder to eager-load the nodes that are connected to
// the "currency" edge. The optional arguments are used to configure the query builder of the edge.
func (pcaq *ProviderCurrencyAvailabilityQuery) WithCurrency(opts ...func(*FiatCurrencyQuery)) *ProviderCurrencyAvailabilityQuery {
	query := (&FiatCurrencyClient{config: pcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcaq.withCurrency = query
	return pcaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IsAvailable bool `json:"is_available,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProviderCurrencyAvailability.Query().
//		GroupBy(providercurrencyavailability.FieldIsAvailable).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcaq *ProviderCurrencyAvailabilityQuery) GroupBy(field string, fields ...string) *ProviderCurrencyAvailabilityGroupBy {
	pcaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProviderCurrencyAvailabilityGroupBy{build: pcaq}
	grbuild.flds = &pcaq.ctx.Fields
	grbuild.label = providercurrencyavailability.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IsAvailable bool `json:"is_available,omitempty"`
//	}
//
//	client.ProviderCurrencyAvailability.Query().
//		Select(providercurrencyavailability.FieldIsAvailable).
//		Scan(ctx, &v)
func (pcaq *ProviderCurrencyAvailabilityQuery) Select(fields ...string) *ProviderCurrencyAvailabilitySelect {
	pcaq.ctx.Fields = append(pcaq.ctx.Fields, fields...)
	sbuild := &ProviderCurrencyAvailabilitySelect{ProviderCurrencyAvailabilityQuery: pcaq}
	sbuild.label = providercurrencyavailability.Label
	sbuild.flds, sbuild.scan = &pcaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProviderCurrencyAvailabilitySelect configured with the given aggregations.
func (pcaq *ProviderCurrencyAvailabilityQuery) Aggregate(fns ...AggregateFunc) *ProviderCurrencyAvailabilitySelect {
	return pcaq.Select().Aggregate(fns...)
}

func (pcaq *ProviderCurrencyAvailabilityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcaq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcaq.ctx.Fields {
		if !providercurrencyavailability.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcaq.path != nil {
		prev, err := pcaq.path(ctx)
		if err != nil {
			return err
		}
		pcaq.sql = prev
	}
	return nil
}

func (pcaq *ProviderCurrencyAvailabilityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProviderCurrencyAvailability, error) {
	var (
		nodes       = []*ProviderCurrencyAvailability{}
		withFKs     = pcaq.withFKs
		_spec       = pcaq.querySpec()
		loadedTypes = [2]bool{
			pcaq.withProvider != nil,
			pcaq.withCurrency != nil,
		}
	)
	if pcaq.withProvider != nil || pcaq.withCurrency != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, providercurrencyavailability.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProviderCurrencyAvailability).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProviderCurrencyAvailability{config: pcaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcaq.withProvider; query != nil {
		if err := pcaq.loadProvider(ctx, query, nodes, nil,
			func(n *ProviderCurrencyAvailability, e *ProviderProfile) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	if query := pcaq.withCurrency; query != nil {
		if err := pcaq.loadCurrency(ctx, query, nodes, nil,
			func(n *ProviderCurrencyAvailability, e *FiatCurrency) { n.Edges.Currency = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcaq *ProviderCurrencyAvailabilityQuery) loadProvider(ctx context.Context, query *ProviderProfileQuery, nodes []*ProviderCurrencyAvailability, init func(*ProviderCurrencyAvailability), assign func(*ProviderCurrencyAvailability, *ProviderProfile)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ProviderCurrencyAvailability)
	for i := range nodes {
		if nodes[i].provider_profile_currency_availability == nil {
			continue
		}
		fk := *nodes[i].provider_profile_currency_availability
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(providerprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_profile_currency_availability" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcaq *ProviderCurrencyAvailabilityQuery) loadCurrency(ctx context.Context, query *FiatCurrencyQuery, nodes []*ProviderCurrencyAvailability, init func(*ProviderCurrencyAvailability), assign func(*ProviderCurrencyAvailability, *FiatCurrency)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProviderCurrencyAvailability)
	for i := range nodes {
		if nodes[i].fiat_currency_provider_availability == nil {
			continue
		}
		fk := *nodes[i].fiat_currency_provider_availability
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(fiatcurrency.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "fiat_currency_provider_availability" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pcaq *ProviderCurrencyAvailabilityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcaq.querySpec()
	_spec.Node.Columns = pcaq.ctx.Fields
	if len(pcaq.ctx.Fields) > 0 {
		_spec.Unique = pcaq.ctx.Unique != nil && *pcaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcaq.driver, _spec)
}

func (pcaq *ProviderCurrencyAvailabilityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(providercurrencyavailability.Table, providercurrencyavailability.Columns, sqlgraph.NewFieldSpec(providercurrencyavailability.FieldID, field.TypeUUID))
	_spec.From = pcaq.sql
	if unique := pcaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcaq.path != nil {
		_spec.Unique = true
	}
	if fields := pcaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providercurrencyavailability.FieldID)
		for i := range fields {
			if fields[i] != providercurrencyavailability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcaq *ProviderCurrencyAvailabilityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcaq.driver.Dialect())
	t1 := builder.Table(providercurrencyavailability.Table)
	columns := pcaq.ctx.Fields
	if len(columns) == 0 {
		columns = providercurrencyavailability.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcaq.sql != nil {
		selector = pcaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcaq.ctx.Unique != nil && *pcaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pcaq.predicates {
		p(selector)
	}
	for _, p := range pcaq.order {
		p(selector)
	}
	if offset := pcaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProviderCurrencyAvailabilityGroupBy is the group-by builder for ProviderCurrencyAvailability entities.
type ProviderCurrencyAvailabilityGroupBy struct {
	selector
	build *ProviderCurrencyAvailabilityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcagb *ProviderCurrencyAvailabilityGroupBy) Aggregate(fns ...AggregateFunc) *ProviderCurrencyAvailabilityGroupBy {
	pcagb.fns = append(pcagb.fns, fns...)
	return pcagb
}

// Scan applies the selector query and scans the result into the given value.
func (pcagb *ProviderCurrencyAvailabilityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcagb.build.ctx, ent.OpQueryGroupBy)
	if err := pcagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProviderCurrencyAvailabilityQuery, *ProviderCurrencyAvailabilityGroupBy](ctx, pcagb.build, pcagb, pcagb.build.inters, v)
}

func (pcagb *ProviderCurrencyAvailabilityGroupBy) sqlScan(ctx context.Context, root *ProviderCurrencyAvailabilityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcagb.fns))
	for _, fn := range pcagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcagb.flds)+len(pcagb.fns))
		for _, f := range *pcagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProviderCurrencyAvailabilitySelect is the builder for selecting fields of ProviderCurrencyAvailability entities.
type ProviderCurrencyAvailabilitySelect struct {
	*ProviderCurrencyAvailabilityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcas *ProviderCurrencyAvailabilitySelect) Aggregate(fns ...AggregateFunc) *ProviderCurrencyAvailabilitySelect {
	pcas.fns = append(pcas.fns, fns...)
	return pcas
}

// Scan applies the selector query and scans the result into the given value.
func (pcas *ProviderCurrencyAvailabilitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcas.ctx, ent.OpQuerySelect)
	if err := pcas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProviderCurrencyAvailabilityQuery, *ProviderCurrencyAvailabilitySelect](ctx, pcas.ProviderCurrencyAvailabilityQuery, pcas, pcas.inters, v)
}

func (pcas *ProviderCurrencyAvailabilitySelect) sqlScan(ctx context.Context, root *ProviderCurrencyAvailabilityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcas.fns))
	for _, fn := range pcas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
