// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/providercurrencies"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/shopspring/decimal"
)

// ProviderCurrenciesCreate is the builder for creating a ProviderCurrencies entity.
type ProviderCurrenciesCreate struct {
	config
	mutation *ProviderCurrenciesMutation
	hooks    []Hook
}

// SetAvailableBalance sets the "available_balance" field.
func (pcc *ProviderCurrenciesCreate) SetAvailableBalance(d decimal.Decimal) *ProviderCurrenciesCreate {
	pcc.mutation.SetAvailableBalance(d)
	return pcc
}

// SetTotalBalance sets the "total_balance" field.
func (pcc *ProviderCurrenciesCreate) SetTotalBalance(d decimal.Decimal) *ProviderCurrenciesCreate {
	pcc.mutation.SetTotalBalance(d)
	return pcc
}

// SetReservedBalance sets the "reserved_balance" field.
func (pcc *ProviderCurrenciesCreate) SetReservedBalance(d decimal.Decimal) *ProviderCurrenciesCreate {
	pcc.mutation.SetReservedBalance(d)
	return pcc
}

// SetIsAvailable sets the "is_available" field.
func (pcc *ProviderCurrenciesCreate) SetIsAvailable(b bool) *ProviderCurrenciesCreate {
	pcc.mutation.SetIsAvailable(b)
	return pcc
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcc *ProviderCurrenciesCreate) SetNillableIsAvailable(b *bool) *ProviderCurrenciesCreate {
	if b != nil {
		pcc.SetIsAvailable(*b)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *ProviderCurrenciesCreate) SetUpdatedAt(t time.Time) *ProviderCurrenciesCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *ProviderCurrenciesCreate) SetNillableUpdatedAt(t *time.Time) *ProviderCurrenciesCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *ProviderCurrenciesCreate) SetID(u uuid.UUID) *ProviderCurrenciesCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *ProviderCurrenciesCreate) SetNillableID(u *uuid.UUID) *ProviderCurrenciesCreate {
	if u != nil {
		pcc.SetID(*u)
	}
	return pcc
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcc *ProviderCurrenciesCreate) SetProviderID(id string) *ProviderCurrenciesCreate {
	pcc.mutation.SetProviderID(id)
	return pcc
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcc *ProviderCurrenciesCreate) SetProvider(p *ProviderProfile) *ProviderCurrenciesCreate {
	return pcc.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcc *ProviderCurrenciesCreate) SetCurrencyID(id uuid.UUID) *ProviderCurrenciesCreate {
	pcc.mutation.SetCurrencyID(id)
	return pcc
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcc *ProviderCurrenciesCreate) SetCurrency(f *FiatCurrency) *ProviderCurrenciesCreate {
	return pcc.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrenciesMutation object of the builder.
func (pcc *ProviderCurrenciesCreate) Mutation() *ProviderCurrenciesMutation {
	return pcc.mutation
}

// Save creates the ProviderCurrencies in the database.
func (pcc *ProviderCurrenciesCreate) Save(ctx context.Context) (*ProviderCurrencies, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProviderCurrenciesCreate) SaveX(ctx context.Context) *ProviderCurrencies {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *ProviderCurrenciesCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *ProviderCurrenciesCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *ProviderCurrenciesCreate) defaults() {
	if _, ok := pcc.mutation.IsAvailable(); !ok {
		v := providercurrencies.DefaultIsAvailable
		pcc.mutation.SetIsAvailable(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := providercurrencies.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := providercurrencies.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProviderCurrenciesCreate) check() error {
	if _, ok := pcc.mutation.AvailableBalance(); !ok {
		return &ValidationError{Name: "available_balance", err: errors.New(`ent: missing required field "ProviderCurrencies.available_balance"`)}
	}
	if _, ok := pcc.mutation.TotalBalance(); !ok {
		return &ValidationError{Name: "total_balance", err: errors.New(`ent: missing required field "ProviderCurrencies.total_balance"`)}
	}
	if _, ok := pcc.mutation.ReservedBalance(); !ok {
		return &ValidationError{Name: "reserved_balance", err: errors.New(`ent: missing required field "ProviderCurrencies.reserved_balance"`)}
	}
	if _, ok := pcc.mutation.IsAvailable(); !ok {
		return &ValidationError{Name: "is_available", err: errors.New(`ent: missing required field "ProviderCurrencies.is_available"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderCurrencies.updated_at"`)}
	}
	if len(pcc.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "ProviderCurrencies.provider"`)}
	}
	if len(pcc.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "ProviderCurrencies.currency"`)}
	}
	return nil
}

func (pcc *ProviderCurrenciesCreate) sqlSave(ctx context.Context) (*ProviderCurrencies, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *ProviderCurrenciesCreate) createSpec() (*ProviderCurrencies, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderCurrencies{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(providercurrencies.Table, sqlgraph.NewFieldSpec(providercurrencies.FieldID, field.TypeUUID))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.AvailableBalance(); ok {
		_spec.SetField(providercurrencies.FieldAvailableBalance, field.TypeFloat64, value)
		_node.AvailableBalance = value
	}
	if value, ok := pcc.mutation.TotalBalance(); ok {
		_spec.SetField(providercurrencies.FieldTotalBalance, field.TypeFloat64, value)
		_node.TotalBalance = value
	}
	if value, ok := pcc.mutation.ReservedBalance(); ok {
		_spec.SetField(providercurrencies.FieldReservedBalance, field.TypeFloat64, value)
		_node.ReservedBalance = value
	}
	if value, ok := pcc.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencies.FieldIsAvailable, field.TypeBool, value)
		_node.IsAvailable = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(providercurrencies.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pcc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.ProviderTable,
			Columns: []string{providercurrencies.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_profile_provider_currencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencies.CurrencyTable,
			Columns: []string{providercurrencies.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fiat_currency_provider_currencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderCurrenciesCreateBulk is the builder for creating many ProviderCurrencies entities in bulk.
type ProviderCurrenciesCreateBulk struct {
	config
	err      error
	builders []*ProviderCurrenciesCreate
}

// Save creates the ProviderCurrencies entities in the database.
func (pccb *ProviderCurrenciesCreateBulk) Save(ctx context.Context) ([]*ProviderCurrencies, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProviderCurrencies, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderCurrenciesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProviderCurrenciesCreateBulk) SaveX(ctx context.Context) []*ProviderCurrencies {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *ProviderCurrenciesCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *ProviderCurrenciesCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
