// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/fiatcurrency"
	"github.com/paycrest/protocol/ent/financialinstitution"
)

// FinancialInstitution is the model entity for the FinancialInstitution schema.
type FinancialInstitution struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinancialInstitutionQuery when eager-loading is set.
	Edges                                FinancialInstitutionEdges `json:"edges"`
	fiat_currency_financial_institutions *uuid.UUID
	selectValues                         sql.SelectValues
}

// FinancialInstitutionEdges holds the relations/edges for other nodes in the graph.
type FinancialInstitutionEdges struct {
	// Fiat holds the value of the fiat edge.
	Fiat *FiatCurrency `json:"fiat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FiatOrErr returns the Fiat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinancialInstitutionEdges) FiatOrErr() (*FiatCurrency, error) {
	if e.loadedTypes[0] {
		if e.Fiat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fiatcurrency.Label}
		}
		return e.Fiat, nil
	}
	return nil, &NotLoadedError{edge: "fiat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FinancialInstitution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case financialinstitution.FieldID:
			values[i] = new(sql.NullInt64)
		case financialinstitution.FieldCode, financialinstitution.FieldName, financialinstitution.FieldType:
			values[i] = new(sql.NullString)
		case financialinstitution.FieldCreatedAt, financialinstitution.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case financialinstitution.ForeignKeys[0]: // fiat_currency_financial_institutions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FinancialInstitution fields.
func (fi *FinancialInstitution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case financialinstitution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case financialinstitution.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				fi.Code = value.String
			}
		case financialinstitution.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fi.Name = value.String
			}
		case financialinstitution.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				fi.Type = value.String
			}
		case financialinstitution.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Time
			}
		case financialinstitution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		case financialinstitution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_currency_financial_institutions", values[i])
			} else if value.Valid {
				fi.fiat_currency_financial_institutions = new(uuid.UUID)
				*fi.fiat_currency_financial_institutions = *value.S.(*uuid.UUID)
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FinancialInstitution.
// This includes values selected through modifiers, order, etc.
func (fi *FinancialInstitution) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryFiat queries the "fiat" edge of the FinancialInstitution entity.
func (fi *FinancialInstitution) QueryFiat() *FiatCurrencyQuery {
	return NewFinancialInstitutionClient(fi.config).QueryFiat(fi)
}

// Update returns a builder for updating this FinancialInstitution.
// Note that you need to call FinancialInstitution.Unwrap() before calling this method if this FinancialInstitution
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FinancialInstitution) Update() *FinancialInstitutionUpdateOne {
	return NewFinancialInstitutionClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FinancialInstitution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FinancialInstitution) Unwrap() *FinancialInstitution {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FinancialInstitution is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FinancialInstitution) String() string {
	var builder strings.Builder
	builder.WriteString("FinancialInstitution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("code=")
	builder.WriteString(fi.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fi.Name)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(fi.Type)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FinancialInstitutions is a parsable slice of FinancialInstitution.
type FinancialInstitutions []*FinancialInstitution
