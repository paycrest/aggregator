// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/predicate"
)

// PaymentOrderRecipientUpdate is the builder for updating PaymentOrderRecipient entities.
type PaymentOrderRecipientUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentOrderRecipientMutation
}

// Where appends a list predicates to the PaymentOrderRecipientUpdate builder.
func (poru *PaymentOrderRecipientUpdate) Where(ps ...predicate.PaymentOrderRecipient) *PaymentOrderRecipientUpdate {
	poru.mutation.Where(ps...)
	return poru
}

// SetInstitution sets the "institution" field.
func (poru *PaymentOrderRecipientUpdate) SetInstitution(s string) *PaymentOrderRecipientUpdate {
	poru.mutation.SetInstitution(s)
	return poru
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (poru *PaymentOrderRecipientUpdate) SetNillableInstitution(s *string) *PaymentOrderRecipientUpdate {
	if s != nil {
		poru.SetInstitution(*s)
	}
	return poru
}

// SetAccountIdentifier sets the "account_identifier" field.
func (poru *PaymentOrderRecipientUpdate) SetAccountIdentifier(s string) *PaymentOrderRecipientUpdate {
	poru.mutation.SetAccountIdentifier(s)
	return poru
}

// SetNillableAccountIdentifier sets the "account_identifier" field if the given value is not nil.
func (poru *PaymentOrderRecipientUpdate) SetNillableAccountIdentifier(s *string) *PaymentOrderRecipientUpdate {
	if s != nil {
		poru.SetAccountIdentifier(*s)
	}
	return poru
}

// SetAccountName sets the "account_name" field.
func (poru *PaymentOrderRecipientUpdate) SetAccountName(s string) *PaymentOrderRecipientUpdate {
	poru.mutation.SetAccountName(s)
	return poru
}

// SetNillableAccountName sets the "account_name" field if the given value is not nil.
func (poru *PaymentOrderRecipientUpdate) SetNillableAccountName(s *string) *PaymentOrderRecipientUpdate {
	if s != nil {
		poru.SetAccountName(*s)
	}
	return poru
}

// SetMemo sets the "memo" field.
func (poru *PaymentOrderRecipientUpdate) SetMemo(s string) *PaymentOrderRecipientUpdate {
	poru.mutation.SetMemo(s)
	return poru
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (poru *PaymentOrderRecipientUpdate) SetNillableMemo(s *string) *PaymentOrderRecipientUpdate {
	if s != nil {
		poru.SetMemo(*s)
	}
	return poru
}

// ClearMemo clears the value of the "memo" field.
func (poru *PaymentOrderRecipientUpdate) ClearMemo() *PaymentOrderRecipientUpdate {
	poru.mutation.ClearMemo()
	return poru
}

// SetProviderID sets the "provider_id" field.
func (poru *PaymentOrderRecipientUpdate) SetProviderID(s string) *PaymentOrderRecipientUpdate {
	poru.mutation.SetProviderID(s)
	return poru
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (poru *PaymentOrderRecipientUpdate) SetNillableProviderID(s *string) *PaymentOrderRecipientUpdate {
	if s != nil {
		poru.SetProviderID(*s)
	}
	return poru
}

// ClearProviderID clears the value of the "provider_id" field.
func (poru *PaymentOrderRecipientUpdate) ClearProviderID() *PaymentOrderRecipientUpdate {
	poru.mutation.ClearProviderID()
	return poru
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (poru *PaymentOrderRecipientUpdate) SetPaymentOrderID(id uuid.UUID) *PaymentOrderRecipientUpdate {
	poru.mutation.SetPaymentOrderID(id)
	return poru
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (poru *PaymentOrderRecipientUpdate) SetPaymentOrder(p *PaymentOrder) *PaymentOrderRecipientUpdate {
	return poru.SetPaymentOrderID(p.ID)
}

// Mutation returns the PaymentOrderRecipientMutation object of the builder.
func (poru *PaymentOrderRecipientUpdate) Mutation() *PaymentOrderRecipientMutation {
	return poru.mutation
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (poru *PaymentOrderRecipientUpdate) ClearPaymentOrder() *PaymentOrderRecipientUpdate {
	poru.mutation.ClearPaymentOrder()
	return poru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (poru *PaymentOrderRecipientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, poru.sqlSave, poru.mutation, poru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (poru *PaymentOrderRecipientUpdate) SaveX(ctx context.Context) int {
	affected, err := poru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (poru *PaymentOrderRecipientUpdate) Exec(ctx context.Context) error {
	_, err := poru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poru *PaymentOrderRecipientUpdate) ExecX(ctx context.Context) {
	if err := poru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poru *PaymentOrderRecipientUpdate) check() error {
	if poru.mutation.PaymentOrderCleared() && len(poru.mutation.PaymentOrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentOrderRecipient.payment_order"`)
	}
	return nil
}

func (poru *PaymentOrderRecipientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := poru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorderrecipient.Table, paymentorderrecipient.Columns, sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt))
	if ps := poru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poru.mutation.Institution(); ok {
		_spec.SetField(paymentorderrecipient.FieldInstitution, field.TypeString, value)
	}
	if value, ok := poru.mutation.AccountIdentifier(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountIdentifier, field.TypeString, value)
	}
	if value, ok := poru.mutation.AccountName(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountName, field.TypeString, value)
	}
	if value, ok := poru.mutation.Memo(); ok {
		_spec.SetField(paymentorderrecipient.FieldMemo, field.TypeString, value)
	}
	if poru.mutation.MemoCleared() {
		_spec.ClearField(paymentorderrecipient.FieldMemo, field.TypeString)
	}
	if value, ok := poru.mutation.ProviderID(); ok {
		_spec.SetField(paymentorderrecipient.FieldProviderID, field.TypeString, value)
	}
	if poru.mutation.ProviderIDCleared() {
		_spec.ClearField(paymentorderrecipient.FieldProviderID, field.TypeString)
	}
	if poru.mutation.PaymentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentorderrecipient.PaymentOrderTable,
			Columns: []string{paymentorderrecipient.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poru.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentorderrecipient.PaymentOrderTable,
			Columns: []string{paymentorderrecipient.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, poru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorderrecipient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	poru.mutation.done = true
	return n, nil
}

// PaymentOrderRecipientUpdateOne is the builder for updating a single PaymentOrderRecipient entity.
type PaymentOrderRecipientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentOrderRecipientMutation
}

// SetInstitution sets the "institution" field.
func (poruo *PaymentOrderRecipientUpdateOne) SetInstitution(s string) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetInstitution(s)
	return poruo
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (poruo *PaymentOrderRecipientUpdateOne) SetNillableInstitution(s *string) *PaymentOrderRecipientUpdateOne {
	if s != nil {
		poruo.SetInstitution(*s)
	}
	return poruo
}

// SetAccountIdentifier sets the "account_identifier" field.
func (poruo *PaymentOrderRecipientUpdateOne) SetAccountIdentifier(s string) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetAccountIdentifier(s)
	return poruo
}

// SetNillableAccountIdentifier sets the "account_identifier" field if the given value is not nil.
func (poruo *PaymentOrderRecipientUpdateOne) SetNillableAccountIdentifier(s *string) *PaymentOrderRecipientUpdateOne {
	if s != nil {
		poruo.SetAccountIdentifier(*s)
	}
	return poruo
}

// SetAccountName sets the "account_name" field.
func (poruo *PaymentOrderRecipientUpdateOne) SetAccountName(s string) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetAccountName(s)
	return poruo
}

// SetNillableAccountName sets the "account_name" field if the given value is not nil.
func (poruo *PaymentOrderRecipientUpdateOne) SetNillableAccountName(s *string) *PaymentOrderRecipientUpdateOne {
	if s != nil {
		poruo.SetAccountName(*s)
	}
	return poruo
}

// SetMemo sets the "memo" field.
func (poruo *PaymentOrderRecipientUpdateOne) SetMemo(s string) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetMemo(s)
	return poruo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (poruo *PaymentOrderRecipientUpdateOne) SetNillableMemo(s *string) *PaymentOrderRecipientUpdateOne {
	if s != nil {
		poruo.SetMemo(*s)
	}
	return poruo
}

// ClearMemo clears the value of the "memo" field.
func (poruo *PaymentOrderRecipientUpdateOne) ClearMemo() *PaymentOrderRecipientUpdateOne {
	poruo.mutation.ClearMemo()
	return poruo
}

// SetProviderID sets the "provider_id" field.
func (poruo *PaymentOrderRecipientUpdateOne) SetProviderID(s string) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetProviderID(s)
	return poruo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (poruo *PaymentOrderRecipientUpdateOne) SetNillableProviderID(s *string) *PaymentOrderRecipientUpdateOne {
	if s != nil {
		poruo.SetProviderID(*s)
	}
	return poruo
}

// ClearProviderID clears the value of the "provider_id" field.
func (poruo *PaymentOrderRecipientUpdateOne) ClearProviderID() *PaymentOrderRecipientUpdateOne {
	poruo.mutation.ClearProviderID()
	return poruo
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (poruo *PaymentOrderRecipientUpdateOne) SetPaymentOrderID(id uuid.UUID) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.SetPaymentOrderID(id)
	return poruo
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (poruo *PaymentOrderRecipientUpdateOne) SetPaymentOrder(p *PaymentOrder) *PaymentOrderRecipientUpdateOne {
	return poruo.SetPaymentOrderID(p.ID)
}

// Mutation returns the PaymentOrderRecipientMutation object of the builder.
func (poruo *PaymentOrderRecipientUpdateOne) Mutation() *PaymentOrderRecipientMutation {
	return poruo.mutation
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (poruo *PaymentOrderRecipientUpdateOne) ClearPaymentOrder() *PaymentOrderRecipientUpdateOne {
	poruo.mutation.ClearPaymentOrder()
	return poruo
}

// Where appends a list predicates to the PaymentOrderRecipientUpdate builder.
func (poruo *PaymentOrderRecipientUpdateOne) Where(ps ...predicate.PaymentOrderRecipient) *PaymentOrderRecipientUpdateOne {
	poruo.mutation.Where(ps...)
	return poruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (poruo *PaymentOrderRecipientUpdateOne) Select(field string, fields ...string) *PaymentOrderRecipientUpdateOne {
	poruo.fields = append([]string{field}, fields...)
	return poruo
}

// Save executes the query and returns the updated PaymentOrderRecipient entity.
func (poruo *PaymentOrderRecipientUpdateOne) Save(ctx context.Context) (*PaymentOrderRecipient, error) {
	return withHooks(ctx, poruo.sqlSave, poruo.mutation, poruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (poruo *PaymentOrderRecipientUpdateOne) SaveX(ctx context.Context) *PaymentOrderRecipient {
	node, err := poruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (poruo *PaymentOrderRecipientUpdateOne) Exec(ctx context.Context) error {
	_, err := poruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poruo *PaymentOrderRecipientUpdateOne) ExecX(ctx context.Context) {
	if err := poruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poruo *PaymentOrderRecipientUpdateOne) check() error {
	if poruo.mutation.PaymentOrderCleared() && len(poruo.mutation.PaymentOrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentOrderRecipient.payment_order"`)
	}
	return nil
}

func (poruo *PaymentOrderRecipientUpdateOne) sqlSave(ctx context.Context) (_node *PaymentOrderRecipient, err error) {
	if err := poruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorderrecipient.Table, paymentorderrecipient.Columns, sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt))
	id, ok := poruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentOrderRecipient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := poruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentorderrecipient.FieldID)
		for _, f := range fields {
			if !paymentorderrecipient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentorderrecipient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := poruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poruo.mutation.Institution(); ok {
		_spec.SetField(paymentorderrecipient.FieldInstitution, field.TypeString, value)
	}
	if value, ok := poruo.mutation.AccountIdentifier(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountIdentifier, field.TypeString, value)
	}
	if value, ok := poruo.mutation.AccountName(); ok {
		_spec.SetField(paymentorderrecipient.FieldAccountName, field.TypeString, value)
	}
	if value, ok := poruo.mutation.Memo(); ok {
		_spec.SetField(paymentorderrecipient.FieldMemo, field.TypeString, value)
	}
	if poruo.mutation.MemoCleared() {
		_spec.ClearField(paymentorderrecipient.FieldMemo, field.TypeString)
	}
	if value, ok := poruo.mutation.ProviderID(); ok {
		_spec.SetField(paymentorderrecipient.FieldProviderID, field.TypeString, value)
	}
	if poruo.mutation.ProviderIDCleared() {
		_spec.ClearField(paymentorderrecipient.FieldProviderID, field.TypeString)
	}
	if poruo.mutation.PaymentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentorderrecipient.PaymentOrderTable,
			Columns: []string{paymentorderrecipient.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poruo.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentorderrecipient.PaymentOrderTable,
			Columns: []string{paymentorderrecipient.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentOrderRecipient{config: poruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, poruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorderrecipient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	poruo.mutation.done = true
	return _node, nil
}
