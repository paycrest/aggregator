// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/user"
	"github.com/paycrest/aggregator/ent/verificationtoken"
)

// VerificationToken is the model entity for the VerificationToken schema.
type VerificationToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope verificationtoken.Scope `json:"scope,omitempty"`
	// ExpiryAt holds the value of the "expiry_at" field.
	ExpiryAt time.Time `json:"expiry_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VerificationTokenQuery when eager-loading is set.
	Edges                   VerificationTokenEdges `json:"edges"`
	user_verification_token *uuid.UUID
	selectValues            sql.SelectValues
}

// VerificationTokenEdges holds the relations/edges for other nodes in the graph.
type VerificationTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VerificationTokenEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VerificationToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verificationtoken.FieldToken, verificationtoken.FieldScope:
			values[i] = new(sql.NullString)
		case verificationtoken.FieldCreatedAt, verificationtoken.FieldUpdatedAt, verificationtoken.FieldExpiryAt:
			values[i] = new(sql.NullTime)
		case verificationtoken.FieldID:
			values[i] = new(uuid.UUID)
		case verificationtoken.ForeignKeys[0]: // user_verification_token
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VerificationToken fields.
func (vt *VerificationToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verificationtoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vt.ID = *value
			}
		case verificationtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vt.CreatedAt = value.Time
			}
		case verificationtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vt.UpdatedAt = value.Time
			}
		case verificationtoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				vt.Token = value.String
			}
		case verificationtoken.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				vt.Scope = verificationtoken.Scope(value.String)
			}
		case verificationtoken.FieldExpiryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_at", values[i])
			} else if value.Valid {
				vt.ExpiryAt = value.Time
			}
		case verificationtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_verification_token", values[i])
			} else if value.Valid {
				vt.user_verification_token = new(uuid.UUID)
				*vt.user_verification_token = *value.S.(*uuid.UUID)
			}
		default:
			vt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VerificationToken.
// This includes values selected through modifiers, order, etc.
func (vt *VerificationToken) Value(name string) (ent.Value, error) {
	return vt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the VerificationToken entity.
func (vt *VerificationToken) QueryOwner() *UserQuery {
	return NewVerificationTokenClient(vt.config).QueryOwner(vt)
}

// Update returns a builder for updating this VerificationToken.
// Note that you need to call VerificationToken.Unwrap() before calling this method if this VerificationToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VerificationToken) Update() *VerificationTokenUpdateOne {
	return NewVerificationTokenClient(vt.config).UpdateOne(vt)
}

// Unwrap unwraps the VerificationToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VerificationToken) Unwrap() *VerificationToken {
	_tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VerificationToken is not a transactional entity")
	}
	vt.config.driver = _tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VerificationToken) String() string {
	var builder strings.Builder
	builder.WriteString("VerificationToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(vt.Token)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", vt.Scope))
	builder.WriteString(", ")
	builder.WriteString("expiry_at=")
	builder.WriteString(vt.ExpiryAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VerificationTokens is a parsable slice of VerificationToken.
type VerificationTokens []*VerificationToken
