// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/providerrating"
	"github.com/shopspring/decimal"
)

// ProviderRating is the model entity for the ProviderRating schema.
type ProviderRating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TrustScore holds the value of the "trust_score" field.
	TrustScore decimal.Decimal `json:"trust_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderRatingQuery when eager-loading is set.
	Edges                            ProviderRatingEdges `json:"edges"`
	provider_profile_provider_rating *string
	selectValues                     sql.SelectValues
}

// ProviderRatingEdges holds the relations/edges for other nodes in the graph.
type ProviderRatingEdges struct {
	// ProviderProfile holds the value of the provider_profile edge.
	ProviderProfile *ProviderProfile `json:"provider_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProviderProfileOrErr returns the ProviderProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderRatingEdges) ProviderProfileOrErr() (*ProviderProfile, error) {
	if e.ProviderProfile != nil {
		return e.ProviderProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: providerprofile.Label}
	}
	return nil, &NotLoadedError{edge: "provider_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderRating) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providerrating.FieldTrustScore:
			values[i] = new(decimal.Decimal)
		case providerrating.FieldID:
			values[i] = new(sql.NullInt64)
		case providerrating.FieldCreatedAt, providerrating.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case providerrating.ForeignKeys[0]: // provider_profile_provider_rating
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderRating fields.
func (pr *ProviderRating) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providerrating.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case providerrating.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case providerrating.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case providerrating.FieldTrustScore:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field trust_score", values[i])
			} else if value != nil {
				pr.TrustScore = *value
			}
		case providerrating.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_profile_provider_rating", values[i])
			} else if value.Valid {
				pr.provider_profile_provider_rating = new(string)
				*pr.provider_profile_provider_rating = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderRating.
// This includes values selected through modifiers, order, etc.
func (pr *ProviderRating) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryProviderProfile queries the "provider_profile" edge of the ProviderRating entity.
func (pr *ProviderRating) QueryProviderProfile() *ProviderProfileQuery {
	return NewProviderRatingClient(pr.config).QueryProviderProfile(pr)
}

// Update returns a builder for updating this ProviderRating.
// Note that you need to call ProviderRating.Unwrap() before calling this method if this ProviderRating
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProviderRating) Update() *ProviderRatingUpdateOne {
	return NewProviderRatingClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProviderRating entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProviderRating) Unwrap() *ProviderRating {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderRating is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProviderRating) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderRating(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trust_score=")
	builder.WriteString(fmt.Sprintf("%v", pr.TrustScore))
	builder.WriteByte(')')
	return builder.String()
}

// ProviderRatings is a parsable slice of ProviderRating.
type ProviderRatings []*ProviderRating
