// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBFormSubmission is the model entity for the KYBFormSubmission schema.
type KYBFormSubmission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// RegisteredBusinessAddress holds the value of the "registered_business_address" field.
	RegisteredBusinessAddress string `json:"registered_business_address,omitempty"`
	// CertificateOfIncorporationURL holds the value of the "certificate_of_incorporation_url" field.
	CertificateOfIncorporationURL string `json:"certificate_of_incorporation_url,omitempty"`
	// ArticlesOfIncorporationURL holds the value of the "articles_of_incorporation_url" field.
	ArticlesOfIncorporationURL string `json:"articles_of_incorporation_url,omitempty"`
	// BusinessLicenseURL holds the value of the "business_license_url" field.
	BusinessLicenseURL *string `json:"business_license_url,omitempty"`
	// ProofOfBusinessAddressURL holds the value of the "proof_of_business_address_url" field.
	ProofOfBusinessAddressURL string `json:"proof_of_business_address_url,omitempty"`
	// ProofOfResidentialAddressURL holds the value of the "proof_of_residential_address_url" field.
	ProofOfResidentialAddressURL string `json:"proof_of_residential_address_url,omitempty"`
	// AmlPolicyURL holds the value of the "aml_policy_url" field.
	AmlPolicyURL *string `json:"aml_policy_url,omitempty"`
	// KycPolicyURL holds the value of the "kyc_policy_url" field.
	KycPolicyURL *string `json:"kyc_policy_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KYBFormSubmissionQuery when eager-loading is set.
	Edges                    KYBFormSubmissionEdges `json:"edges"`
	kyb_form_submission_user *uuid.UUID
	selectValues             sql.SelectValues
}

// KYBFormSubmissionEdges holds the relations/edges for other nodes in the graph.
type KYBFormSubmissionEdges struct {
	// BeneficialOwners holds the value of the beneficial_owners edge.
	BeneficialOwners []*BeneficialOwner `json:"beneficial_owners,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BeneficialOwnersOrErr returns the BeneficialOwners value or an error if the edge
// was not loaded in eager-loading.
func (e KYBFormSubmissionEdges) BeneficialOwnersOrErr() ([]*BeneficialOwner, error) {
	if e.loadedTypes[0] {
		return e.BeneficialOwners, nil
	}
	return nil, &NotLoadedError{edge: "beneficial_owners"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KYBFormSubmissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KYBFormSubmission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kybformsubmission.FieldEmail, kybformsubmission.FieldCompanyName, kybformsubmission.FieldRegisteredBusinessAddress, kybformsubmission.FieldCertificateOfIncorporationURL, kybformsubmission.FieldArticlesOfIncorporationURL, kybformsubmission.FieldBusinessLicenseURL, kybformsubmission.FieldProofOfBusinessAddressURL, kybformsubmission.FieldProofOfResidentialAddressURL, kybformsubmission.FieldAmlPolicyURL, kybformsubmission.FieldKycPolicyURL:
			values[i] = new(sql.NullString)
		case kybformsubmission.FieldCreatedAt, kybformsubmission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case kybformsubmission.FieldID:
			values[i] = new(uuid.UUID)
		case kybformsubmission.ForeignKeys[0]: // kyb_form_submission_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KYBFormSubmission fields.
func (kfs *KYBFormSubmission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kybformsubmission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				kfs.ID = *value
			}
		case kybformsubmission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kfs.CreatedAt = value.Time
			}
		case kybformsubmission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kfs.UpdatedAt = value.Time
			}
		case kybformsubmission.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				kfs.Email = value.String
			}
		case kybformsubmission.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				kfs.CompanyName = value.String
			}
		case kybformsubmission.FieldRegisteredBusinessAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registered_business_address", values[i])
			} else if value.Valid {
				kfs.RegisteredBusinessAddress = value.String
			}
		case kybformsubmission.FieldCertificateOfIncorporationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_of_incorporation_url", values[i])
			} else if value.Valid {
				kfs.CertificateOfIncorporationURL = value.String
			}
		case kybformsubmission.FieldArticlesOfIncorporationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field articles_of_incorporation_url", values[i])
			} else if value.Valid {
				kfs.ArticlesOfIncorporationURL = value.String
			}
		case kybformsubmission.FieldBusinessLicenseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_license_url", values[i])
			} else if value.Valid {
				kfs.BusinessLicenseURL = new(string)
				*kfs.BusinessLicenseURL = value.String
			}
		case kybformsubmission.FieldProofOfBusinessAddressURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proof_of_business_address_url", values[i])
			} else if value.Valid {
				kfs.ProofOfBusinessAddressURL = value.String
			}
		case kybformsubmission.FieldProofOfResidentialAddressURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proof_of_residential_address_url", values[i])
			} else if value.Valid {
				kfs.ProofOfResidentialAddressURL = value.String
			}
		case kybformsubmission.FieldAmlPolicyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aml_policy_url", values[i])
			} else if value.Valid {
				kfs.AmlPolicyURL = new(string)
				*kfs.AmlPolicyURL = value.String
			}
		case kybformsubmission.FieldKycPolicyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kyc_policy_url", values[i])
			} else if value.Valid {
				kfs.KycPolicyURL = new(string)
				*kfs.KycPolicyURL = value.String
			}
		case kybformsubmission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field kyb_form_submission_user", values[i])
			} else if value.Valid {
				kfs.kyb_form_submission_user = new(uuid.UUID)
				*kfs.kyb_form_submission_user = *value.S.(*uuid.UUID)
			}
		default:
			kfs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KYBFormSubmission.
// This includes values selected through modifiers, order, etc.
func (kfs *KYBFormSubmission) Value(name string) (ent.Value, error) {
	return kfs.selectValues.Get(name)
}

// QueryBeneficialOwners queries the "beneficial_owners" edge of the KYBFormSubmission entity.
func (kfs *KYBFormSubmission) QueryBeneficialOwners() *BeneficialOwnerQuery {
	return NewKYBFormSubmissionClient(kfs.config).QueryBeneficialOwners(kfs)
}

// QueryUser queries the "user" edge of the KYBFormSubmission entity.
func (kfs *KYBFormSubmission) QueryUser() *UserQuery {
	return NewKYBFormSubmissionClient(kfs.config).QueryUser(kfs)
}

// Update returns a builder for updating this KYBFormSubmission.
// Note that you need to call KYBFormSubmission.Unwrap() before calling this method if this KYBFormSubmission
// was returned from a transaction, and the transaction was committed or rolled back.
func (kfs *KYBFormSubmission) Update() *KYBFormSubmissionUpdateOne {
	return NewKYBFormSubmissionClient(kfs.config).UpdateOne(kfs)
}

// Unwrap unwraps the KYBFormSubmission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kfs *KYBFormSubmission) Unwrap() *KYBFormSubmission {
	_tx, ok := kfs.config.driver.(*txDriver)
	if !ok {
		panic("ent: KYBFormSubmission is not a transactional entity")
	}
	kfs.config.driver = _tx.drv
	return kfs
}

// String implements the fmt.Stringer.
func (kfs *KYBFormSubmission) String() string {
	var builder strings.Builder
	builder.WriteString("KYBFormSubmission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kfs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(kfs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(kfs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(kfs.Email)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(kfs.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("registered_business_address=")
	builder.WriteString(kfs.RegisteredBusinessAddress)
	builder.WriteString(", ")
	builder.WriteString("certificate_of_incorporation_url=")
	builder.WriteString(kfs.CertificateOfIncorporationURL)
	builder.WriteString(", ")
	builder.WriteString("articles_of_incorporation_url=")
	builder.WriteString(kfs.ArticlesOfIncorporationURL)
	builder.WriteString(", ")
	if v := kfs.BusinessLicenseURL; v != nil {
		builder.WriteString("business_license_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("proof_of_business_address_url=")
	builder.WriteString(kfs.ProofOfBusinessAddressURL)
	builder.WriteString(", ")
	builder.WriteString("proof_of_residential_address_url=")
	builder.WriteString(kfs.ProofOfResidentialAddressURL)
	builder.WriteString(", ")
	if v := kfs.AmlPolicyURL; v != nil {
		builder.WriteString("aml_policy_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := kfs.KycPolicyURL; v != nil {
		builder.WriteString("kyc_policy_url=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// KYBFormSubmissions is a parsable slice of KYBFormSubmission.
type KYBFormSubmissions []*KYBFormSubmission
