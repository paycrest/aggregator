// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybprofile"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBProfileQuery is the builder for querying KYBProfile entities.
type KYBProfileQuery struct {
	config
	ctx                  *QueryContext
	order                []kybprofile.OrderOption
	inters               []Interceptor
	predicates           []predicate.KYBProfile
	withBeneficialOwners *BeneficialOwnerQuery
	withUser             *UserQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KYBProfileQuery builder.
func (kpq *KYBProfileQuery) Where(ps ...predicate.KYBProfile) *KYBProfileQuery {
	kpq.predicates = append(kpq.predicates, ps...)
	return kpq
}

// Limit the number of records to be returned by this query.
func (kpq *KYBProfileQuery) Limit(limit int) *KYBProfileQuery {
	kpq.ctx.Limit = &limit
	return kpq
}

// Offset to start from.
func (kpq *KYBProfileQuery) Offset(offset int) *KYBProfileQuery {
	kpq.ctx.Offset = &offset
	return kpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kpq *KYBProfileQuery) Unique(unique bool) *KYBProfileQuery {
	kpq.ctx.Unique = &unique
	return kpq
}

// Order specifies how the records should be ordered.
func (kpq *KYBProfileQuery) Order(o ...kybprofile.OrderOption) *KYBProfileQuery {
	kpq.order = append(kpq.order, o...)
	return kpq
}

// QueryBeneficialOwners chains the current query on the "beneficial_owners" edge.
func (kpq *KYBProfileQuery) QueryBeneficialOwners() *BeneficialOwnerQuery {
	query := (&BeneficialOwnerClient{config: kpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kybprofile.Table, kybprofile.FieldID, selector),
			sqlgraph.To(beneficialowner.Table, beneficialowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kybprofile.BeneficialOwnersTable, kybprofile.BeneficialOwnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (kpq *KYBProfileQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: kpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kybprofile.Table, kybprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kybprofile.UserTable, kybprofile.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(kpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KYBProfile entity from the query.
// Returns a *NotFoundError when no KYBProfile was found.
func (kpq *KYBProfileQuery) First(ctx context.Context) (*KYBProfile, error) {
	nodes, err := kpq.Limit(1).All(setContextOp(ctx, kpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kybprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kpq *KYBProfileQuery) FirstX(ctx context.Context) *KYBProfile {
	node, err := kpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KYBProfile ID from the query.
// Returns a *NotFoundError when no KYBProfile ID was found.
func (kpq *KYBProfileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = kpq.Limit(1).IDs(setContextOp(ctx, kpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kybprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kpq *KYBProfileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := kpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KYBProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KYBProfile entity is found.
// Returns a *NotFoundError when no KYBProfile entities are found.
func (kpq *KYBProfileQuery) Only(ctx context.Context) (*KYBProfile, error) {
	nodes, err := kpq.Limit(2).All(setContextOp(ctx, kpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kybprofile.Label}
	default:
		return nil, &NotSingularError{kybprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kpq *KYBProfileQuery) OnlyX(ctx context.Context) *KYBProfile {
	node, err := kpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KYBProfile ID in the query.
// Returns a *NotSingularError when more than one KYBProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (kpq *KYBProfileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = kpq.Limit(2).IDs(setContextOp(ctx, kpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kybprofile.Label}
	default:
		err = &NotSingularError{kybprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kpq *KYBProfileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := kpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KYBProfiles.
func (kpq *KYBProfileQuery) All(ctx context.Context) ([]*KYBProfile, error) {
	ctx = setContextOp(ctx, kpq.ctx, ent.OpQueryAll)
	if err := kpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KYBProfile, *KYBProfileQuery]()
	return withInterceptors[[]*KYBProfile](ctx, kpq, qr, kpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (kpq *KYBProfileQuery) AllX(ctx context.Context) []*KYBProfile {
	nodes, err := kpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KYBProfile IDs.
func (kpq *KYBProfileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if kpq.ctx.Unique == nil && kpq.path != nil {
		kpq.Unique(true)
	}
	ctx = setContextOp(ctx, kpq.ctx, ent.OpQueryIDs)
	if err = kpq.Select(kybprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kpq *KYBProfileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := kpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kpq *KYBProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, kpq.ctx, ent.OpQueryCount)
	if err := kpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, kpq, querierCount[*KYBProfileQuery](), kpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (kpq *KYBProfileQuery) CountX(ctx context.Context) int {
	count, err := kpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kpq *KYBProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, kpq.ctx, ent.OpQueryExist)
	switch _, err := kpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (kpq *KYBProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := kpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KYBProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kpq *KYBProfileQuery) Clone() *KYBProfileQuery {
	if kpq == nil {
		return nil
	}
	return &KYBProfileQuery{
		config:               kpq.config,
		ctx:                  kpq.ctx.Clone(),
		order:                append([]kybprofile.OrderOption{}, kpq.order...),
		inters:               append([]Interceptor{}, kpq.inters...),
		predicates:           append([]predicate.KYBProfile{}, kpq.predicates...),
		withBeneficialOwners: kpq.withBeneficialOwners.Clone(),
		withUser:             kpq.withUser.Clone(),
		// clone intermediate query.
		sql:  kpq.sql.Clone(),
		path: kpq.path,
	}
}

// WithBeneficialOwners tells the query-builder to eager-load the nodes that are connected to
// the "beneficial_owners" edge. The optional arguments are used to configure the query builder of the edge.
func (kpq *KYBProfileQuery) WithBeneficialOwners(opts ...func(*BeneficialOwnerQuery)) *KYBProfileQuery {
	query := (&BeneficialOwnerClient{config: kpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kpq.withBeneficialOwners = query
	return kpq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (kpq *KYBProfileQuery) WithUser(opts ...func(*UserQuery)) *KYBProfileQuery {
	query := (&UserClient{config: kpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kpq.withUser = query
	return kpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KYBProfile.Query().
//		GroupBy(kybprofile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (kpq *KYBProfileQuery) GroupBy(field string, fields ...string) *KYBProfileGroupBy {
	kpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KYBProfileGroupBy{build: kpq}
	grbuild.flds = &kpq.ctx.Fields
	grbuild.label = kybprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.KYBProfile.Query().
//		Select(kybprofile.FieldCreatedAt).
//		Scan(ctx, &v)
func (kpq *KYBProfileQuery) Select(fields ...string) *KYBProfileSelect {
	kpq.ctx.Fields = append(kpq.ctx.Fields, fields...)
	sbuild := &KYBProfileSelect{KYBProfileQuery: kpq}
	sbuild.label = kybprofile.Label
	sbuild.flds, sbuild.scan = &kpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KYBProfileSelect configured with the given aggregations.
func (kpq *KYBProfileQuery) Aggregate(fns ...AggregateFunc) *KYBProfileSelect {
	return kpq.Select().Aggregate(fns...)
}

func (kpq *KYBProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range kpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, kpq); err != nil {
				return err
			}
		}
	}
	for _, f := range kpq.ctx.Fields {
		if !kybprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kpq.path != nil {
		prev, err := kpq.path(ctx)
		if err != nil {
			return err
		}
		kpq.sql = prev
	}
	return nil
}

func (kpq *KYBProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KYBProfile, error) {
	var (
		nodes       = []*KYBProfile{}
		withFKs     = kpq.withFKs
		_spec       = kpq.querySpec()
		loadedTypes = [2]bool{
			kpq.withBeneficialOwners != nil,
			kpq.withUser != nil,
		}
	)
	if kpq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, kybprofile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KYBProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KYBProfile{config: kpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := kpq.withBeneficialOwners; query != nil {
		if err := kpq.loadBeneficialOwners(ctx, query, nodes,
			func(n *KYBProfile) { n.Edges.BeneficialOwners = []*BeneficialOwner{} },
			func(n *KYBProfile, e *BeneficialOwner) {
				n.Edges.BeneficialOwners = append(n.Edges.BeneficialOwners, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := kpq.withUser; query != nil {
		if err := kpq.loadUser(ctx, query, nodes, nil,
			func(n *KYBProfile, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (kpq *KYBProfileQuery) loadBeneficialOwners(ctx context.Context, query *BeneficialOwnerQuery, nodes []*KYBProfile, init func(*KYBProfile), assign func(*KYBProfile, *BeneficialOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*KYBProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BeneficialOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kybprofile.BeneficialOwnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kyb_profile_beneficial_owners
		if fk == nil {
			return fmt.Errorf(`foreign-key "kyb_profile_beneficial_owners" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kyb_profile_beneficial_owners" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kpq *KYBProfileQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*KYBProfile, init func(*KYBProfile), assign func(*KYBProfile, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*KYBProfile)
	for i := range nodes {
		if nodes[i].user_kyb_profile == nil {
			continue
		}
		fk := *nodes[i].user_kyb_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_kyb_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (kpq *KYBProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kpq.querySpec()
	_spec.Node.Columns = kpq.ctx.Fields
	if len(kpq.ctx.Fields) > 0 {
		_spec.Unique = kpq.ctx.Unique != nil && *kpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, kpq.driver, _spec)
}

func (kpq *KYBProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kybprofile.Table, kybprofile.Columns, sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID))
	_spec.From = kpq.sql
	if unique := kpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if kpq.path != nil {
		_spec.Unique = true
	}
	if fields := kpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kybprofile.FieldID)
		for i := range fields {
			if fields[i] != kybprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kpq *KYBProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kpq.driver.Dialect())
	t1 := builder.Table(kybprofile.Table)
	columns := kpq.ctx.Fields
	if len(columns) == 0 {
		columns = kybprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kpq.sql != nil {
		selector = kpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kpq.ctx.Unique != nil && *kpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range kpq.predicates {
		p(selector)
	}
	for _, p := range kpq.order {
		p(selector)
	}
	if offset := kpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KYBProfileGroupBy is the group-by builder for KYBProfile entities.
type KYBProfileGroupBy struct {
	selector
	build *KYBProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kpgb *KYBProfileGroupBy) Aggregate(fns ...AggregateFunc) *KYBProfileGroupBy {
	kpgb.fns = append(kpgb.fns, fns...)
	return kpgb
}

// Scan applies the selector query and scans the result into the given value.
func (kpgb *KYBProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kpgb.build.ctx, ent.OpQueryGroupBy)
	if err := kpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KYBProfileQuery, *KYBProfileGroupBy](ctx, kpgb.build, kpgb, kpgb.build.inters, v)
}

func (kpgb *KYBProfileGroupBy) sqlScan(ctx context.Context, root *KYBProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kpgb.fns))
	for _, fn := range kpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kpgb.flds)+len(kpgb.fns))
		for _, f := range *kpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KYBProfileSelect is the builder for selecting fields of KYBProfile entities.
type KYBProfileSelect struct {
	*KYBProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kps *KYBProfileSelect) Aggregate(fns ...AggregateFunc) *KYBProfileSelect {
	kps.fns = append(kps.fns, fns...)
	return kps
}

// Scan applies the selector query and scans the result into the given value.
func (kps *KYBProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kps.ctx, ent.OpQuerySelect)
	if err := kps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KYBProfileQuery, *KYBProfileSelect](ctx, kps.KYBProfileQuery, kps, kps.inters, v)
}

func (kps *KYBProfileSelect) sqlScan(ctx context.Context, root *KYBProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kps.fns))
	for _, fn := range kps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
