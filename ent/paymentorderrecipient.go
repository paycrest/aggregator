// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
)

// PaymentOrderRecipient is the model entity for the PaymentOrderRecipient schema.
type PaymentOrderRecipient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Institution holds the value of the "institution" field.
	Institution string `json:"institution,omitempty"`
	// AccountIdentifier holds the value of the "account_identifier" field.
	AccountIdentifier string `json:"account_identifier,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentOrderRecipientQuery when eager-loading is set.
	Edges                   PaymentOrderRecipientEdges `json:"edges"`
	payment_order_recipient *uuid.UUID
	selectValues            sql.SelectValues
}

// PaymentOrderRecipientEdges holds the relations/edges for other nodes in the graph.
type PaymentOrderRecipientEdges struct {
	// PaymentOrder holds the value of the payment_order edge.
	PaymentOrder *PaymentOrder `json:"payment_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentOrderOrErr returns the PaymentOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderRecipientEdges) PaymentOrderOrErr() (*PaymentOrder, error) {
	if e.PaymentOrder != nil {
		return e.PaymentOrder, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentorder.Label}
	}
	return nil, &NotLoadedError{edge: "payment_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentOrderRecipient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentorderrecipient.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentorderrecipient.FieldInstitution, paymentorderrecipient.FieldAccountIdentifier, paymentorderrecipient.FieldAccountName, paymentorderrecipient.FieldMemo, paymentorderrecipient.FieldProviderID:
			values[i] = new(sql.NullString)
		case paymentorderrecipient.ForeignKeys[0]: // payment_order_recipient
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentOrderRecipient fields.
func (por *PaymentOrderRecipient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentorderrecipient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			por.ID = int(value.Int64)
		case paymentorderrecipient.FieldInstitution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution", values[i])
			} else if value.Valid {
				por.Institution = value.String
			}
		case paymentorderrecipient.FieldAccountIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_identifier", values[i])
			} else if value.Valid {
				por.AccountIdentifier = value.String
			}
		case paymentorderrecipient.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				por.AccountName = value.String
			}
		case paymentorderrecipient.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				por.Memo = value.String
			}
		case paymentorderrecipient.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				por.ProviderID = value.String
			}
		case paymentorderrecipient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field payment_order_recipient", values[i])
			} else if value.Valid {
				por.payment_order_recipient = new(uuid.UUID)
				*por.payment_order_recipient = *value.S.(*uuid.UUID)
			}
		default:
			por.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentOrderRecipient.
// This includes values selected through modifiers, order, etc.
func (por *PaymentOrderRecipient) Value(name string) (ent.Value, error) {
	return por.selectValues.Get(name)
}

// QueryPaymentOrder queries the "payment_order" edge of the PaymentOrderRecipient entity.
func (por *PaymentOrderRecipient) QueryPaymentOrder() *PaymentOrderQuery {
	return NewPaymentOrderRecipientClient(por.config).QueryPaymentOrder(por)
}

// Update returns a builder for updating this PaymentOrderRecipient.
// Note that you need to call PaymentOrderRecipient.Unwrap() before calling this method if this PaymentOrderRecipient
// was returned from a transaction, and the transaction was committed or rolled back.
func (por *PaymentOrderRecipient) Update() *PaymentOrderRecipientUpdateOne {
	return NewPaymentOrderRecipientClient(por.config).UpdateOne(por)
}

// Unwrap unwraps the PaymentOrderRecipient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (por *PaymentOrderRecipient) Unwrap() *PaymentOrderRecipient {
	_tx, ok := por.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentOrderRecipient is not a transactional entity")
	}
	por.config.driver = _tx.drv
	return por
}

// String implements the fmt.Stringer.
func (por *PaymentOrderRecipient) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentOrderRecipient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", por.ID))
	builder.WriteString("institution=")
	builder.WriteString(por.Institution)
	builder.WriteString(", ")
	builder.WriteString("account_identifier=")
	builder.WriteString(por.AccountIdentifier)
	builder.WriteString(", ")
	builder.WriteString("account_name=")
	builder.WriteString(por.AccountName)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(por.Memo)
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(por.ProviderID)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentOrderRecipients is a parsable slice of PaymentOrderRecipient.
type PaymentOrderRecipients []*PaymentOrderRecipient
