// Code generated by ent, DO NOT EDIT.

package provisionbucket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLTE(FieldID, id))
}

// MinAmount applies equality check predicate on the "min_amount" field. It's identical to MinAmountEQ.
func MinAmount(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldMinAmount, v))
}

// MaxAmount applies equality check predicate on the "max_amount" field. It's identical to MaxAmountEQ.
func MaxAmount(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldMaxAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldCreatedAt, v))
}

// MinAmountEQ applies the EQ predicate on the "min_amount" field.
func MinAmountEQ(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldMinAmount, v))
}

// MinAmountNEQ applies the NEQ predicate on the "min_amount" field.
func MinAmountNEQ(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNEQ(FieldMinAmount, v))
}

// MinAmountIn applies the In predicate on the "min_amount" field.
func MinAmountIn(vs ...decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldIn(FieldMinAmount, vs...))
}

// MinAmountNotIn applies the NotIn predicate on the "min_amount" field.
func MinAmountNotIn(vs ...decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNotIn(FieldMinAmount, vs...))
}

// MinAmountGT applies the GT predicate on the "min_amount" field.
func MinAmountGT(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGT(FieldMinAmount, v))
}

// MinAmountGTE applies the GTE predicate on the "min_amount" field.
func MinAmountGTE(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGTE(FieldMinAmount, v))
}

// MinAmountLT applies the LT predicate on the "min_amount" field.
func MinAmountLT(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLT(FieldMinAmount, v))
}

// MinAmountLTE applies the LTE predicate on the "min_amount" field.
func MinAmountLTE(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLTE(FieldMinAmount, v))
}

// MaxAmountEQ applies the EQ predicate on the "max_amount" field.
func MaxAmountEQ(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldMaxAmount, v))
}

// MaxAmountNEQ applies the NEQ predicate on the "max_amount" field.
func MaxAmountNEQ(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNEQ(FieldMaxAmount, v))
}

// MaxAmountIn applies the In predicate on the "max_amount" field.
func MaxAmountIn(vs ...decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldIn(FieldMaxAmount, vs...))
}

// MaxAmountNotIn applies the NotIn predicate on the "max_amount" field.
func MaxAmountNotIn(vs ...decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNotIn(FieldMaxAmount, vs...))
}

// MaxAmountGT applies the GT predicate on the "max_amount" field.
func MaxAmountGT(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGT(FieldMaxAmount, v))
}

// MaxAmountGTE applies the GTE predicate on the "max_amount" field.
func MaxAmountGTE(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGTE(FieldMaxAmount, v))
}

// MaxAmountLT applies the LT predicate on the "max_amount" field.
func MaxAmountLT(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLT(FieldMaxAmount, v))
}

// MaxAmountLTE applies the LTE predicate on the "max_amount" field.
func MaxAmountLTE(v decimal.Decimal) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLTE(FieldMaxAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.FieldLTE(FieldCreatedAt, v))
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.FiatCurrency) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLockPaymentOrders applies the HasEdge predicate on the "lock_payment_orders" edge.
func HasLockPaymentOrders() predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LockPaymentOrdersTable, LockPaymentOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLockPaymentOrdersWith applies the HasEdge predicate on the "lock_payment_orders" edge with a given conditions (other predicates).
func HasLockPaymentOrdersWith(preds ...predicate.LockPaymentOrder) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := newLockPaymentOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderProfiles applies the HasEdge predicate on the "provider_profiles" edge.
func HasProviderProfiles() predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProviderProfilesTable, ProviderProfilesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderProfilesWith applies the HasEdge predicate on the "provider_profiles" edge with a given conditions (other predicates).
func HasProviderProfilesWith(preds ...predicate.ProviderProfile) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(func(s *sql.Selector) {
		step := newProviderProfilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisionBucket) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisionBucket) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisionBucket) predicate.ProvisionBucket {
	return predicate.ProvisionBucket(sql.NotPredicates(p))
}
