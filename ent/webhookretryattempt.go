// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/paycrest/aggregator/ent/webhookretryattempt"
)

// WebhookRetryAttempt is the model entity for the WebhookRetryAttempt schema.
type WebhookRetryAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AttemptNumber holds the value of the "attempt_number" field.
	AttemptNumber int `json:"attempt_number,omitempty"`
	// NextRetryTime holds the value of the "next_retry_time" field.
	NextRetryTime time.Time `json:"next_retry_time,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// WebhookURL holds the value of the "webhook_url" field.
	WebhookURL string `json:"webhook_url,omitempty"`
	// Status holds the value of the "status" field.
	Status       webhookretryattempt.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebhookRetryAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhookretryattempt.FieldPayload:
			values[i] = new([]byte)
		case webhookretryattempt.FieldID, webhookretryattempt.FieldAttemptNumber:
			values[i] = new(sql.NullInt64)
		case webhookretryattempt.FieldSignature, webhookretryattempt.FieldWebhookURL, webhookretryattempt.FieldStatus:
			values[i] = new(sql.NullString)
		case webhookretryattempt.FieldCreatedAt, webhookretryattempt.FieldUpdatedAt, webhookretryattempt.FieldNextRetryTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebhookRetryAttempt fields.
func (wra *WebhookRetryAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhookretryattempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wra.ID = int(value.Int64)
		case webhookretryattempt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wra.CreatedAt = value.Time
			}
		case webhookretryattempt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wra.UpdatedAt = value.Time
			}
		case webhookretryattempt.FieldAttemptNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_number", values[i])
			} else if value.Valid {
				wra.AttemptNumber = int(value.Int64)
			}
		case webhookretryattempt.FieldNextRetryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_retry_time", values[i])
			} else if value.Valid {
				wra.NextRetryTime = value.Time
			}
		case webhookretryattempt.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wra.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case webhookretryattempt.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				wra.Signature = value.String
			}
		case webhookretryattempt.FieldWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_url", values[i])
			} else if value.Valid {
				wra.WebhookURL = value.String
			}
		case webhookretryattempt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wra.Status = webhookretryattempt.Status(value.String)
			}
		default:
			wra.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebhookRetryAttempt.
// This includes values selected through modifiers, order, etc.
func (wra *WebhookRetryAttempt) Value(name string) (ent.Value, error) {
	return wra.selectValues.Get(name)
}

// Update returns a builder for updating this WebhookRetryAttempt.
// Note that you need to call WebhookRetryAttempt.Unwrap() before calling this method if this WebhookRetryAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (wra *WebhookRetryAttempt) Update() *WebhookRetryAttemptUpdateOne {
	return NewWebhookRetryAttemptClient(wra.config).UpdateOne(wra)
}

// Unwrap unwraps the WebhookRetryAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wra *WebhookRetryAttempt) Unwrap() *WebhookRetryAttempt {
	_tx, ok := wra.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebhookRetryAttempt is not a transactional entity")
	}
	wra.config.driver = _tx.drv
	return wra
}

// String implements the fmt.Stringer.
func (wra *WebhookRetryAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("WebhookRetryAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wra.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wra.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wra.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attempt_number=")
	builder.WriteString(fmt.Sprintf("%v", wra.AttemptNumber))
	builder.WriteString(", ")
	builder.WriteString("next_retry_time=")
	builder.WriteString(wra.NextRetryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", wra.Payload))
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(wra.Signature)
	builder.WriteString(", ")
	builder.WriteString("webhook_url=")
	builder.WriteString(wra.WebhookURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wra.Status))
	builder.WriteByte(')')
	return builder.String()
}

// WebhookRetryAttempts is a parsable slice of WebhookRetryAttempt.
type WebhookRetryAttempts []*WebhookRetryAttempt
