// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentwebhook"
	"github.com/paycrest/aggregator/ent/predicate"
)

// PaymentWebhookQuery is the builder for querying PaymentWebhook entities.
type PaymentWebhookQuery struct {
	config
	ctx              *QueryContext
	order            []paymentwebhook.OrderOption
	inters           []Interceptor
	predicates       []predicate.PaymentWebhook
	withPaymentOrder *PaymentOrderQuery
	withNetwork      *NetworkQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentWebhookQuery builder.
func (pwq *PaymentWebhookQuery) Where(ps ...predicate.PaymentWebhook) *PaymentWebhookQuery {
	pwq.predicates = append(pwq.predicates, ps...)
	return pwq
}

// Limit the number of records to be returned by this query.
func (pwq *PaymentWebhookQuery) Limit(limit int) *PaymentWebhookQuery {
	pwq.ctx.Limit = &limit
	return pwq
}

// Offset to start from.
func (pwq *PaymentWebhookQuery) Offset(offset int) *PaymentWebhookQuery {
	pwq.ctx.Offset = &offset
	return pwq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pwq *PaymentWebhookQuery) Unique(unique bool) *PaymentWebhookQuery {
	pwq.ctx.Unique = &unique
	return pwq
}

// Order specifies how the records should be ordered.
func (pwq *PaymentWebhookQuery) Order(o ...paymentwebhook.OrderOption) *PaymentWebhookQuery {
	pwq.order = append(pwq.order, o...)
	return pwq
}

// QueryPaymentOrder chains the current query on the "payment_order" edge.
func (pwq *PaymentWebhookQuery) QueryPaymentOrder() *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: pwq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pwq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pwq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentwebhook.Table, paymentwebhook.FieldID, selector),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, paymentwebhook.PaymentOrderTable, paymentwebhook.PaymentOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(pwq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNetwork chains the current query on the "network" edge.
func (pwq *PaymentWebhookQuery) QueryNetwork() *NetworkQuery {
	query := (&NetworkClient{config: pwq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pwq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pwq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentwebhook.Table, paymentwebhook.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, paymentwebhook.NetworkTable, paymentwebhook.NetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(pwq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentWebhook entity from the query.
// Returns a *NotFoundError when no PaymentWebhook was found.
func (pwq *PaymentWebhookQuery) First(ctx context.Context) (*PaymentWebhook, error) {
	nodes, err := pwq.Limit(1).All(setContextOp(ctx, pwq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentwebhook.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) FirstX(ctx context.Context) *PaymentWebhook {
	node, err := pwq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentWebhook ID from the query.
// Returns a *NotFoundError when no PaymentWebhook ID was found.
func (pwq *PaymentWebhookQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pwq.Limit(1).IDs(setContextOp(ctx, pwq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentwebhook.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pwq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentWebhook entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentWebhook entity is found.
// Returns a *NotFoundError when no PaymentWebhook entities are found.
func (pwq *PaymentWebhookQuery) Only(ctx context.Context) (*PaymentWebhook, error) {
	nodes, err := pwq.Limit(2).All(setContextOp(ctx, pwq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentwebhook.Label}
	default:
		return nil, &NotSingularError{paymentwebhook.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) OnlyX(ctx context.Context) *PaymentWebhook {
	node, err := pwq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentWebhook ID in the query.
// Returns a *NotSingularError when more than one PaymentWebhook ID is found.
// Returns a *NotFoundError when no entities are found.
func (pwq *PaymentWebhookQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pwq.Limit(2).IDs(setContextOp(ctx, pwq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentwebhook.Label}
	default:
		err = &NotSingularError{paymentwebhook.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pwq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentWebhooks.
func (pwq *PaymentWebhookQuery) All(ctx context.Context) ([]*PaymentWebhook, error) {
	ctx = setContextOp(ctx, pwq.ctx, ent.OpQueryAll)
	if err := pwq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentWebhook, *PaymentWebhookQuery]()
	return withInterceptors[[]*PaymentWebhook](ctx, pwq, qr, pwq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) AllX(ctx context.Context) []*PaymentWebhook {
	nodes, err := pwq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentWebhook IDs.
func (pwq *PaymentWebhookQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pwq.ctx.Unique == nil && pwq.path != nil {
		pwq.Unique(true)
	}
	ctx = setContextOp(ctx, pwq.ctx, ent.OpQueryIDs)
	if err = pwq.Select(paymentwebhook.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pwq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pwq *PaymentWebhookQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pwq.ctx, ent.OpQueryCount)
	if err := pwq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pwq, querierCount[*PaymentWebhookQuery](), pwq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) CountX(ctx context.Context) int {
	count, err := pwq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pwq *PaymentWebhookQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pwq.ctx, ent.OpQueryExist)
	switch _, err := pwq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pwq *PaymentWebhookQuery) ExistX(ctx context.Context) bool {
	exist, err := pwq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentWebhookQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pwq *PaymentWebhookQuery) Clone() *PaymentWebhookQuery {
	if pwq == nil {
		return nil
	}
	return &PaymentWebhookQuery{
		config:           pwq.config,
		ctx:              pwq.ctx.Clone(),
		order:            append([]paymentwebhook.OrderOption{}, pwq.order...),
		inters:           append([]Interceptor{}, pwq.inters...),
		predicates:       append([]predicate.PaymentWebhook{}, pwq.predicates...),
		withPaymentOrder: pwq.withPaymentOrder.Clone(),
		withNetwork:      pwq.withNetwork.Clone(),
		// clone intermediate query.
		sql:  pwq.sql.Clone(),
		path: pwq.path,
	}
}

// WithPaymentOrder tells the query-builder to eager-load the nodes that are connected to
// the "payment_order" edge. The optional arguments are used to configure the query builder of the edge.
func (pwq *PaymentWebhookQuery) WithPaymentOrder(opts ...func(*PaymentOrderQuery)) *PaymentWebhookQuery {
	query := (&PaymentOrderClient{config: pwq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pwq.withPaymentOrder = query
	return pwq
}

// WithNetwork tells the query-builder to eager-load the nodes that are connected to
// the "network" edge. The optional arguments are used to configure the query builder of the edge.
func (pwq *PaymentWebhookQuery) WithNetwork(opts ...func(*NetworkQuery)) *PaymentWebhookQuery {
	query := (&NetworkClient{config: pwq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pwq.withNetwork = query
	return pwq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentWebhook.Query().
//		GroupBy(paymentwebhook.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pwq *PaymentWebhookQuery) GroupBy(field string, fields ...string) *PaymentWebhookGroupBy {
	pwq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentWebhookGroupBy{build: pwq}
	grbuild.flds = &pwq.ctx.Fields
	grbuild.label = paymentwebhook.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PaymentWebhook.Query().
//		Select(paymentwebhook.FieldCreatedAt).
//		Scan(ctx, &v)
func (pwq *PaymentWebhookQuery) Select(fields ...string) *PaymentWebhookSelect {
	pwq.ctx.Fields = append(pwq.ctx.Fields, fields...)
	sbuild := &PaymentWebhookSelect{PaymentWebhookQuery: pwq}
	sbuild.label = paymentwebhook.Label
	sbuild.flds, sbuild.scan = &pwq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentWebhookSelect configured with the given aggregations.
func (pwq *PaymentWebhookQuery) Aggregate(fns ...AggregateFunc) *PaymentWebhookSelect {
	return pwq.Select().Aggregate(fns...)
}

func (pwq *PaymentWebhookQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pwq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pwq); err != nil {
				return err
			}
		}
	}
	for _, f := range pwq.ctx.Fields {
		if !paymentwebhook.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pwq.path != nil {
		prev, err := pwq.path(ctx)
		if err != nil {
			return err
		}
		pwq.sql = prev
	}
	return nil
}

func (pwq *PaymentWebhookQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentWebhook, error) {
	var (
		nodes       = []*PaymentWebhook{}
		withFKs     = pwq.withFKs
		_spec       = pwq.querySpec()
		loadedTypes = [2]bool{
			pwq.withPaymentOrder != nil,
			pwq.withNetwork != nil,
		}
	)
	if pwq.withPaymentOrder != nil || pwq.withNetwork != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, paymentwebhook.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentWebhook).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentWebhook{config: pwq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pwq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pwq.withPaymentOrder; query != nil {
		if err := pwq.loadPaymentOrder(ctx, query, nodes, nil,
			func(n *PaymentWebhook, e *PaymentOrder) { n.Edges.PaymentOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := pwq.withNetwork; query != nil {
		if err := pwq.loadNetwork(ctx, query, nodes, nil,
			func(n *PaymentWebhook, e *Network) { n.Edges.Network = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pwq *PaymentWebhookQuery) loadPaymentOrder(ctx context.Context, query *PaymentOrderQuery, nodes []*PaymentWebhook, init func(*PaymentWebhook), assign func(*PaymentWebhook, *PaymentOrder)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PaymentWebhook)
	for i := range nodes {
		if nodes[i].payment_order_payment_webhook == nil {
			continue
		}
		fk := *nodes[i].payment_order_payment_webhook
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(paymentorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "payment_order_payment_webhook" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pwq *PaymentWebhookQuery) loadNetwork(ctx context.Context, query *NetworkQuery, nodes []*PaymentWebhook, init func(*PaymentWebhook), assign func(*PaymentWebhook, *Network)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PaymentWebhook)
	for i := range nodes {
		if nodes[i].network_payment_webhook == nil {
			continue
		}
		fk := *nodes[i].network_payment_webhook
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(network.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "network_payment_webhook" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pwq *PaymentWebhookQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pwq.querySpec()
	_spec.Node.Columns = pwq.ctx.Fields
	if len(pwq.ctx.Fields) > 0 {
		_spec.Unique = pwq.ctx.Unique != nil && *pwq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pwq.driver, _spec)
}

func (pwq *PaymentWebhookQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymentwebhook.Table, paymentwebhook.Columns, sqlgraph.NewFieldSpec(paymentwebhook.FieldID, field.TypeUUID))
	_spec.From = pwq.sql
	if unique := pwq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pwq.path != nil {
		_spec.Unique = true
	}
	if fields := pwq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentwebhook.FieldID)
		for i := range fields {
			if fields[i] != paymentwebhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pwq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pwq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pwq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pwq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pwq *PaymentWebhookQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pwq.driver.Dialect())
	t1 := builder.Table(paymentwebhook.Table)
	columns := pwq.ctx.Fields
	if len(columns) == 0 {
		columns = paymentwebhook.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pwq.sql != nil {
		selector = pwq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pwq.ctx.Unique != nil && *pwq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pwq.predicates {
		p(selector)
	}
	for _, p := range pwq.order {
		p(selector)
	}
	if offset := pwq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pwq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentWebhookGroupBy is the group-by builder for PaymentWebhook entities.
type PaymentWebhookGroupBy struct {
	selector
	build *PaymentWebhookQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pwgb *PaymentWebhookGroupBy) Aggregate(fns ...AggregateFunc) *PaymentWebhookGroupBy {
	pwgb.fns = append(pwgb.fns, fns...)
	return pwgb
}

// Scan applies the selector query and scans the result into the given value.
func (pwgb *PaymentWebhookGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pwgb.build.ctx, ent.OpQueryGroupBy)
	if err := pwgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentWebhookQuery, *PaymentWebhookGroupBy](ctx, pwgb.build, pwgb, pwgb.build.inters, v)
}

func (pwgb *PaymentWebhookGroupBy) sqlScan(ctx context.Context, root *PaymentWebhookQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pwgb.fns))
	for _, fn := range pwgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pwgb.flds)+len(pwgb.fns))
		for _, f := range *pwgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pwgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pwgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentWebhookSelect is the builder for selecting fields of PaymentWebhook entities.
type PaymentWebhookSelect struct {
	*PaymentWebhookQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pws *PaymentWebhookSelect) Aggregate(fns ...AggregateFunc) *PaymentWebhookSelect {
	pws.fns = append(pws.fns, fns...)
	return pws
}

// Scan applies the selector query and scans the result into the given value.
func (pws *PaymentWebhookSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pws.ctx, ent.OpQuerySelect)
	if err := pws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentWebhookQuery, *PaymentWebhookSelect](ctx, pws.PaymentWebhookQuery, pws, pws.inters, v)
}

func (pws *PaymentWebhookSelect) sqlScan(ctx context.Context, root *PaymentWebhookQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pws.fns))
	for _, fn := range pws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
