// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybprofile"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBProfileUpdate is the builder for updating KYBProfile entities.
type KYBProfileUpdate struct {
	config
	hooks    []Hook
	mutation *KYBProfileMutation
}

// Where appends a list predicates to the KYBProfileUpdate builder.
func (kpu *KYBProfileUpdate) Where(ps ...predicate.KYBProfile) *KYBProfileUpdate {
	kpu.mutation.Where(ps...)
	return kpu
}

// SetUpdatedAt sets the "updated_at" field.
func (kpu *KYBProfileUpdate) SetUpdatedAt(t time.Time) *KYBProfileUpdate {
	kpu.mutation.SetUpdatedAt(t)
	return kpu
}

// SetMobileNumber sets the "mobile_number" field.
func (kpu *KYBProfileUpdate) SetMobileNumber(s string) *KYBProfileUpdate {
	kpu.mutation.SetMobileNumber(s)
	return kpu
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableMobileNumber(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetMobileNumber(*s)
	}
	return kpu
}

// SetCompanyName sets the "company_name" field.
func (kpu *KYBProfileUpdate) SetCompanyName(s string) *KYBProfileUpdate {
	kpu.mutation.SetCompanyName(s)
	return kpu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableCompanyName(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetCompanyName(*s)
	}
	return kpu
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kpu *KYBProfileUpdate) SetRegisteredBusinessAddress(s string) *KYBProfileUpdate {
	kpu.mutation.SetRegisteredBusinessAddress(s)
	return kpu
}

// SetNillableRegisteredBusinessAddress sets the "registered_business_address" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableRegisteredBusinessAddress(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetRegisteredBusinessAddress(*s)
	}
	return kpu
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kpu *KYBProfileUpdate) SetCertificateOfIncorporationURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetCertificateOfIncorporationURL(s)
	return kpu
}

// SetNillableCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableCertificateOfIncorporationURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetCertificateOfIncorporationURL(*s)
	}
	return kpu
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kpu *KYBProfileUpdate) SetArticlesOfIncorporationURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetArticlesOfIncorporationURL(s)
	return kpu
}

// SetNillableArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableArticlesOfIncorporationURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetArticlesOfIncorporationURL(*s)
	}
	return kpu
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kpu *KYBProfileUpdate) SetBusinessLicenseURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetBusinessLicenseURL(s)
	return kpu
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableBusinessLicenseURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetBusinessLicenseURL(*s)
	}
	return kpu
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (kpu *KYBProfileUpdate) ClearBusinessLicenseURL() *KYBProfileUpdate {
	kpu.mutation.ClearBusinessLicenseURL()
	return kpu
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kpu *KYBProfileUpdate) SetProofOfBusinessAddressURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetProofOfBusinessAddressURL(s)
	return kpu
}

// SetNillableProofOfBusinessAddressURL sets the "proof_of_business_address_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableProofOfBusinessAddressURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetProofOfBusinessAddressURL(*s)
	}
	return kpu
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kpu *KYBProfileUpdate) SetAmlPolicyURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetAmlPolicyURL(s)
	return kpu
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableAmlPolicyURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetAmlPolicyURL(*s)
	}
	return kpu
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (kpu *KYBProfileUpdate) ClearAmlPolicyURL() *KYBProfileUpdate {
	kpu.mutation.ClearAmlPolicyURL()
	return kpu
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kpu *KYBProfileUpdate) SetKycPolicyURL(s string) *KYBProfileUpdate {
	kpu.mutation.SetKycPolicyURL(s)
	return kpu
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableKycPolicyURL(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetKycPolicyURL(*s)
	}
	return kpu
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (kpu *KYBProfileUpdate) ClearKycPolicyURL() *KYBProfileUpdate {
	kpu.mutation.ClearKycPolicyURL()
	return kpu
}

// SetKybRejectionComment sets the "kyb_rejection_comment" field.
func (kpu *KYBProfileUpdate) SetKybRejectionComment(s string) *KYBProfileUpdate {
	kpu.mutation.SetKybRejectionComment(s)
	return kpu
}

// SetNillableKybRejectionComment sets the "kyb_rejection_comment" field if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableKybRejectionComment(s *string) *KYBProfileUpdate {
	if s != nil {
		kpu.SetKybRejectionComment(*s)
	}
	return kpu
}

// ClearKybRejectionComment clears the value of the "kyb_rejection_comment" field.
func (kpu *KYBProfileUpdate) ClearKybRejectionComment() *KYBProfileUpdate {
	kpu.mutation.ClearKybRejectionComment()
	return kpu
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kpu *KYBProfileUpdate) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBProfileUpdate {
	kpu.mutation.AddBeneficialOwnerIDs(ids...)
	return kpu
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kpu *KYBProfileUpdate) AddBeneficialOwners(b ...*BeneficialOwner) *KYBProfileUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kpu.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kpu *KYBProfileUpdate) SetUserID(id uuid.UUID) *KYBProfileUpdate {
	kpu.mutation.SetUserID(id)
	return kpu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kpu *KYBProfileUpdate) SetNillableUserID(id *uuid.UUID) *KYBProfileUpdate {
	if id != nil {
		kpu = kpu.SetUserID(*id)
	}
	return kpu
}

// SetUser sets the "user" edge to the User entity.
func (kpu *KYBProfileUpdate) SetUser(u *User) *KYBProfileUpdate {
	return kpu.SetUserID(u.ID)
}

// Mutation returns the KYBProfileMutation object of the builder.
func (kpu *KYBProfileUpdate) Mutation() *KYBProfileMutation {
	return kpu.mutation
}

// ClearBeneficialOwners clears all "beneficial_owners" edges to the BeneficialOwner entity.
func (kpu *KYBProfileUpdate) ClearBeneficialOwners() *KYBProfileUpdate {
	kpu.mutation.ClearBeneficialOwners()
	return kpu
}

// RemoveBeneficialOwnerIDs removes the "beneficial_owners" edge to BeneficialOwner entities by IDs.
func (kpu *KYBProfileUpdate) RemoveBeneficialOwnerIDs(ids ...uuid.UUID) *KYBProfileUpdate {
	kpu.mutation.RemoveBeneficialOwnerIDs(ids...)
	return kpu
}

// RemoveBeneficialOwners removes "beneficial_owners" edges to BeneficialOwner entities.
func (kpu *KYBProfileUpdate) RemoveBeneficialOwners(b ...*BeneficialOwner) *KYBProfileUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kpu.RemoveBeneficialOwnerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (kpu *KYBProfileUpdate) ClearUser() *KYBProfileUpdate {
	kpu.mutation.ClearUser()
	return kpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kpu *KYBProfileUpdate) Save(ctx context.Context) (int, error) {
	kpu.defaults()
	return withHooks(ctx, kpu.sqlSave, kpu.mutation, kpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kpu *KYBProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := kpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kpu *KYBProfileUpdate) Exec(ctx context.Context) error {
	_, err := kpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpu *KYBProfileUpdate) ExecX(ctx context.Context) {
	if err := kpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kpu *KYBProfileUpdate) defaults() {
	if _, ok := kpu.mutation.UpdatedAt(); !ok {
		v := kybprofile.UpdateDefaultUpdatedAt()
		kpu.mutation.SetUpdatedAt(v)
	}
}

func (kpu *KYBProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kybprofile.Table, kybprofile.Columns, sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID))
	if ps := kpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kpu.mutation.UpdatedAt(); ok {
		_spec.SetField(kybprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kpu.mutation.MobileNumber(); ok {
		_spec.SetField(kybprofile.FieldMobileNumber, field.TypeString, value)
	}
	if value, ok := kpu.mutation.CompanyName(); ok {
		_spec.SetField(kybprofile.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := kpu.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybprofile.FieldRegisteredBusinessAddress, field.TypeString, value)
	}
	if value, ok := kpu.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldCertificateOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kpu.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldArticlesOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kpu.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybprofile.FieldBusinessLicenseURL, field.TypeString, value)
	}
	if kpu.mutation.BusinessLicenseURLCleared() {
		_spec.ClearField(kybprofile.FieldBusinessLicenseURL, field.TypeString)
	}
	if value, ok := kpu.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybprofile.FieldProofOfBusinessAddressURL, field.TypeString, value)
	}
	if value, ok := kpu.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldAmlPolicyURL, field.TypeString, value)
	}
	if kpu.mutation.AmlPolicyURLCleared() {
		_spec.ClearField(kybprofile.FieldAmlPolicyURL, field.TypeString)
	}
	if value, ok := kpu.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldKycPolicyURL, field.TypeString, value)
	}
	if kpu.mutation.KycPolicyURLCleared() {
		_spec.ClearField(kybprofile.FieldKycPolicyURL, field.TypeString)
	}
	if value, ok := kpu.mutation.KybRejectionComment(); ok {
		_spec.SetField(kybprofile.FieldKybRejectionComment, field.TypeString, value)
	}
	if kpu.mutation.KybRejectionCommentCleared() {
		_spec.ClearField(kybprofile.FieldKybRejectionComment, field.TypeString)
	}
	if kpu.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpu.mutation.RemovedBeneficialOwnersIDs(); len(nodes) > 0 && !kpu.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpu.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kybprofile.UserTable,
			Columns: []string{kybprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kybprofile.UserTable,
			Columns: []string{kybprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kybprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kpu.mutation.done = true
	return n, nil
}

// KYBProfileUpdateOne is the builder for updating a single KYBProfile entity.
type KYBProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KYBProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kpuo *KYBProfileUpdateOne) SetUpdatedAt(t time.Time) *KYBProfileUpdateOne {
	kpuo.mutation.SetUpdatedAt(t)
	return kpuo
}

// SetMobileNumber sets the "mobile_number" field.
func (kpuo *KYBProfileUpdateOne) SetMobileNumber(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetMobileNumber(s)
	return kpuo
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableMobileNumber(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetMobileNumber(*s)
	}
	return kpuo
}

// SetCompanyName sets the "company_name" field.
func (kpuo *KYBProfileUpdateOne) SetCompanyName(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetCompanyName(s)
	return kpuo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableCompanyName(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetCompanyName(*s)
	}
	return kpuo
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kpuo *KYBProfileUpdateOne) SetRegisteredBusinessAddress(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetRegisteredBusinessAddress(s)
	return kpuo
}

// SetNillableRegisteredBusinessAddress sets the "registered_business_address" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableRegisteredBusinessAddress(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetRegisteredBusinessAddress(*s)
	}
	return kpuo
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kpuo *KYBProfileUpdateOne) SetCertificateOfIncorporationURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetCertificateOfIncorporationURL(s)
	return kpuo
}

// SetNillableCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableCertificateOfIncorporationURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetCertificateOfIncorporationURL(*s)
	}
	return kpuo
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kpuo *KYBProfileUpdateOne) SetArticlesOfIncorporationURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetArticlesOfIncorporationURL(s)
	return kpuo
}

// SetNillableArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableArticlesOfIncorporationURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetArticlesOfIncorporationURL(*s)
	}
	return kpuo
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kpuo *KYBProfileUpdateOne) SetBusinessLicenseURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetBusinessLicenseURL(s)
	return kpuo
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableBusinessLicenseURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetBusinessLicenseURL(*s)
	}
	return kpuo
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (kpuo *KYBProfileUpdateOne) ClearBusinessLicenseURL() *KYBProfileUpdateOne {
	kpuo.mutation.ClearBusinessLicenseURL()
	return kpuo
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kpuo *KYBProfileUpdateOne) SetProofOfBusinessAddressURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetProofOfBusinessAddressURL(s)
	return kpuo
}

// SetNillableProofOfBusinessAddressURL sets the "proof_of_business_address_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableProofOfBusinessAddressURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetProofOfBusinessAddressURL(*s)
	}
	return kpuo
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kpuo *KYBProfileUpdateOne) SetAmlPolicyURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetAmlPolicyURL(s)
	return kpuo
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableAmlPolicyURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetAmlPolicyURL(*s)
	}
	return kpuo
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (kpuo *KYBProfileUpdateOne) ClearAmlPolicyURL() *KYBProfileUpdateOne {
	kpuo.mutation.ClearAmlPolicyURL()
	return kpuo
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kpuo *KYBProfileUpdateOne) SetKycPolicyURL(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetKycPolicyURL(s)
	return kpuo
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableKycPolicyURL(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetKycPolicyURL(*s)
	}
	return kpuo
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (kpuo *KYBProfileUpdateOne) ClearKycPolicyURL() *KYBProfileUpdateOne {
	kpuo.mutation.ClearKycPolicyURL()
	return kpuo
}

// SetKybRejectionComment sets the "kyb_rejection_comment" field.
func (kpuo *KYBProfileUpdateOne) SetKybRejectionComment(s string) *KYBProfileUpdateOne {
	kpuo.mutation.SetKybRejectionComment(s)
	return kpuo
}

// SetNillableKybRejectionComment sets the "kyb_rejection_comment" field if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableKybRejectionComment(s *string) *KYBProfileUpdateOne {
	if s != nil {
		kpuo.SetKybRejectionComment(*s)
	}
	return kpuo
}

// ClearKybRejectionComment clears the value of the "kyb_rejection_comment" field.
func (kpuo *KYBProfileUpdateOne) ClearKybRejectionComment() *KYBProfileUpdateOne {
	kpuo.mutation.ClearKybRejectionComment()
	return kpuo
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kpuo *KYBProfileUpdateOne) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBProfileUpdateOne {
	kpuo.mutation.AddBeneficialOwnerIDs(ids...)
	return kpuo
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kpuo *KYBProfileUpdateOne) AddBeneficialOwners(b ...*BeneficialOwner) *KYBProfileUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kpuo.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kpuo *KYBProfileUpdateOne) SetUserID(id uuid.UUID) *KYBProfileUpdateOne {
	kpuo.mutation.SetUserID(id)
	return kpuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kpuo *KYBProfileUpdateOne) SetNillableUserID(id *uuid.UUID) *KYBProfileUpdateOne {
	if id != nil {
		kpuo = kpuo.SetUserID(*id)
	}
	return kpuo
}

// SetUser sets the "user" edge to the User entity.
func (kpuo *KYBProfileUpdateOne) SetUser(u *User) *KYBProfileUpdateOne {
	return kpuo.SetUserID(u.ID)
}

// Mutation returns the KYBProfileMutation object of the builder.
func (kpuo *KYBProfileUpdateOne) Mutation() *KYBProfileMutation {
	return kpuo.mutation
}

// ClearBeneficialOwners clears all "beneficial_owners" edges to the BeneficialOwner entity.
func (kpuo *KYBProfileUpdateOne) ClearBeneficialOwners() *KYBProfileUpdateOne {
	kpuo.mutation.ClearBeneficialOwners()
	return kpuo
}

// RemoveBeneficialOwnerIDs removes the "beneficial_owners" edge to BeneficialOwner entities by IDs.
func (kpuo *KYBProfileUpdateOne) RemoveBeneficialOwnerIDs(ids ...uuid.UUID) *KYBProfileUpdateOne {
	kpuo.mutation.RemoveBeneficialOwnerIDs(ids...)
	return kpuo
}

// RemoveBeneficialOwners removes "beneficial_owners" edges to BeneficialOwner entities.
func (kpuo *KYBProfileUpdateOne) RemoveBeneficialOwners(b ...*BeneficialOwner) *KYBProfileUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kpuo.RemoveBeneficialOwnerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (kpuo *KYBProfileUpdateOne) ClearUser() *KYBProfileUpdateOne {
	kpuo.mutation.ClearUser()
	return kpuo
}

// Where appends a list predicates to the KYBProfileUpdate builder.
func (kpuo *KYBProfileUpdateOne) Where(ps ...predicate.KYBProfile) *KYBProfileUpdateOne {
	kpuo.mutation.Where(ps...)
	return kpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kpuo *KYBProfileUpdateOne) Select(field string, fields ...string) *KYBProfileUpdateOne {
	kpuo.fields = append([]string{field}, fields...)
	return kpuo
}

// Save executes the query and returns the updated KYBProfile entity.
func (kpuo *KYBProfileUpdateOne) Save(ctx context.Context) (*KYBProfile, error) {
	kpuo.defaults()
	return withHooks(ctx, kpuo.sqlSave, kpuo.mutation, kpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kpuo *KYBProfileUpdateOne) SaveX(ctx context.Context) *KYBProfile {
	node, err := kpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kpuo *KYBProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := kpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpuo *KYBProfileUpdateOne) ExecX(ctx context.Context) {
	if err := kpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kpuo *KYBProfileUpdateOne) defaults() {
	if _, ok := kpuo.mutation.UpdatedAt(); !ok {
		v := kybprofile.UpdateDefaultUpdatedAt()
		kpuo.mutation.SetUpdatedAt(v)
	}
}

func (kpuo *KYBProfileUpdateOne) sqlSave(ctx context.Context) (_node *KYBProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(kybprofile.Table, kybprofile.Columns, sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID))
	id, ok := kpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KYBProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kybprofile.FieldID)
		for _, f := range fields {
			if !kybprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kybprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(kybprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kpuo.mutation.MobileNumber(); ok {
		_spec.SetField(kybprofile.FieldMobileNumber, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.CompanyName(); ok {
		_spec.SetField(kybprofile.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybprofile.FieldRegisteredBusinessAddress, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldCertificateOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldArticlesOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybprofile.FieldBusinessLicenseURL, field.TypeString, value)
	}
	if kpuo.mutation.BusinessLicenseURLCleared() {
		_spec.ClearField(kybprofile.FieldBusinessLicenseURL, field.TypeString)
	}
	if value, ok := kpuo.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybprofile.FieldProofOfBusinessAddressURL, field.TypeString, value)
	}
	if value, ok := kpuo.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldAmlPolicyURL, field.TypeString, value)
	}
	if kpuo.mutation.AmlPolicyURLCleared() {
		_spec.ClearField(kybprofile.FieldAmlPolicyURL, field.TypeString)
	}
	if value, ok := kpuo.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldKycPolicyURL, field.TypeString, value)
	}
	if kpuo.mutation.KycPolicyURLCleared() {
		_spec.ClearField(kybprofile.FieldKycPolicyURL, field.TypeString)
	}
	if value, ok := kpuo.mutation.KybRejectionComment(); ok {
		_spec.SetField(kybprofile.FieldKybRejectionComment, field.TypeString, value)
	}
	if kpuo.mutation.KybRejectionCommentCleared() {
		_spec.ClearField(kybprofile.FieldKybRejectionComment, field.TypeString)
	}
	if kpuo.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpuo.mutation.RemovedBeneficialOwnersIDs(); len(nodes) > 0 && !kpuo.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpuo.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kybprofile.UserTable,
			Columns: []string{kybprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kybprofile.UserTable,
			Columns: []string{kybprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KYBProfile{config: kpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kybprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kpuo.mutation.done = true
	return _node, nil
}
