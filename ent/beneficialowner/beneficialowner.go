// Code generated by ent, DO NOT EDIT.

package beneficialowner

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the beneficialowner type in the database.
	Label = "beneficial_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldResidentialAddress holds the string denoting the residential_address field in the database.
	FieldResidentialAddress = "residential_address"
	// FieldProofOfResidentialAddressURL holds the string denoting the proof_of_residential_address_url field in the database.
	FieldProofOfResidentialAddressURL = "proof_of_residential_address_url"
	// FieldGovernmentIssuedIDURL holds the string denoting the government_issued_id_url field in the database.
	FieldGovernmentIssuedIDURL = "government_issued_id_url"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldOwnershipPercentage holds the string denoting the ownership_percentage field in the database.
	FieldOwnershipPercentage = "ownership_percentage"
	// FieldGovernmentIssuedIDType holds the string denoting the government_issued_id_type field in the database.
	FieldGovernmentIssuedIDType = "government_issued_id_type"
	// EdgeKybProfile holds the string denoting the kyb_profile edge name in mutations.
	EdgeKybProfile = "kyb_profile"
	// Table holds the table name of the beneficialowner in the database.
	Table = "beneficial_owners"
	// KybProfileTable is the table that holds the kyb_profile relation/edge.
	KybProfileTable = "beneficial_owners"
	// KybProfileInverseTable is the table name for the KYBProfile entity.
	// It exists in this package in order to avoid circular dependency with the "kybprofile" package.
	KybProfileInverseTable = "kyb_profiles"
	// KybProfileColumn is the table column denoting the kyb_profile relation/edge.
	KybProfileColumn = "kyb_profile_beneficial_owners"
)

// Columns holds all SQL columns for beneficialowner fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldResidentialAddress,
	FieldProofOfResidentialAddressURL,
	FieldGovernmentIssuedIDURL,
	FieldDateOfBirth,
	FieldOwnershipPercentage,
	FieldGovernmentIssuedIDType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "beneficial_owners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kyb_profile_beneficial_owners",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// GovernmentIssuedIDType defines the type for the "government_issued_id_type" enum field.
type GovernmentIssuedIDType string

// GovernmentIssuedIDType values.
const (
	GovernmentIssuedIDTypePassport       GovernmentIssuedIDType = "passport"
	GovernmentIssuedIDTypeDriversLicense GovernmentIssuedIDType = "drivers_license"
	GovernmentIssuedIDTypeNationalID     GovernmentIssuedIDType = "national_id"
)

func (giit GovernmentIssuedIDType) String() string {
	return string(giit)
}

// GovernmentIssuedIDTypeValidator is a validator for the "government_issued_id_type" field enum values. It is called by the builders before save.
func GovernmentIssuedIDTypeValidator(giit GovernmentIssuedIDType) error {
	switch giit {
	case GovernmentIssuedIDTypePassport, GovernmentIssuedIDTypeDriversLicense, GovernmentIssuedIDTypeNationalID:
		return nil
	default:
		return fmt.Errorf("beneficialowner: invalid enum value for government_issued_id_type field: %q", giit)
	}
}

// OrderOption defines the ordering options for the BeneficialOwner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByResidentialAddress orders the results by the residential_address field.
func ByResidentialAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResidentialAddress, opts...).ToFunc()
}

// ByProofOfResidentialAddressURL orders the results by the proof_of_residential_address_url field.
func ByProofOfResidentialAddressURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProofOfResidentialAddressURL, opts...).ToFunc()
}

// ByGovernmentIssuedIDURL orders the results by the government_issued_id_url field.
func ByGovernmentIssuedIDURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGovernmentIssuedIDURL, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByOwnershipPercentage orders the results by the ownership_percentage field.
func ByOwnershipPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnershipPercentage, opts...).ToFunc()
}

// ByGovernmentIssuedIDType orders the results by the government_issued_id_type field.
func ByGovernmentIssuedIDType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGovernmentIssuedIDType, opts...).ToFunc()
}

// ByKybProfileField orders the results by kyb_profile field.
func ByKybProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKybProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newKybProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KybProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KybProfileTable, KybProfileColumn),
	)
}
