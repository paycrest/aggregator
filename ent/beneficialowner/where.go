// Code generated by ent, DO NOT EDIT.

package beneficialowner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldID, id))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldFullName, v))
}

// ResidentialAddress applies equality check predicate on the "residential_address" field. It's identical to ResidentialAddressEQ.
func ResidentialAddress(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldResidentialAddress, v))
}

// ProofOfResidentialAddressURL applies equality check predicate on the "proof_of_residential_address_url" field. It's identical to ProofOfResidentialAddressURLEQ.
func ProofOfResidentialAddressURL(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldProofOfResidentialAddressURL, v))
}

// GovernmentIssuedIDURL applies equality check predicate on the "government_issued_id_url" field. It's identical to GovernmentIssuedIDURLEQ.
func GovernmentIssuedIDURL(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldGovernmentIssuedIDURL, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldDateOfBirth, v))
}

// OwnershipPercentage applies equality check predicate on the "ownership_percentage" field. It's identical to OwnershipPercentageEQ.
func OwnershipPercentage(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldOwnershipPercentage, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContainsFold(FieldFullName, v))
}

// ResidentialAddressEQ applies the EQ predicate on the "residential_address" field.
func ResidentialAddressEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldResidentialAddress, v))
}

// ResidentialAddressNEQ applies the NEQ predicate on the "residential_address" field.
func ResidentialAddressNEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldResidentialAddress, v))
}

// ResidentialAddressIn applies the In predicate on the "residential_address" field.
func ResidentialAddressIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldResidentialAddress, vs...))
}

// ResidentialAddressNotIn applies the NotIn predicate on the "residential_address" field.
func ResidentialAddressNotIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldResidentialAddress, vs...))
}

// ResidentialAddressGT applies the GT predicate on the "residential_address" field.
func ResidentialAddressGT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldResidentialAddress, v))
}

// ResidentialAddressGTE applies the GTE predicate on the "residential_address" field.
func ResidentialAddressGTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldResidentialAddress, v))
}

// ResidentialAddressLT applies the LT predicate on the "residential_address" field.
func ResidentialAddressLT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldResidentialAddress, v))
}

// ResidentialAddressLTE applies the LTE predicate on the "residential_address" field.
func ResidentialAddressLTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldResidentialAddress, v))
}

// ResidentialAddressContains applies the Contains predicate on the "residential_address" field.
func ResidentialAddressContains(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContains(FieldResidentialAddress, v))
}

// ResidentialAddressHasPrefix applies the HasPrefix predicate on the "residential_address" field.
func ResidentialAddressHasPrefix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasPrefix(FieldResidentialAddress, v))
}

// ResidentialAddressHasSuffix applies the HasSuffix predicate on the "residential_address" field.
func ResidentialAddressHasSuffix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasSuffix(FieldResidentialAddress, v))
}

// ResidentialAddressEqualFold applies the EqualFold predicate on the "residential_address" field.
func ResidentialAddressEqualFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEqualFold(FieldResidentialAddress, v))
}

// ResidentialAddressContainsFold applies the ContainsFold predicate on the "residential_address" field.
func ResidentialAddressContainsFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContainsFold(FieldResidentialAddress, v))
}

// ProofOfResidentialAddressURLEQ applies the EQ predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLNEQ applies the NEQ predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLNEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLIn applies the In predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldProofOfResidentialAddressURL, vs...))
}

// ProofOfResidentialAddressURLNotIn applies the NotIn predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLNotIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldProofOfResidentialAddressURL, vs...))
}

// ProofOfResidentialAddressURLGT applies the GT predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLGT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLGTE applies the GTE predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLGTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLLT applies the LT predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLLT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLLTE applies the LTE predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLLTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLContains applies the Contains predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLContains(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContains(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLHasPrefix applies the HasPrefix predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLHasPrefix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasPrefix(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLHasSuffix applies the HasSuffix predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLHasSuffix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasSuffix(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLEqualFold applies the EqualFold predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLEqualFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEqualFold(FieldProofOfResidentialAddressURL, v))
}

// ProofOfResidentialAddressURLContainsFold applies the ContainsFold predicate on the "proof_of_residential_address_url" field.
func ProofOfResidentialAddressURLContainsFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContainsFold(FieldProofOfResidentialAddressURL, v))
}

// GovernmentIssuedIDURLEQ applies the EQ predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLNEQ applies the NEQ predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLNEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLIn applies the In predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldGovernmentIssuedIDURL, vs...))
}

// GovernmentIssuedIDURLNotIn applies the NotIn predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLNotIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldGovernmentIssuedIDURL, vs...))
}

// GovernmentIssuedIDURLGT applies the GT predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLGT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLGTE applies the GTE predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLGTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLLT applies the LT predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLLT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLLTE applies the LTE predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLLTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLContains applies the Contains predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLContains(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContains(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLHasPrefix applies the HasPrefix predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLHasPrefix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasPrefix(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLHasSuffix applies the HasSuffix predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLHasSuffix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasSuffix(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLEqualFold applies the EqualFold predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLEqualFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEqualFold(FieldGovernmentIssuedIDURL, v))
}

// GovernmentIssuedIDURLContainsFold applies the ContainsFold predicate on the "government_issued_id_url" field.
func GovernmentIssuedIDURLContainsFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContainsFold(FieldGovernmentIssuedIDURL, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthContains applies the Contains predicate on the "date_of_birth" field.
func DateOfBirthContains(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContains(FieldDateOfBirth, v))
}

// DateOfBirthHasPrefix applies the HasPrefix predicate on the "date_of_birth" field.
func DateOfBirthHasPrefix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasPrefix(FieldDateOfBirth, v))
}

// DateOfBirthHasSuffix applies the HasSuffix predicate on the "date_of_birth" field.
func DateOfBirthHasSuffix(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldHasSuffix(FieldDateOfBirth, v))
}

// DateOfBirthEqualFold applies the EqualFold predicate on the "date_of_birth" field.
func DateOfBirthEqualFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEqualFold(FieldDateOfBirth, v))
}

// DateOfBirthContainsFold applies the ContainsFold predicate on the "date_of_birth" field.
func DateOfBirthContainsFold(v string) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldContainsFold(FieldDateOfBirth, v))
}

// OwnershipPercentageEQ applies the EQ predicate on the "ownership_percentage" field.
func OwnershipPercentageEQ(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldEQ(FieldOwnershipPercentage, v))
}

// OwnershipPercentageNEQ applies the NEQ predicate on the "ownership_percentage" field.
func OwnershipPercentageNEQ(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNEQ(FieldOwnershipPercentage, v))
}

// OwnershipPercentageIn applies the In predicate on the "ownership_percentage" field.
func OwnershipPercentageIn(vs ...float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldIn(FieldOwnershipPercentage, vs...))
}

// OwnershipPercentageNotIn applies the NotIn predicate on the "ownership_percentage" field.
func OwnershipPercentageNotIn(vs ...float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldNotIn(FieldOwnershipPercentage, vs...))
}

// OwnershipPercentageGT applies the GT predicate on the "ownership_percentage" field.
func OwnershipPercentageGT(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGT(FieldOwnershipPercentage, v))
}

// OwnershipPercentageGTE applies the GTE predicate on the "ownership_percentage" field.
func OwnershipPercentageGTE(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldGTE(FieldOwnershipPercentage, v))
}

// OwnershipPercentageLT applies the LT predicate on the "ownership_percentage" field.
func OwnershipPercentageLT(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLT(FieldOwnershipPercentage, v))
}

// OwnershipPercentageLTE applies the LTE predicate on the "ownership_percentage" field.
func OwnershipPercentageLTE(v float64) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.FieldLTE(FieldOwnershipPercentage, v))
}

// HasKybFormSubmission applies the HasEdge predicate on the "kyb_form_submission" edge.
func HasKybFormSubmission() predicate.BeneficialOwner {
	return predicate.BeneficialOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KybFormSubmissionTable, KybFormSubmissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKybFormSubmissionWith applies the HasEdge predicate on the "kyb_form_submission" edge with a given conditions (other predicates).
func HasKybFormSubmissionWith(preds ...predicate.KYBFormSubmission) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(func(s *sql.Selector) {
		step := newKybFormSubmissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BeneficialOwner) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BeneficialOwner) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BeneficialOwner) predicate.BeneficialOwner {
	return predicate.BeneficialOwner(sql.NotPredicates(p))
}
