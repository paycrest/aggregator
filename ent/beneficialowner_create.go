// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybprofile"
)

// BeneficialOwnerCreate is the builder for creating a BeneficialOwner entity.
type BeneficialOwnerCreate struct {
	config
	mutation *BeneficialOwnerMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (boc *BeneficialOwnerCreate) SetFullName(s string) *BeneficialOwnerCreate {
	boc.mutation.SetFullName(s)
	return boc
}

// SetResidentialAddress sets the "residential_address" field.
func (boc *BeneficialOwnerCreate) SetResidentialAddress(s string) *BeneficialOwnerCreate {
	boc.mutation.SetResidentialAddress(s)
	return boc
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (boc *BeneficialOwnerCreate) SetProofOfResidentialAddressURL(s string) *BeneficialOwnerCreate {
	boc.mutation.SetProofOfResidentialAddressURL(s)
	return boc
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (boc *BeneficialOwnerCreate) SetGovernmentIssuedIDURL(s string) *BeneficialOwnerCreate {
	boc.mutation.SetGovernmentIssuedIDURL(s)
	return boc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (boc *BeneficialOwnerCreate) SetDateOfBirth(s string) *BeneficialOwnerCreate {
	boc.mutation.SetDateOfBirth(s)
	return boc
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (boc *BeneficialOwnerCreate) SetOwnershipPercentage(f float64) *BeneficialOwnerCreate {
	boc.mutation.SetOwnershipPercentage(f)
	return boc
}

// SetGovernmentIssuedIDType sets the "government_issued_id_type" field.
func (boc *BeneficialOwnerCreate) SetGovernmentIssuedIDType(biit beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerCreate {
	boc.mutation.SetGovernmentIssuedIDType(biit)
	return boc
}

// SetNillableGovernmentIssuedIDType sets the "government_issued_id_type" field if the given value is not nil.
func (boc *BeneficialOwnerCreate) SetNillableGovernmentIssuedIDType(biit *beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerCreate {
	if biit != nil {
		boc.SetGovernmentIssuedIDType(*biit)
	}
	return boc
}

// SetID sets the "id" field.
func (boc *BeneficialOwnerCreate) SetID(u uuid.UUID) *BeneficialOwnerCreate {
	boc.mutation.SetID(u)
	return boc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (boc *BeneficialOwnerCreate) SetNillableID(u *uuid.UUID) *BeneficialOwnerCreate {
	if u != nil {
		boc.SetID(*u)
	}
	return boc
}

// SetKybProfileID sets the "kyb_profile" edge to the KYBProfile entity by ID.
func (boc *BeneficialOwnerCreate) SetKybProfileID(id uuid.UUID) *BeneficialOwnerCreate {
	boc.mutation.SetKybProfileID(id)
	return boc
}

// SetKybProfile sets the "kyb_profile" edge to the KYBProfile entity.
func (boc *BeneficialOwnerCreate) SetKybProfile(k *KYBProfile) *BeneficialOwnerCreate {
	return boc.SetKybProfileID(k.ID)
}

// Mutation returns the BeneficialOwnerMutation object of the builder.
func (boc *BeneficialOwnerCreate) Mutation() *BeneficialOwnerMutation {
	return boc.mutation
}

// Save creates the BeneficialOwner in the database.
func (boc *BeneficialOwnerCreate) Save(ctx context.Context) (*BeneficialOwner, error) {
	boc.defaults()
	return withHooks(ctx, boc.sqlSave, boc.mutation, boc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (boc *BeneficialOwnerCreate) SaveX(ctx context.Context) *BeneficialOwner {
	v, err := boc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (boc *BeneficialOwnerCreate) Exec(ctx context.Context) error {
	_, err := boc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (boc *BeneficialOwnerCreate) ExecX(ctx context.Context) {
	if err := boc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (boc *BeneficialOwnerCreate) defaults() {
	if _, ok := boc.mutation.ID(); !ok {
		v := beneficialowner.DefaultID()
		boc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (boc *BeneficialOwnerCreate) check() error {
	if _, ok := boc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "BeneficialOwner.full_name"`)}
	}
	if v, ok := boc.mutation.FullName(); ok {
		if err := beneficialowner.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.full_name": %w`, err)}
		}
	}
	if _, ok := boc.mutation.ResidentialAddress(); !ok {
		return &ValidationError{Name: "residential_address", err: errors.New(`ent: missing required field "BeneficialOwner.residential_address"`)}
	}
	if _, ok := boc.mutation.ProofOfResidentialAddressURL(); !ok {
		return &ValidationError{Name: "proof_of_residential_address_url", err: errors.New(`ent: missing required field "BeneficialOwner.proof_of_residential_address_url"`)}
	}
	if _, ok := boc.mutation.GovernmentIssuedIDURL(); !ok {
		return &ValidationError{Name: "government_issued_id_url", err: errors.New(`ent: missing required field "BeneficialOwner.government_issued_id_url"`)}
	}
	if _, ok := boc.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "BeneficialOwner.date_of_birth"`)}
	}
	if _, ok := boc.mutation.OwnershipPercentage(); !ok {
		return &ValidationError{Name: "ownership_percentage", err: errors.New(`ent: missing required field "BeneficialOwner.ownership_percentage"`)}
	}
	if v, ok := boc.mutation.GovernmentIssuedIDType(); ok {
		if err := beneficialowner.GovernmentIssuedIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "government_issued_id_type", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.government_issued_id_type": %w`, err)}
		}
	}
	if len(boc.mutation.KybProfileIDs()) == 0 {
		return &ValidationError{Name: "kyb_profile", err: errors.New(`ent: missing required edge "BeneficialOwner.kyb_profile"`)}
	}
	return nil
}

func (boc *BeneficialOwnerCreate) sqlSave(ctx context.Context) (*BeneficialOwner, error) {
	if err := boc.check(); err != nil {
		return nil, err
	}
	_node, _spec := boc.createSpec()
	if err := sqlgraph.CreateNode(ctx, boc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	boc.mutation.id = &_node.ID
	boc.mutation.done = true
	return _node, nil
}

func (boc *BeneficialOwnerCreate) createSpec() (*BeneficialOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &BeneficialOwner{config: boc.config}
		_spec = sqlgraph.NewCreateSpec(beneficialowner.Table, sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID))
	)
	if id, ok := boc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := boc.mutation.FullName(); ok {
		_spec.SetField(beneficialowner.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := boc.mutation.ResidentialAddress(); ok {
		_spec.SetField(beneficialowner.FieldResidentialAddress, field.TypeString, value)
		_node.ResidentialAddress = value
	}
	if value, ok := boc.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(beneficialowner.FieldProofOfResidentialAddressURL, field.TypeString, value)
		_node.ProofOfResidentialAddressURL = value
	}
	if value, ok := boc.mutation.GovernmentIssuedIDURL(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDURL, field.TypeString, value)
		_node.GovernmentIssuedIDURL = value
	}
	if value, ok := boc.mutation.DateOfBirth(); ok {
		_spec.SetField(beneficialowner.FieldDateOfBirth, field.TypeString, value)
		_node.DateOfBirth = value
	}
	if value, ok := boc.mutation.OwnershipPercentage(); ok {
		_spec.SetField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
		_node.OwnershipPercentage = value
	}
	if value, ok := boc.mutation.GovernmentIssuedIDType(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDType, field.TypeEnum, value)
		_node.GovernmentIssuedIDType = value
	}
	if nodes := boc.mutation.KybProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybProfileTable,
			Columns: []string{beneficialowner.KybProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kyb_profile_beneficial_owners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BeneficialOwnerCreateBulk is the builder for creating many BeneficialOwner entities in bulk.
type BeneficialOwnerCreateBulk struct {
	config
	err      error
	builders []*BeneficialOwnerCreate
}

// Save creates the BeneficialOwner entities in the database.
func (bocb *BeneficialOwnerCreateBulk) Save(ctx context.Context) ([]*BeneficialOwner, error) {
	if bocb.err != nil {
		return nil, bocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bocb.builders))
	nodes := make([]*BeneficialOwner, len(bocb.builders))
	mutators := make([]Mutator, len(bocb.builders))
	for i := range bocb.builders {
		func(i int, root context.Context) {
			builder := bocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BeneficialOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bocb *BeneficialOwnerCreateBulk) SaveX(ctx context.Context) []*BeneficialOwner {
	v, err := bocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bocb *BeneficialOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := bocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bocb *BeneficialOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := bocb.Exec(ctx); err != nil {
		panic(err)
	}
}
