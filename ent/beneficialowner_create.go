// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
)

// BeneficialOwnerCreate is the builder for creating a BeneficialOwner entity.
type BeneficialOwnerCreate struct {
	config
	mutation *BeneficialOwnerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFullName sets the "full_name" field.
func (boc *BeneficialOwnerCreate) SetFullName(s string) *BeneficialOwnerCreate {
	boc.mutation.SetFullName(s)
	return boc
}

// SetResidentialAddress sets the "residential_address" field.
func (boc *BeneficialOwnerCreate) SetResidentialAddress(s string) *BeneficialOwnerCreate {
	boc.mutation.SetResidentialAddress(s)
	return boc
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (boc *BeneficialOwnerCreate) SetProofOfResidentialAddressURL(s string) *BeneficialOwnerCreate {
	boc.mutation.SetProofOfResidentialAddressURL(s)
	return boc
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (boc *BeneficialOwnerCreate) SetGovernmentIssuedIDURL(s string) *BeneficialOwnerCreate {
	boc.mutation.SetGovernmentIssuedIDURL(s)
	return boc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (boc *BeneficialOwnerCreate) SetDateOfBirth(s string) *BeneficialOwnerCreate {
	boc.mutation.SetDateOfBirth(s)
	return boc
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (boc *BeneficialOwnerCreate) SetOwnershipPercentage(f float64) *BeneficialOwnerCreate {
	boc.mutation.SetOwnershipPercentage(f)
	return boc
}

// SetID sets the "id" field.
func (boc *BeneficialOwnerCreate) SetID(u uuid.UUID) *BeneficialOwnerCreate {
	boc.mutation.SetID(u)
	return boc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (boc *BeneficialOwnerCreate) SetNillableID(u *uuid.UUID) *BeneficialOwnerCreate {
	if u != nil {
		boc.SetID(*u)
	}
	return boc
}

// SetKybFormSubmissionID sets the "kyb_form_submission" edge to the KYBFormSubmission entity by ID.
func (boc *BeneficialOwnerCreate) SetKybFormSubmissionID(id uuid.UUID) *BeneficialOwnerCreate {
	boc.mutation.SetKybFormSubmissionID(id)
	return boc
}

// SetNillableKybFormSubmissionID sets the "kyb_form_submission" edge to the KYBFormSubmission entity by ID if the given value is not nil.
func (boc *BeneficialOwnerCreate) SetNillableKybFormSubmissionID(id *uuid.UUID) *BeneficialOwnerCreate {
	if id != nil {
		boc = boc.SetKybFormSubmissionID(*id)
	}
	return boc
}

// SetKybFormSubmission sets the "kyb_form_submission" edge to the KYBFormSubmission entity.
func (boc *BeneficialOwnerCreate) SetKybFormSubmission(k *KYBFormSubmission) *BeneficialOwnerCreate {
	return boc.SetKybFormSubmissionID(k.ID)
}

// Mutation returns the BeneficialOwnerMutation object of the builder.
func (boc *BeneficialOwnerCreate) Mutation() *BeneficialOwnerMutation {
	return boc.mutation
}

// Save creates the BeneficialOwner in the database.
func (boc *BeneficialOwnerCreate) Save(ctx context.Context) (*BeneficialOwner, error) {
	boc.defaults()
	return withHooks(ctx, boc.sqlSave, boc.mutation, boc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (boc *BeneficialOwnerCreate) SaveX(ctx context.Context) *BeneficialOwner {
	v, err := boc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (boc *BeneficialOwnerCreate) Exec(ctx context.Context) error {
	_, err := boc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (boc *BeneficialOwnerCreate) ExecX(ctx context.Context) {
	if err := boc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (boc *BeneficialOwnerCreate) defaults() {
	if _, ok := boc.mutation.ID(); !ok {
		v := beneficialowner.DefaultID()
		boc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (boc *BeneficialOwnerCreate) check() error {
	if _, ok := boc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "BeneficialOwner.full_name"`)}
	}
	if v, ok := boc.mutation.FullName(); ok {
		if err := beneficialowner.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.full_name": %w`, err)}
		}
	}
	if _, ok := boc.mutation.ResidentialAddress(); !ok {
		return &ValidationError{Name: "residential_address", err: errors.New(`ent: missing required field "BeneficialOwner.residential_address"`)}
	}
	if _, ok := boc.mutation.ProofOfResidentialAddressURL(); !ok {
		return &ValidationError{Name: "proof_of_residential_address_url", err: errors.New(`ent: missing required field "BeneficialOwner.proof_of_residential_address_url"`)}
	}
	if _, ok := boc.mutation.GovernmentIssuedIDURL(); !ok {
		return &ValidationError{Name: "government_issued_id_url", err: errors.New(`ent: missing required field "BeneficialOwner.government_issued_id_url"`)}
	}
	if _, ok := boc.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "BeneficialOwner.date_of_birth"`)}
	}
	if _, ok := boc.mutation.OwnershipPercentage(); !ok {
		return &ValidationError{Name: "ownership_percentage", err: errors.New(`ent: missing required field "BeneficialOwner.ownership_percentage"`)}
	}
	return nil
}

func (boc *BeneficialOwnerCreate) sqlSave(ctx context.Context) (*BeneficialOwner, error) {
	if err := boc.check(); err != nil {
		return nil, err
	}
	_node, _spec := boc.createSpec()
	if err := sqlgraph.CreateNode(ctx, boc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	boc.mutation.id = &_node.ID
	boc.mutation.done = true
	return _node, nil
}

func (boc *BeneficialOwnerCreate) createSpec() (*BeneficialOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &BeneficialOwner{config: boc.config}
		_spec = sqlgraph.NewCreateSpec(beneficialowner.Table, sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = boc.conflict
	if id, ok := boc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := boc.mutation.FullName(); ok {
		_spec.SetField(beneficialowner.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := boc.mutation.ResidentialAddress(); ok {
		_spec.SetField(beneficialowner.FieldResidentialAddress, field.TypeString, value)
		_node.ResidentialAddress = value
	}
	if value, ok := boc.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(beneficialowner.FieldProofOfResidentialAddressURL, field.TypeString, value)
		_node.ProofOfResidentialAddressURL = value
	}
	if value, ok := boc.mutation.GovernmentIssuedIDURL(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDURL, field.TypeString, value)
		_node.GovernmentIssuedIDURL = value
	}
	if value, ok := boc.mutation.DateOfBirth(); ok {
		_spec.SetField(beneficialowner.FieldDateOfBirth, field.TypeString, value)
		_node.DateOfBirth = value
	}
	if value, ok := boc.mutation.OwnershipPercentage(); ok {
		_spec.SetField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
		_node.OwnershipPercentage = value
	}
	if nodes := boc.mutation.KybFormSubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybFormSubmissionTable,
			Columns: []string{beneficialowner.KybFormSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kyb_form_submission_beneficial_owners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BeneficialOwner.Create().
//		SetFullName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BeneficialOwnerUpsert) {
//			SetFullName(v+v).
//		}).
//		Exec(ctx)
func (boc *BeneficialOwnerCreate) OnConflict(opts ...sql.ConflictOption) *BeneficialOwnerUpsertOne {
	boc.conflict = opts
	return &BeneficialOwnerUpsertOne{
		create: boc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (boc *BeneficialOwnerCreate) OnConflictColumns(columns ...string) *BeneficialOwnerUpsertOne {
	boc.conflict = append(boc.conflict, sql.ConflictColumns(columns...))
	return &BeneficialOwnerUpsertOne{
		create: boc,
	}
}

type (
	// BeneficialOwnerUpsertOne is the builder for "upsert"-ing
	//  one BeneficialOwner node.
	BeneficialOwnerUpsertOne struct {
		create *BeneficialOwnerCreate
	}

	// BeneficialOwnerUpsert is the "OnConflict" setter.
	BeneficialOwnerUpsert struct {
		*sql.UpdateSet
	}
)

// SetFullName sets the "full_name" field.
func (u *BeneficialOwnerUpsert) SetFullName(v string) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateFullName() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldFullName)
	return u
}

// SetResidentialAddress sets the "residential_address" field.
func (u *BeneficialOwnerUpsert) SetResidentialAddress(v string) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldResidentialAddress, v)
	return u
}

// UpdateResidentialAddress sets the "residential_address" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateResidentialAddress() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldResidentialAddress)
	return u
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *BeneficialOwnerUpsert) SetProofOfResidentialAddressURL(v string) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldProofOfResidentialAddressURL, v)
	return u
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateProofOfResidentialAddressURL() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldProofOfResidentialAddressURL)
	return u
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (u *BeneficialOwnerUpsert) SetGovernmentIssuedIDURL(v string) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldGovernmentIssuedIDURL, v)
	return u
}

// UpdateGovernmentIssuedIDURL sets the "government_issued_id_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateGovernmentIssuedIDURL() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldGovernmentIssuedIDURL)
	return u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *BeneficialOwnerUpsert) SetDateOfBirth(v string) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldDateOfBirth, v)
	return u
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateDateOfBirth() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldDateOfBirth)
	return u
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (u *BeneficialOwnerUpsert) SetOwnershipPercentage(v float64) *BeneficialOwnerUpsert {
	u.Set(beneficialowner.FieldOwnershipPercentage, v)
	return u
}

// UpdateOwnershipPercentage sets the "ownership_percentage" field to the value that was provided on create.
func (u *BeneficialOwnerUpsert) UpdateOwnershipPercentage() *BeneficialOwnerUpsert {
	u.SetExcluded(beneficialowner.FieldOwnershipPercentage)
	return u
}

// AddOwnershipPercentage adds v to the "ownership_percentage" field.
func (u *BeneficialOwnerUpsert) AddOwnershipPercentage(v float64) *BeneficialOwnerUpsert {
	u.Add(beneficialowner.FieldOwnershipPercentage, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(beneficialowner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BeneficialOwnerUpsertOne) UpdateNewValues() *BeneficialOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(beneficialowner.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BeneficialOwnerUpsertOne) Ignore() *BeneficialOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BeneficialOwnerUpsertOne) DoNothing() *BeneficialOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BeneficialOwnerCreate.OnConflict
// documentation for more info.
func (u *BeneficialOwnerUpsertOne) Update(set func(*BeneficialOwnerUpsert)) *BeneficialOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BeneficialOwnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetFullName sets the "full_name" field.
func (u *BeneficialOwnerUpsertOne) SetFullName(v string) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateFullName() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateFullName()
	})
}

// SetResidentialAddress sets the "residential_address" field.
func (u *BeneficialOwnerUpsertOne) SetResidentialAddress(v string) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetResidentialAddress(v)
	})
}

// UpdateResidentialAddress sets the "residential_address" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateResidentialAddress() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateResidentialAddress()
	})
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *BeneficialOwnerUpsertOne) SetProofOfResidentialAddressURL(v string) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetProofOfResidentialAddressURL(v)
	})
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateProofOfResidentialAddressURL() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateProofOfResidentialAddressURL()
	})
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (u *BeneficialOwnerUpsertOne) SetGovernmentIssuedIDURL(v string) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetGovernmentIssuedIDURL(v)
	})
}

// UpdateGovernmentIssuedIDURL sets the "government_issued_id_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateGovernmentIssuedIDURL() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateGovernmentIssuedIDURL()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *BeneficialOwnerUpsertOne) SetDateOfBirth(v string) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateDateOfBirth() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (u *BeneficialOwnerUpsertOne) SetOwnershipPercentage(v float64) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetOwnershipPercentage(v)
	})
}

// AddOwnershipPercentage adds v to the "ownership_percentage" field.
func (u *BeneficialOwnerUpsertOne) AddOwnershipPercentage(v float64) *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.AddOwnershipPercentage(v)
	})
}

// UpdateOwnershipPercentage sets the "ownership_percentage" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertOne) UpdateOwnershipPercentage() *BeneficialOwnerUpsertOne {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateOwnershipPercentage()
	})
}

// Exec executes the query.
func (u *BeneficialOwnerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BeneficialOwnerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BeneficialOwnerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BeneficialOwnerUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BeneficialOwnerUpsertOne.ID is not supported by MySQL driver. Use BeneficialOwnerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BeneficialOwnerUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BeneficialOwnerCreateBulk is the builder for creating many BeneficialOwner entities in bulk.
type BeneficialOwnerCreateBulk struct {
	config
	err      error
	builders []*BeneficialOwnerCreate
	conflict []sql.ConflictOption
}

// Save creates the BeneficialOwner entities in the database.
func (bocb *BeneficialOwnerCreateBulk) Save(ctx context.Context) ([]*BeneficialOwner, error) {
	if bocb.err != nil {
		return nil, bocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bocb.builders))
	nodes := make([]*BeneficialOwner, len(bocb.builders))
	mutators := make([]Mutator, len(bocb.builders))
	for i := range bocb.builders {
		func(i int, root context.Context) {
			builder := bocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BeneficialOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bocb *BeneficialOwnerCreateBulk) SaveX(ctx context.Context) []*BeneficialOwner {
	v, err := bocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bocb *BeneficialOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := bocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bocb *BeneficialOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := bocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BeneficialOwner.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BeneficialOwnerUpsert) {
//			SetFullName(v+v).
//		}).
//		Exec(ctx)
func (bocb *BeneficialOwnerCreateBulk) OnConflict(opts ...sql.ConflictOption) *BeneficialOwnerUpsertBulk {
	bocb.conflict = opts
	return &BeneficialOwnerUpsertBulk{
		create: bocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bocb *BeneficialOwnerCreateBulk) OnConflictColumns(columns ...string) *BeneficialOwnerUpsertBulk {
	bocb.conflict = append(bocb.conflict, sql.ConflictColumns(columns...))
	return &BeneficialOwnerUpsertBulk{
		create: bocb,
	}
}

// BeneficialOwnerUpsertBulk is the builder for "upsert"-ing
// a bulk of BeneficialOwner nodes.
type BeneficialOwnerUpsertBulk struct {
	create *BeneficialOwnerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(beneficialowner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BeneficialOwnerUpsertBulk) UpdateNewValues() *BeneficialOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(beneficialowner.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BeneficialOwner.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BeneficialOwnerUpsertBulk) Ignore() *BeneficialOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BeneficialOwnerUpsertBulk) DoNothing() *BeneficialOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BeneficialOwnerCreateBulk.OnConflict
// documentation for more info.
func (u *BeneficialOwnerUpsertBulk) Update(set func(*BeneficialOwnerUpsert)) *BeneficialOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BeneficialOwnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetFullName sets the "full_name" field.
func (u *BeneficialOwnerUpsertBulk) SetFullName(v string) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateFullName() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateFullName()
	})
}

// SetResidentialAddress sets the "residential_address" field.
func (u *BeneficialOwnerUpsertBulk) SetResidentialAddress(v string) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetResidentialAddress(v)
	})
}

// UpdateResidentialAddress sets the "residential_address" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateResidentialAddress() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateResidentialAddress()
	})
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *BeneficialOwnerUpsertBulk) SetProofOfResidentialAddressURL(v string) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetProofOfResidentialAddressURL(v)
	})
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateProofOfResidentialAddressURL() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateProofOfResidentialAddressURL()
	})
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (u *BeneficialOwnerUpsertBulk) SetGovernmentIssuedIDURL(v string) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetGovernmentIssuedIDURL(v)
	})
}

// UpdateGovernmentIssuedIDURL sets the "government_issued_id_url" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateGovernmentIssuedIDURL() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateGovernmentIssuedIDURL()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *BeneficialOwnerUpsertBulk) SetDateOfBirth(v string) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateDateOfBirth() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (u *BeneficialOwnerUpsertBulk) SetOwnershipPercentage(v float64) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.SetOwnershipPercentage(v)
	})
}

// AddOwnershipPercentage adds v to the "ownership_percentage" field.
func (u *BeneficialOwnerUpsertBulk) AddOwnershipPercentage(v float64) *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.AddOwnershipPercentage(v)
	})
}

// UpdateOwnershipPercentage sets the "ownership_percentage" field to the value that was provided on create.
func (u *BeneficialOwnerUpsertBulk) UpdateOwnershipPercentage() *BeneficialOwnerUpsertBulk {
	return u.Update(func(s *BeneficialOwnerUpsert) {
		s.UpdateOwnershipPercentage()
	})
}

// Exec executes the query.
func (u *BeneficialOwnerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BeneficialOwnerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BeneficialOwnerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BeneficialOwnerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
