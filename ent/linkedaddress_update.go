// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
)

// LinkedAddressUpdate is the builder for updating LinkedAddress entities.
type LinkedAddressUpdate struct {
	config
	hooks    []Hook
	mutation *LinkedAddressMutation
}

// Where appends a list predicates to the LinkedAddressUpdate builder.
func (lau *LinkedAddressUpdate) Where(ps ...predicate.LinkedAddress) *LinkedAddressUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetUpdatedAt sets the "updated_at" field.
func (lau *LinkedAddressUpdate) SetUpdatedAt(t time.Time) *LinkedAddressUpdate {
	lau.mutation.SetUpdatedAt(t)
	return lau
}

// SetAddress sets the "address" field.
func (lau *LinkedAddressUpdate) SetAddress(s string) *LinkedAddressUpdate {
	lau.mutation.SetAddress(s)
	return lau
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableAddress(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetAddress(*s)
	}
	return lau
}

// SetInstitution sets the "institution" field.
func (lau *LinkedAddressUpdate) SetInstitution(s string) *LinkedAddressUpdate {
	lau.mutation.SetInstitution(s)
	return lau
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableInstitution(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetInstitution(*s)
	}
	return lau
}

// SetAccountIdentifier sets the "account_identifier" field.
func (lau *LinkedAddressUpdate) SetAccountIdentifier(s string) *LinkedAddressUpdate {
	lau.mutation.SetAccountIdentifier(s)
	return lau
}

// SetNillableAccountIdentifier sets the "account_identifier" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableAccountIdentifier(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetAccountIdentifier(*s)
	}
	return lau
}

// SetAccountName sets the "account_name" field.
func (lau *LinkedAddressUpdate) SetAccountName(s string) *LinkedAddressUpdate {
	lau.mutation.SetAccountName(s)
	return lau
}

// SetNillableAccountName sets the "account_name" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableAccountName(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetAccountName(*s)
	}
	return lau
}

// SetOwnerAddress sets the "owner_address" field.
func (lau *LinkedAddressUpdate) SetOwnerAddress(s string) *LinkedAddressUpdate {
	lau.mutation.SetOwnerAddress(s)
	return lau
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableOwnerAddress(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetOwnerAddress(*s)
	}
	return lau
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (lau *LinkedAddressUpdate) SetLastIndexedBlock(i int64) *LinkedAddressUpdate {
	lau.mutation.ResetLastIndexedBlock()
	lau.mutation.SetLastIndexedBlock(i)
	return lau
}

// SetNillableLastIndexedBlock sets the "last_indexed_block" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableLastIndexedBlock(i *int64) *LinkedAddressUpdate {
	if i != nil {
		lau.SetLastIndexedBlock(*i)
	}
	return lau
}

// AddLastIndexedBlock adds i to the "last_indexed_block" field.
func (lau *LinkedAddressUpdate) AddLastIndexedBlock(i int64) *LinkedAddressUpdate {
	lau.mutation.AddLastIndexedBlock(i)
	return lau
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (lau *LinkedAddressUpdate) ClearLastIndexedBlock() *LinkedAddressUpdate {
	lau.mutation.ClearLastIndexedBlock()
	return lau
}

// SetTxHash sets the "tx_hash" field.
func (lau *LinkedAddressUpdate) SetTxHash(s string) *LinkedAddressUpdate {
	lau.mutation.SetTxHash(s)
	return lau
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (lau *LinkedAddressUpdate) SetNillableTxHash(s *string) *LinkedAddressUpdate {
	if s != nil {
		lau.SetTxHash(*s)
	}
	return lau
}

// ClearTxHash clears the value of the "tx_hash" field.
func (lau *LinkedAddressUpdate) ClearTxHash() *LinkedAddressUpdate {
	lau.mutation.ClearTxHash()
	return lau
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by IDs.
func (lau *LinkedAddressUpdate) AddPaymentOrderIDs(ids ...uuid.UUID) *LinkedAddressUpdate {
	lau.mutation.AddPaymentOrderIDs(ids...)
	return lau
}

// AddPaymentOrders adds the "payment_orders" edges to the PaymentOrder entity.
func (lau *LinkedAddressUpdate) AddPaymentOrders(p ...*PaymentOrder) *LinkedAddressUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lau.AddPaymentOrderIDs(ids...)
}

// Mutation returns the LinkedAddressMutation object of the builder.
func (lau *LinkedAddressUpdate) Mutation() *LinkedAddressMutation {
	return lau.mutation
}

// ClearPaymentOrders clears all "payment_orders" edges to the PaymentOrder entity.
func (lau *LinkedAddressUpdate) ClearPaymentOrders() *LinkedAddressUpdate {
	lau.mutation.ClearPaymentOrders()
	return lau
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to PaymentOrder entities by IDs.
func (lau *LinkedAddressUpdate) RemovePaymentOrderIDs(ids ...uuid.UUID) *LinkedAddressUpdate {
	lau.mutation.RemovePaymentOrderIDs(ids...)
	return lau
}

// RemovePaymentOrders removes "payment_orders" edges to PaymentOrder entities.
func (lau *LinkedAddressUpdate) RemovePaymentOrders(p ...*PaymentOrder) *LinkedAddressUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lau.RemovePaymentOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LinkedAddressUpdate) Save(ctx context.Context) (int, error) {
	lau.defaults()
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LinkedAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LinkedAddressUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LinkedAddressUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lau *LinkedAddressUpdate) defaults() {
	if _, ok := lau.mutation.UpdatedAt(); !ok {
		v := linkedaddress.UpdateDefaultUpdatedAt()
		lau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LinkedAddressUpdate) check() error {
	if v, ok := lau.mutation.TxHash(); ok {
		if err := linkedaddress.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "LinkedAddress.tx_hash": %w`, err)}
		}
	}
	return nil
}

func (lau *LinkedAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(linkedaddress.Table, linkedaddress.Columns, sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.UpdatedAt(); ok {
		_spec.SetField(linkedaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lau.mutation.Address(); ok {
		_spec.SetField(linkedaddress.FieldAddress, field.TypeString, value)
	}
	if value, ok := lau.mutation.Institution(); ok {
		_spec.SetField(linkedaddress.FieldInstitution, field.TypeString, value)
	}
	if value, ok := lau.mutation.AccountIdentifier(); ok {
		_spec.SetField(linkedaddress.FieldAccountIdentifier, field.TypeString, value)
	}
	if value, ok := lau.mutation.AccountName(); ok {
		_spec.SetField(linkedaddress.FieldAccountName, field.TypeString, value)
	}
	if value, ok := lau.mutation.OwnerAddress(); ok {
		_spec.SetField(linkedaddress.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := lau.mutation.LastIndexedBlock(); ok {
		_spec.SetField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64, value)
	}
	if value, ok := lau.mutation.AddedLastIndexedBlock(); ok {
		_spec.AddField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64, value)
	}
	if lau.mutation.LastIndexedBlockCleared() {
		_spec.ClearField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64)
	}
	if value, ok := lau.mutation.TxHash(); ok {
		_spec.SetField(linkedaddress.FieldTxHash, field.TypeString, value)
	}
	if lau.mutation.TxHashCleared() {
		_spec.ClearField(linkedaddress.FieldTxHash, field.TypeString)
	}
	if lau.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.RemovedPaymentOrdersIDs(); len(nodes) > 0 && !lau.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.PaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkedaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LinkedAddressUpdateOne is the builder for updating a single LinkedAddress entity.
type LinkedAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkedAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lauo *LinkedAddressUpdateOne) SetUpdatedAt(t time.Time) *LinkedAddressUpdateOne {
	lauo.mutation.SetUpdatedAt(t)
	return lauo
}

// SetAddress sets the "address" field.
func (lauo *LinkedAddressUpdateOne) SetAddress(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetAddress(s)
	return lauo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableAddress(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetAddress(*s)
	}
	return lauo
}

// SetInstitution sets the "institution" field.
func (lauo *LinkedAddressUpdateOne) SetInstitution(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetInstitution(s)
	return lauo
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableInstitution(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetInstitution(*s)
	}
	return lauo
}

// SetAccountIdentifier sets the "account_identifier" field.
func (lauo *LinkedAddressUpdateOne) SetAccountIdentifier(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetAccountIdentifier(s)
	return lauo
}

// SetNillableAccountIdentifier sets the "account_identifier" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableAccountIdentifier(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetAccountIdentifier(*s)
	}
	return lauo
}

// SetAccountName sets the "account_name" field.
func (lauo *LinkedAddressUpdateOne) SetAccountName(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetAccountName(s)
	return lauo
}

// SetNillableAccountName sets the "account_name" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableAccountName(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetAccountName(*s)
	}
	return lauo
}

// SetOwnerAddress sets the "owner_address" field.
func (lauo *LinkedAddressUpdateOne) SetOwnerAddress(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetOwnerAddress(s)
	return lauo
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableOwnerAddress(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetOwnerAddress(*s)
	}
	return lauo
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (lauo *LinkedAddressUpdateOne) SetLastIndexedBlock(i int64) *LinkedAddressUpdateOne {
	lauo.mutation.ResetLastIndexedBlock()
	lauo.mutation.SetLastIndexedBlock(i)
	return lauo
}

// SetNillableLastIndexedBlock sets the "last_indexed_block" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableLastIndexedBlock(i *int64) *LinkedAddressUpdateOne {
	if i != nil {
		lauo.SetLastIndexedBlock(*i)
	}
	return lauo
}

// AddLastIndexedBlock adds i to the "last_indexed_block" field.
func (lauo *LinkedAddressUpdateOne) AddLastIndexedBlock(i int64) *LinkedAddressUpdateOne {
	lauo.mutation.AddLastIndexedBlock(i)
	return lauo
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (lauo *LinkedAddressUpdateOne) ClearLastIndexedBlock() *LinkedAddressUpdateOne {
	lauo.mutation.ClearLastIndexedBlock()
	return lauo
}

// SetTxHash sets the "tx_hash" field.
func (lauo *LinkedAddressUpdateOne) SetTxHash(s string) *LinkedAddressUpdateOne {
	lauo.mutation.SetTxHash(s)
	return lauo
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (lauo *LinkedAddressUpdateOne) SetNillableTxHash(s *string) *LinkedAddressUpdateOne {
	if s != nil {
		lauo.SetTxHash(*s)
	}
	return lauo
}

// ClearTxHash clears the value of the "tx_hash" field.
func (lauo *LinkedAddressUpdateOne) ClearTxHash() *LinkedAddressUpdateOne {
	lauo.mutation.ClearTxHash()
	return lauo
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by IDs.
func (lauo *LinkedAddressUpdateOne) AddPaymentOrderIDs(ids ...uuid.UUID) *LinkedAddressUpdateOne {
	lauo.mutation.AddPaymentOrderIDs(ids...)
	return lauo
}

// AddPaymentOrders adds the "payment_orders" edges to the PaymentOrder entity.
func (lauo *LinkedAddressUpdateOne) AddPaymentOrders(p ...*PaymentOrder) *LinkedAddressUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lauo.AddPaymentOrderIDs(ids...)
}

// Mutation returns the LinkedAddressMutation object of the builder.
func (lauo *LinkedAddressUpdateOne) Mutation() *LinkedAddressMutation {
	return lauo.mutation
}

// ClearPaymentOrders clears all "payment_orders" edges to the PaymentOrder entity.
func (lauo *LinkedAddressUpdateOne) ClearPaymentOrders() *LinkedAddressUpdateOne {
	lauo.mutation.ClearPaymentOrders()
	return lauo
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to PaymentOrder entities by IDs.
func (lauo *LinkedAddressUpdateOne) RemovePaymentOrderIDs(ids ...uuid.UUID) *LinkedAddressUpdateOne {
	lauo.mutation.RemovePaymentOrderIDs(ids...)
	return lauo
}

// RemovePaymentOrders removes "payment_orders" edges to PaymentOrder entities.
func (lauo *LinkedAddressUpdateOne) RemovePaymentOrders(p ...*PaymentOrder) *LinkedAddressUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lauo.RemovePaymentOrderIDs(ids...)
}

// Where appends a list predicates to the LinkedAddressUpdate builder.
func (lauo *LinkedAddressUpdateOne) Where(ps ...predicate.LinkedAddress) *LinkedAddressUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LinkedAddressUpdateOne) Select(field string, fields ...string) *LinkedAddressUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LinkedAddress entity.
func (lauo *LinkedAddressUpdateOne) Save(ctx context.Context) (*LinkedAddress, error) {
	lauo.defaults()
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LinkedAddressUpdateOne) SaveX(ctx context.Context) *LinkedAddress {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LinkedAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LinkedAddressUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lauo *LinkedAddressUpdateOne) defaults() {
	if _, ok := lauo.mutation.UpdatedAt(); !ok {
		v := linkedaddress.UpdateDefaultUpdatedAt()
		lauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LinkedAddressUpdateOne) check() error {
	if v, ok := lauo.mutation.TxHash(); ok {
		if err := linkedaddress.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "LinkedAddress.tx_hash": %w`, err)}
		}
	}
	return nil
}

func (lauo *LinkedAddressUpdateOne) sqlSave(ctx context.Context) (_node *LinkedAddress, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(linkedaddress.Table, linkedaddress.Columns, sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LinkedAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linkedaddress.FieldID)
		for _, f := range fields {
			if !linkedaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linkedaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.UpdatedAt(); ok {
		_spec.SetField(linkedaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.Address(); ok {
		_spec.SetField(linkedaddress.FieldAddress, field.TypeString, value)
	}
	if value, ok := lauo.mutation.Institution(); ok {
		_spec.SetField(linkedaddress.FieldInstitution, field.TypeString, value)
	}
	if value, ok := lauo.mutation.AccountIdentifier(); ok {
		_spec.SetField(linkedaddress.FieldAccountIdentifier, field.TypeString, value)
	}
	if value, ok := lauo.mutation.AccountName(); ok {
		_spec.SetField(linkedaddress.FieldAccountName, field.TypeString, value)
	}
	if value, ok := lauo.mutation.OwnerAddress(); ok {
		_spec.SetField(linkedaddress.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := lauo.mutation.LastIndexedBlock(); ok {
		_spec.SetField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64, value)
	}
	if value, ok := lauo.mutation.AddedLastIndexedBlock(); ok {
		_spec.AddField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64, value)
	}
	if lauo.mutation.LastIndexedBlockCleared() {
		_spec.ClearField(linkedaddress.FieldLastIndexedBlock, field.TypeInt64)
	}
	if value, ok := lauo.mutation.TxHash(); ok {
		_spec.SetField(linkedaddress.FieldTxHash, field.TypeString, value)
	}
	if lauo.mutation.TxHashCleared() {
		_spec.ClearField(linkedaddress.FieldTxHash, field.TypeString)
	}
	if lauo.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.RemovedPaymentOrdersIDs(); len(nodes) > 0 && !lauo.mutation.PaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.PaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkedaddress.PaymentOrdersTable,
			Columns: []string{linkedaddress.PaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LinkedAddress{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkedaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
