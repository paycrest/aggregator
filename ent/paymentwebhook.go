// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentwebhook"
)

// PaymentWebhook is the model entity for the PaymentWebhook schema.
type PaymentWebhook struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// WebhookID holds the value of the "webhook_id" field.
	WebhookID string `json:"webhook_id,omitempty"`
	// WebhookSecret holds the value of the "webhook_secret" field.
	WebhookSecret string `json:"webhook_secret,omitempty"`
	// CallbackURL holds the value of the "callback_url" field.
	CallbackURL string `json:"callback_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentWebhookQuery when eager-loading is set.
	Edges                         PaymentWebhookEdges `json:"edges"`
	network_payment_webhook       *int
	payment_order_payment_webhook *uuid.UUID
	selectValues                  sql.SelectValues
}

// PaymentWebhookEdges holds the relations/edges for other nodes in the graph.
type PaymentWebhookEdges struct {
	// PaymentOrder holds the value of the payment_order edge.
	PaymentOrder *PaymentOrder `json:"payment_order,omitempty"`
	// Network holds the value of the network edge.
	Network *Network `json:"network,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PaymentOrderOrErr returns the PaymentOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentWebhookEdges) PaymentOrderOrErr() (*PaymentOrder, error) {
	if e.PaymentOrder != nil {
		return e.PaymentOrder, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentorder.Label}
	}
	return nil, &NotLoadedError{edge: "payment_order"}
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentWebhookEdges) NetworkOrErr() (*Network, error) {
	if e.Network != nil {
		return e.Network, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: network.Label}
	}
	return nil, &NotLoadedError{edge: "network"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentWebhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentwebhook.FieldWebhookID, paymentwebhook.FieldWebhookSecret, paymentwebhook.FieldCallbackURL:
			values[i] = new(sql.NullString)
		case paymentwebhook.FieldCreatedAt, paymentwebhook.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case paymentwebhook.FieldID:
			values[i] = new(uuid.UUID)
		case paymentwebhook.ForeignKeys[0]: // network_payment_webhook
			values[i] = new(sql.NullInt64)
		case paymentwebhook.ForeignKeys[1]: // payment_order_payment_webhook
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentWebhook fields.
func (pw *PaymentWebhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentwebhook.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pw.ID = *value
			}
		case paymentwebhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pw.CreatedAt = value.Time
			}
		case paymentwebhook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pw.UpdatedAt = value.Time
			}
		case paymentwebhook.FieldWebhookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_id", values[i])
			} else if value.Valid {
				pw.WebhookID = value.String
			}
		case paymentwebhook.FieldWebhookSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_secret", values[i])
			} else if value.Valid {
				pw.WebhookSecret = value.String
			}
		case paymentwebhook.FieldCallbackURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback_url", values[i])
			} else if value.Valid {
				pw.CallbackURL = value.String
			}
		case paymentwebhook.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field network_payment_webhook", value)
			} else if value.Valid {
				pw.network_payment_webhook = new(int)
				*pw.network_payment_webhook = int(value.Int64)
			}
		case paymentwebhook.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field payment_order_payment_webhook", values[i])
			} else if value.Valid {
				pw.payment_order_payment_webhook = new(uuid.UUID)
				*pw.payment_order_payment_webhook = *value.S.(*uuid.UUID)
			}
		default:
			pw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentWebhook.
// This includes values selected through modifiers, order, etc.
func (pw *PaymentWebhook) Value(name string) (ent.Value, error) {
	return pw.selectValues.Get(name)
}

// QueryPaymentOrder queries the "payment_order" edge of the PaymentWebhook entity.
func (pw *PaymentWebhook) QueryPaymentOrder() *PaymentOrderQuery {
	return NewPaymentWebhookClient(pw.config).QueryPaymentOrder(pw)
}

// QueryNetwork queries the "network" edge of the PaymentWebhook entity.
func (pw *PaymentWebhook) QueryNetwork() *NetworkQuery {
	return NewPaymentWebhookClient(pw.config).QueryNetwork(pw)
}

// Update returns a builder for updating this PaymentWebhook.
// Note that you need to call PaymentWebhook.Unwrap() before calling this method if this PaymentWebhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (pw *PaymentWebhook) Update() *PaymentWebhookUpdateOne {
	return NewPaymentWebhookClient(pw.config).UpdateOne(pw)
}

// Unwrap unwraps the PaymentWebhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pw *PaymentWebhook) Unwrap() *PaymentWebhook {
	_tx, ok := pw.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentWebhook is not a transactional entity")
	}
	pw.config.driver = _tx.drv
	return pw
}

// String implements the fmt.Stringer.
func (pw *PaymentWebhook) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentWebhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("webhook_id=")
	builder.WriteString(pw.WebhookID)
	builder.WriteString(", ")
	builder.WriteString("webhook_secret=")
	builder.WriteString(pw.WebhookSecret)
	builder.WriteString(", ")
	builder.WriteString("callback_url=")
	builder.WriteString(pw.CallbackURL)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentWebhooks is a parsable slice of PaymentWebhook.
type PaymentWebhooks []*PaymentWebhook
