// Code generated by ent, DO NOT EDIT.

package paymentorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmount, v))
}

// AmountPaid applies equality check predicate on the "amount_paid" field. It's identical to AmountPaidEQ.
func AmountPaid(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountPaid, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldTxHash, v))
}

// ReceiveAddressText applies equality check predicate on the "receive_address_text" field. It's identical to ReceiveAddressTextEQ.
func ReceiveAddressText(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReceiveAddressText, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldLastUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldAmount, v))
}

// AmountPaidEQ applies the EQ predicate on the "amount_paid" field.
func AmountPaidEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountPaidNEQ applies the NEQ predicate on the "amount_paid" field.
func AmountPaidNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldAmountPaid, v))
}

// AmountPaidIn applies the In predicate on the "amount_paid" field.
func AmountPaidIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldAmountPaid, vs...))
}

// AmountPaidNotIn applies the NotIn predicate on the "amount_paid" field.
func AmountPaidNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldAmountPaid, vs...))
}

// AmountPaidGT applies the GT predicate on the "amount_paid" field.
func AmountPaidGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldAmountPaid, v))
}

// AmountPaidGTE applies the GTE predicate on the "amount_paid" field.
func AmountPaidGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldAmountPaid, v))
}

// AmountPaidLT applies the LT predicate on the "amount_paid" field.
func AmountPaidLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldAmountPaid, v))
}

// AmountPaidLTE applies the LTE predicate on the "amount_paid" field.
func AmountPaidLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldAmountPaid, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldTxHash, v))
}

// ReceiveAddressTextEQ applies the EQ predicate on the "receive_address_text" field.
func ReceiveAddressTextEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReceiveAddressText, v))
}

// ReceiveAddressTextNEQ applies the NEQ predicate on the "receive_address_text" field.
func ReceiveAddressTextNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldReceiveAddressText, v))
}

// ReceiveAddressTextIn applies the In predicate on the "receive_address_text" field.
func ReceiveAddressTextIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldReceiveAddressText, vs...))
}

// ReceiveAddressTextNotIn applies the NotIn predicate on the "receive_address_text" field.
func ReceiveAddressTextNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldReceiveAddressText, vs...))
}

// ReceiveAddressTextGT applies the GT predicate on the "receive_address_text" field.
func ReceiveAddressTextGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldReceiveAddressText, v))
}

// ReceiveAddressTextGTE applies the GTE predicate on the "receive_address_text" field.
func ReceiveAddressTextGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldReceiveAddressText, v))
}

// ReceiveAddressTextLT applies the LT predicate on the "receive_address_text" field.
func ReceiveAddressTextLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldReceiveAddressText, v))
}

// ReceiveAddressTextLTE applies the LTE predicate on the "receive_address_text" field.
func ReceiveAddressTextLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldReceiveAddressText, v))
}

// ReceiveAddressTextContains applies the Contains predicate on the "receive_address_text" field.
func ReceiveAddressTextContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldReceiveAddressText, v))
}

// ReceiveAddressTextHasPrefix applies the HasPrefix predicate on the "receive_address_text" field.
func ReceiveAddressTextHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldReceiveAddressText, v))
}

// ReceiveAddressTextHasSuffix applies the HasSuffix predicate on the "receive_address_text" field.
func ReceiveAddressTextHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldReceiveAddressText, v))
}

// ReceiveAddressTextEqualFold applies the EqualFold predicate on the "receive_address_text" field.
func ReceiveAddressTextEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldReceiveAddressText, v))
}

// ReceiveAddressTextContainsFold applies the ContainsFold predicate on the "receive_address_text" field.
func ReceiveAddressTextContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldReceiveAddressText, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldStatus, vs...))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldLastUsed))
}

// HasAPIKey applies the HasEdge predicate on the "api_key" edge.
func HasAPIKey() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, APIKeyTable, APIKeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeyWith applies the HasEdge predicate on the "api_key" edge with a given conditions (other predicates).
func HasAPIKeyWith(preds ...predicate.APIKey) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newAPIKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToken applies the HasEdge predicate on the "token" edge.
func HasToken() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TokenTable, TokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenWith applies the HasEdge predicate on the "token" edge with a given conditions (other predicates).
func HasTokenWith(preds ...predicate.Token) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiveAddress applies the HasEdge predicate on the "receive_address" edge.
func HasReceiveAddress() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ReceiveAddressTable, ReceiveAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiveAddressWith applies the HasEdge predicate on the "receive_address" edge with a given conditions (other predicates).
func HasReceiveAddressWith(preds ...predicate.ReceiveAddress) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newReceiveAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.PaymentOrderRecipient) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
