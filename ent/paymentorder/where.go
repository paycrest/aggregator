// Code generated by ent, DO NOT EDIT.

package paymentorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmount, v))
}

// AmountPaid applies equality check predicate on the "amount_paid" field. It's identical to AmountPaidEQ.
func AmountPaid(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountReturned applies equality check predicate on the "amount_returned" field. It's identical to AmountReturnedEQ.
func AmountReturned(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountReturned, v))
}

// PercentSettled applies equality check predicate on the "percent_settled" field. It's identical to PercentSettledEQ.
func PercentSettled(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldPercentSettled, v))
}

// SenderFee applies equality check predicate on the "sender_fee" field. It's identical to SenderFeeEQ.
func SenderFee(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldSenderFee, v))
}

// NetworkFee applies equality check predicate on the "network_fee" field. It's identical to NetworkFeeEQ.
func NetworkFee(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldNetworkFee, v))
}

// ProtocolFee applies equality check predicate on the "protocol_fee" field. It's identical to ProtocolFeeEQ.
func ProtocolFee(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldProtocolFee, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldRate, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldTxHash, v))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldBlockNumber, v))
}

// FromAddress applies equality check predicate on the "from_address" field. It's identical to FromAddressEQ.
func FromAddress(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFromAddress, v))
}

// ReturnAddress applies equality check predicate on the "return_address" field. It's identical to ReturnAddressEQ.
func ReturnAddress(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReturnAddress, v))
}

// ReceiveAddressText applies equality check predicate on the "receive_address_text" field. It's identical to ReceiveAddressTextEQ.
func ReceiveAddressText(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReceiveAddressText, v))
}

// FeePercent applies equality check predicate on the "fee_percent" field. It's identical to FeePercentEQ.
func FeePercent(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFeePercent, v))
}

// FeeAddress applies equality check predicate on the "fee_address" field. It's identical to FeeAddressEQ.
func FeeAddress(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFeeAddress, v))
}

// GatewayID applies equality check predicate on the "gateway_id" field. It's identical to GatewayIDEQ.
func GatewayID(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldGatewayID, v))
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReference, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldAmount, v))
}

// AmountPaidEQ applies the EQ predicate on the "amount_paid" field.
func AmountPaidEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountPaidNEQ applies the NEQ predicate on the "amount_paid" field.
func AmountPaidNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldAmountPaid, v))
}

// AmountPaidIn applies the In predicate on the "amount_paid" field.
func AmountPaidIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldAmountPaid, vs...))
}

// AmountPaidNotIn applies the NotIn predicate on the "amount_paid" field.
func AmountPaidNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldAmountPaid, vs...))
}

// AmountPaidGT applies the GT predicate on the "amount_paid" field.
func AmountPaidGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldAmountPaid, v))
}

// AmountPaidGTE applies the GTE predicate on the "amount_paid" field.
func AmountPaidGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldAmountPaid, v))
}

// AmountPaidLT applies the LT predicate on the "amount_paid" field.
func AmountPaidLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldAmountPaid, v))
}

// AmountPaidLTE applies the LTE predicate on the "amount_paid" field.
func AmountPaidLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldAmountPaid, v))
}

// AmountReturnedEQ applies the EQ predicate on the "amount_returned" field.
func AmountReturnedEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldAmountReturned, v))
}

// AmountReturnedNEQ applies the NEQ predicate on the "amount_returned" field.
func AmountReturnedNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldAmountReturned, v))
}

// AmountReturnedIn applies the In predicate on the "amount_returned" field.
func AmountReturnedIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldAmountReturned, vs...))
}

// AmountReturnedNotIn applies the NotIn predicate on the "amount_returned" field.
func AmountReturnedNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldAmountReturned, vs...))
}

// AmountReturnedGT applies the GT predicate on the "amount_returned" field.
func AmountReturnedGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldAmountReturned, v))
}

// AmountReturnedGTE applies the GTE predicate on the "amount_returned" field.
func AmountReturnedGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldAmountReturned, v))
}

// AmountReturnedLT applies the LT predicate on the "amount_returned" field.
func AmountReturnedLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldAmountReturned, v))
}

// AmountReturnedLTE applies the LTE predicate on the "amount_returned" field.
func AmountReturnedLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldAmountReturned, v))
}

// PercentSettledEQ applies the EQ predicate on the "percent_settled" field.
func PercentSettledEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldPercentSettled, v))
}

// PercentSettledNEQ applies the NEQ predicate on the "percent_settled" field.
func PercentSettledNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldPercentSettled, v))
}

// PercentSettledIn applies the In predicate on the "percent_settled" field.
func PercentSettledIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldPercentSettled, vs...))
}

// PercentSettledNotIn applies the NotIn predicate on the "percent_settled" field.
func PercentSettledNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldPercentSettled, vs...))
}

// PercentSettledGT applies the GT predicate on the "percent_settled" field.
func PercentSettledGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldPercentSettled, v))
}

// PercentSettledGTE applies the GTE predicate on the "percent_settled" field.
func PercentSettledGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldPercentSettled, v))
}

// PercentSettledLT applies the LT predicate on the "percent_settled" field.
func PercentSettledLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldPercentSettled, v))
}

// PercentSettledLTE applies the LTE predicate on the "percent_settled" field.
func PercentSettledLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldPercentSettled, v))
}

// SenderFeeEQ applies the EQ predicate on the "sender_fee" field.
func SenderFeeEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldSenderFee, v))
}

// SenderFeeNEQ applies the NEQ predicate on the "sender_fee" field.
func SenderFeeNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldSenderFee, v))
}

// SenderFeeIn applies the In predicate on the "sender_fee" field.
func SenderFeeIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldSenderFee, vs...))
}

// SenderFeeNotIn applies the NotIn predicate on the "sender_fee" field.
func SenderFeeNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldSenderFee, vs...))
}

// SenderFeeGT applies the GT predicate on the "sender_fee" field.
func SenderFeeGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldSenderFee, v))
}

// SenderFeeGTE applies the GTE predicate on the "sender_fee" field.
func SenderFeeGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldSenderFee, v))
}

// SenderFeeLT applies the LT predicate on the "sender_fee" field.
func SenderFeeLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldSenderFee, v))
}

// SenderFeeLTE applies the LTE predicate on the "sender_fee" field.
func SenderFeeLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldSenderFee, v))
}

// NetworkFeeEQ applies the EQ predicate on the "network_fee" field.
func NetworkFeeEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldNetworkFee, v))
}

// NetworkFeeNEQ applies the NEQ predicate on the "network_fee" field.
func NetworkFeeNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldNetworkFee, v))
}

// NetworkFeeIn applies the In predicate on the "network_fee" field.
func NetworkFeeIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldNetworkFee, vs...))
}

// NetworkFeeNotIn applies the NotIn predicate on the "network_fee" field.
func NetworkFeeNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldNetworkFee, vs...))
}

// NetworkFeeGT applies the GT predicate on the "network_fee" field.
func NetworkFeeGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldNetworkFee, v))
}

// NetworkFeeGTE applies the GTE predicate on the "network_fee" field.
func NetworkFeeGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldNetworkFee, v))
}

// NetworkFeeLT applies the LT predicate on the "network_fee" field.
func NetworkFeeLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldNetworkFee, v))
}

// NetworkFeeLTE applies the LTE predicate on the "network_fee" field.
func NetworkFeeLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldNetworkFee, v))
}

// ProtocolFeeEQ applies the EQ predicate on the "protocol_fee" field.
func ProtocolFeeEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldProtocolFee, v))
}

// ProtocolFeeNEQ applies the NEQ predicate on the "protocol_fee" field.
func ProtocolFeeNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldProtocolFee, v))
}

// ProtocolFeeIn applies the In predicate on the "protocol_fee" field.
func ProtocolFeeIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldProtocolFee, vs...))
}

// ProtocolFeeNotIn applies the NotIn predicate on the "protocol_fee" field.
func ProtocolFeeNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldProtocolFee, vs...))
}

// ProtocolFeeGT applies the GT predicate on the "protocol_fee" field.
func ProtocolFeeGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldProtocolFee, v))
}

// ProtocolFeeGTE applies the GTE predicate on the "protocol_fee" field.
func ProtocolFeeGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldProtocolFee, v))
}

// ProtocolFeeLT applies the LT predicate on the "protocol_fee" field.
func ProtocolFeeLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldProtocolFee, v))
}

// ProtocolFeeLTE applies the LTE predicate on the "protocol_fee" field.
func ProtocolFeeLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldProtocolFee, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldRate, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldTxHash, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v int64) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldBlockNumber, v))
}

// FromAddressEQ applies the EQ predicate on the "from_address" field.
func FromAddressEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFromAddress, v))
}

// FromAddressNEQ applies the NEQ predicate on the "from_address" field.
func FromAddressNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldFromAddress, v))
}

// FromAddressIn applies the In predicate on the "from_address" field.
func FromAddressIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldFromAddress, vs...))
}

// FromAddressNotIn applies the NotIn predicate on the "from_address" field.
func FromAddressNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldFromAddress, vs...))
}

// FromAddressGT applies the GT predicate on the "from_address" field.
func FromAddressGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldFromAddress, v))
}

// FromAddressGTE applies the GTE predicate on the "from_address" field.
func FromAddressGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldFromAddress, v))
}

// FromAddressLT applies the LT predicate on the "from_address" field.
func FromAddressLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldFromAddress, v))
}

// FromAddressLTE applies the LTE predicate on the "from_address" field.
func FromAddressLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldFromAddress, v))
}

// FromAddressContains applies the Contains predicate on the "from_address" field.
func FromAddressContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldFromAddress, v))
}

// FromAddressHasPrefix applies the HasPrefix predicate on the "from_address" field.
func FromAddressHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldFromAddress, v))
}

// FromAddressHasSuffix applies the HasSuffix predicate on the "from_address" field.
func FromAddressHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldFromAddress, v))
}

// FromAddressIsNil applies the IsNil predicate on the "from_address" field.
func FromAddressIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldFromAddress))
}

// FromAddressNotNil applies the NotNil predicate on the "from_address" field.
func FromAddressNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldFromAddress))
}

// FromAddressEqualFold applies the EqualFold predicate on the "from_address" field.
func FromAddressEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldFromAddress, v))
}

// FromAddressContainsFold applies the ContainsFold predicate on the "from_address" field.
func FromAddressContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldFromAddress, v))
}

// ReturnAddressEQ applies the EQ predicate on the "return_address" field.
func ReturnAddressEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReturnAddress, v))
}

// ReturnAddressNEQ applies the NEQ predicate on the "return_address" field.
func ReturnAddressNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldReturnAddress, v))
}

// ReturnAddressIn applies the In predicate on the "return_address" field.
func ReturnAddressIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldReturnAddress, vs...))
}

// ReturnAddressNotIn applies the NotIn predicate on the "return_address" field.
func ReturnAddressNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldReturnAddress, vs...))
}

// ReturnAddressGT applies the GT predicate on the "return_address" field.
func ReturnAddressGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldReturnAddress, v))
}

// ReturnAddressGTE applies the GTE predicate on the "return_address" field.
func ReturnAddressGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldReturnAddress, v))
}

// ReturnAddressLT applies the LT predicate on the "return_address" field.
func ReturnAddressLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldReturnAddress, v))
}

// ReturnAddressLTE applies the LTE predicate on the "return_address" field.
func ReturnAddressLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldReturnAddress, v))
}

// ReturnAddressContains applies the Contains predicate on the "return_address" field.
func ReturnAddressContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldReturnAddress, v))
}

// ReturnAddressHasPrefix applies the HasPrefix predicate on the "return_address" field.
func ReturnAddressHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldReturnAddress, v))
}

// ReturnAddressHasSuffix applies the HasSuffix predicate on the "return_address" field.
func ReturnAddressHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldReturnAddress, v))
}

// ReturnAddressIsNil applies the IsNil predicate on the "return_address" field.
func ReturnAddressIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldReturnAddress))
}

// ReturnAddressNotNil applies the NotNil predicate on the "return_address" field.
func ReturnAddressNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldReturnAddress))
}

// ReturnAddressEqualFold applies the EqualFold predicate on the "return_address" field.
func ReturnAddressEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldReturnAddress, v))
}

// ReturnAddressContainsFold applies the ContainsFold predicate on the "return_address" field.
func ReturnAddressContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldReturnAddress, v))
}

// ReceiveAddressTextEQ applies the EQ predicate on the "receive_address_text" field.
func ReceiveAddressTextEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReceiveAddressText, v))
}

// ReceiveAddressTextNEQ applies the NEQ predicate on the "receive_address_text" field.
func ReceiveAddressTextNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldReceiveAddressText, v))
}

// ReceiveAddressTextIn applies the In predicate on the "receive_address_text" field.
func ReceiveAddressTextIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldReceiveAddressText, vs...))
}

// ReceiveAddressTextNotIn applies the NotIn predicate on the "receive_address_text" field.
func ReceiveAddressTextNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldReceiveAddressText, vs...))
}

// ReceiveAddressTextGT applies the GT predicate on the "receive_address_text" field.
func ReceiveAddressTextGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldReceiveAddressText, v))
}

// ReceiveAddressTextGTE applies the GTE predicate on the "receive_address_text" field.
func ReceiveAddressTextGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldReceiveAddressText, v))
}

// ReceiveAddressTextLT applies the LT predicate on the "receive_address_text" field.
func ReceiveAddressTextLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldReceiveAddressText, v))
}

// ReceiveAddressTextLTE applies the LTE predicate on the "receive_address_text" field.
func ReceiveAddressTextLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldReceiveAddressText, v))
}

// ReceiveAddressTextContains applies the Contains predicate on the "receive_address_text" field.
func ReceiveAddressTextContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldReceiveAddressText, v))
}

// ReceiveAddressTextHasPrefix applies the HasPrefix predicate on the "receive_address_text" field.
func ReceiveAddressTextHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldReceiveAddressText, v))
}

// ReceiveAddressTextHasSuffix applies the HasSuffix predicate on the "receive_address_text" field.
func ReceiveAddressTextHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldReceiveAddressText, v))
}

// ReceiveAddressTextEqualFold applies the EqualFold predicate on the "receive_address_text" field.
func ReceiveAddressTextEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldReceiveAddressText, v))
}

// ReceiveAddressTextContainsFold applies the ContainsFold predicate on the "receive_address_text" field.
func ReceiveAddressTextContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldReceiveAddressText, v))
}

// FeePercentEQ applies the EQ predicate on the "fee_percent" field.
func FeePercentEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFeePercent, v))
}

// FeePercentNEQ applies the NEQ predicate on the "fee_percent" field.
func FeePercentNEQ(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldFeePercent, v))
}

// FeePercentIn applies the In predicate on the "fee_percent" field.
func FeePercentIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldFeePercent, vs...))
}

// FeePercentNotIn applies the NotIn predicate on the "fee_percent" field.
func FeePercentNotIn(vs ...decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldFeePercent, vs...))
}

// FeePercentGT applies the GT predicate on the "fee_percent" field.
func FeePercentGT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldFeePercent, v))
}

// FeePercentGTE applies the GTE predicate on the "fee_percent" field.
func FeePercentGTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldFeePercent, v))
}

// FeePercentLT applies the LT predicate on the "fee_percent" field.
func FeePercentLT(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldFeePercent, v))
}

// FeePercentLTE applies the LTE predicate on the "fee_percent" field.
func FeePercentLTE(v decimal.Decimal) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldFeePercent, v))
}

// FeeAddressEQ applies the EQ predicate on the "fee_address" field.
func FeeAddressEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldFeeAddress, v))
}

// FeeAddressNEQ applies the NEQ predicate on the "fee_address" field.
func FeeAddressNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldFeeAddress, v))
}

// FeeAddressIn applies the In predicate on the "fee_address" field.
func FeeAddressIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldFeeAddress, vs...))
}

// FeeAddressNotIn applies the NotIn predicate on the "fee_address" field.
func FeeAddressNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldFeeAddress, vs...))
}

// FeeAddressGT applies the GT predicate on the "fee_address" field.
func FeeAddressGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldFeeAddress, v))
}

// FeeAddressGTE applies the GTE predicate on the "fee_address" field.
func FeeAddressGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldFeeAddress, v))
}

// FeeAddressLT applies the LT predicate on the "fee_address" field.
func FeeAddressLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldFeeAddress, v))
}

// FeeAddressLTE applies the LTE predicate on the "fee_address" field.
func FeeAddressLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldFeeAddress, v))
}

// FeeAddressContains applies the Contains predicate on the "fee_address" field.
func FeeAddressContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldFeeAddress, v))
}

// FeeAddressHasPrefix applies the HasPrefix predicate on the "fee_address" field.
func FeeAddressHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldFeeAddress, v))
}

// FeeAddressHasSuffix applies the HasSuffix predicate on the "fee_address" field.
func FeeAddressHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldFeeAddress, v))
}

// FeeAddressIsNil applies the IsNil predicate on the "fee_address" field.
func FeeAddressIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldFeeAddress))
}

// FeeAddressNotNil applies the NotNil predicate on the "fee_address" field.
func FeeAddressNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldFeeAddress))
}

// FeeAddressEqualFold applies the EqualFold predicate on the "fee_address" field.
func FeeAddressEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldFeeAddress, v))
}

// FeeAddressContainsFold applies the ContainsFold predicate on the "fee_address" field.
func FeeAddressContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldFeeAddress, v))
}

// GatewayIDEQ applies the EQ predicate on the "gateway_id" field.
func GatewayIDEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldGatewayID, v))
}

// GatewayIDNEQ applies the NEQ predicate on the "gateway_id" field.
func GatewayIDNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldGatewayID, v))
}

// GatewayIDIn applies the In predicate on the "gateway_id" field.
func GatewayIDIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldGatewayID, vs...))
}

// GatewayIDNotIn applies the NotIn predicate on the "gateway_id" field.
func GatewayIDNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldGatewayID, vs...))
}

// GatewayIDGT applies the GT predicate on the "gateway_id" field.
func GatewayIDGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldGatewayID, v))
}

// GatewayIDGTE applies the GTE predicate on the "gateway_id" field.
func GatewayIDGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldGatewayID, v))
}

// GatewayIDLT applies the LT predicate on the "gateway_id" field.
func GatewayIDLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldGatewayID, v))
}

// GatewayIDLTE applies the LTE predicate on the "gateway_id" field.
func GatewayIDLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldGatewayID, v))
}

// GatewayIDContains applies the Contains predicate on the "gateway_id" field.
func GatewayIDContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldGatewayID, v))
}

// GatewayIDHasPrefix applies the HasPrefix predicate on the "gateway_id" field.
func GatewayIDHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldGatewayID, v))
}

// GatewayIDHasSuffix applies the HasSuffix predicate on the "gateway_id" field.
func GatewayIDHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldGatewayID, v))
}

// GatewayIDIsNil applies the IsNil predicate on the "gateway_id" field.
func GatewayIDIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldGatewayID))
}

// GatewayIDNotNil applies the NotNil predicate on the "gateway_id" field.
func GatewayIDNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldGatewayID))
}

// GatewayIDEqualFold applies the EqualFold predicate on the "gateway_id" field.
func GatewayIDEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldGatewayID, v))
}

// GatewayIDContainsFold applies the ContainsFold predicate on the "gateway_id" field.
func GatewayIDContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldGatewayID, v))
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldReference, v))
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldReference, v))
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldReference, vs...))
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldReference, vs...))
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGT(FieldReference, v))
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldGTE(FieldReference, v))
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLT(FieldReference, v))
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldLTE(FieldReference, v))
}

// ReferenceContains applies the Contains predicate on the "reference" field.
func ReferenceContains(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContains(FieldReference, v))
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "reference" field.
func ReferenceHasPrefix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasPrefix(FieldReference, v))
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "reference" field.
func ReferenceHasSuffix(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldHasSuffix(FieldReference, v))
}

// ReferenceIsNil applies the IsNil predicate on the "reference" field.
func ReferenceIsNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIsNull(FieldReference))
}

// ReferenceNotNil applies the NotNil predicate on the "reference" field.
func ReferenceNotNil() predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotNull(FieldReference))
}

// ReferenceEqualFold applies the EqualFold predicate on the "reference" field.
func ReferenceEqualFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEqualFold(FieldReference, v))
}

// ReferenceContainsFold applies the ContainsFold predicate on the "reference" field.
func ReferenceContainsFold(v string) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldContainsFold(FieldReference, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.FieldNotIn(FieldStatus, vs...))
}

// HasSenderProfile applies the HasEdge predicate on the "sender_profile" edge.
func HasSenderProfile() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SenderProfileTable, SenderProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderProfileWith applies the HasEdge predicate on the "sender_profile" edge with a given conditions (other predicates).
func HasSenderProfileWith(preds ...predicate.SenderProfile) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newSenderProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToken applies the HasEdge predicate on the "token" edge.
func HasToken() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TokenTable, TokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenWith applies the HasEdge predicate on the "token" edge with a given conditions (other predicates).
func HasTokenWith(preds ...predicate.Token) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinkedAddress applies the HasEdge predicate on the "linked_address" edge.
func HasLinkedAddress() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LinkedAddressTable, LinkedAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinkedAddressWith applies the HasEdge predicate on the "linked_address" edge with a given conditions (other predicates).
func HasLinkedAddressWith(preds ...predicate.LinkedAddress) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newLinkedAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiveAddress applies the HasEdge predicate on the "receive_address" edge.
func HasReceiveAddress() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ReceiveAddressTable, ReceiveAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiveAddressWith applies the HasEdge predicate on the "receive_address" edge with a given conditions (other predicates).
func HasReceiveAddressWith(preds ...predicate.ReceiveAddress) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newReceiveAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.PaymentOrderRecipient) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.TransactionLog) predicate.PaymentOrder {
	return predicate.PaymentOrder(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentOrder) predicate.PaymentOrder {
	return predicate.PaymentOrder(sql.NotPredicates(p))
}
