// Code generated by ent, DO NOT EDIT.

package receiveaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldAddress, v))
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldSalt, v))
}

// LastIndexedBlock applies equality check predicate on the "last_indexed_block" field. It's identical to LastIndexedBlockEQ.
func LastIndexedBlock(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldLastIndexedBlock, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldLastUsed, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldTxHash, v))
}

// ValidUntil applies equality check predicate on the "valid_until" field. It's identical to ValidUntilEQ.
func ValidUntil(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldValidUntil, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldUpdatedAt, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldContainsFold(FieldAddress, v))
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldSalt, v))
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldSalt, v))
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...[]byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldSalt, vs...))
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...[]byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldSalt, vs...))
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldSalt, v))
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldSalt, v))
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldSalt, v))
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v []byte) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldSalt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldStatus, vs...))
}

// LastIndexedBlockEQ applies the EQ predicate on the "last_indexed_block" field.
func LastIndexedBlockEQ(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldLastIndexedBlock, v))
}

// LastIndexedBlockNEQ applies the NEQ predicate on the "last_indexed_block" field.
func LastIndexedBlockNEQ(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldLastIndexedBlock, v))
}

// LastIndexedBlockIn applies the In predicate on the "last_indexed_block" field.
func LastIndexedBlockIn(vs ...int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldLastIndexedBlock, vs...))
}

// LastIndexedBlockNotIn applies the NotIn predicate on the "last_indexed_block" field.
func LastIndexedBlockNotIn(vs ...int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldLastIndexedBlock, vs...))
}

// LastIndexedBlockGT applies the GT predicate on the "last_indexed_block" field.
func LastIndexedBlockGT(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldLastIndexedBlock, v))
}

// LastIndexedBlockGTE applies the GTE predicate on the "last_indexed_block" field.
func LastIndexedBlockGTE(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldLastIndexedBlock, v))
}

// LastIndexedBlockLT applies the LT predicate on the "last_indexed_block" field.
func LastIndexedBlockLT(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldLastIndexedBlock, v))
}

// LastIndexedBlockLTE applies the LTE predicate on the "last_indexed_block" field.
func LastIndexedBlockLTE(v int64) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldLastIndexedBlock, v))
}

// LastIndexedBlockIsNil applies the IsNil predicate on the "last_indexed_block" field.
func LastIndexedBlockIsNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIsNull(FieldLastIndexedBlock))
}

// LastIndexedBlockNotNil applies the NotNil predicate on the "last_indexed_block" field.
func LastIndexedBlockNotNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotNull(FieldLastIndexedBlock))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotNull(FieldLastUsed))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldContainsFold(FieldTxHash, v))
}

// ValidUntilEQ applies the EQ predicate on the "valid_until" field.
func ValidUntilEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldEQ(FieldValidUntil, v))
}

// ValidUntilNEQ applies the NEQ predicate on the "valid_until" field.
func ValidUntilNEQ(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNEQ(FieldValidUntil, v))
}

// ValidUntilIn applies the In predicate on the "valid_until" field.
func ValidUntilIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIn(FieldValidUntil, vs...))
}

// ValidUntilNotIn applies the NotIn predicate on the "valid_until" field.
func ValidUntilNotIn(vs ...time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotIn(FieldValidUntil, vs...))
}

// ValidUntilGT applies the GT predicate on the "valid_until" field.
func ValidUntilGT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGT(FieldValidUntil, v))
}

// ValidUntilGTE applies the GTE predicate on the "valid_until" field.
func ValidUntilGTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldGTE(FieldValidUntil, v))
}

// ValidUntilLT applies the LT predicate on the "valid_until" field.
func ValidUntilLT(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLT(FieldValidUntil, v))
}

// ValidUntilLTE applies the LTE predicate on the "valid_until" field.
func ValidUntilLTE(v time.Time) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldLTE(FieldValidUntil, v))
}

// ValidUntilIsNil applies the IsNil predicate on the "valid_until" field.
func ValidUntilIsNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldIsNull(FieldValidUntil))
}

// ValidUntilNotNil applies the NotNil predicate on the "valid_until" field.
func ValidUntilNotNil() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.FieldNotNull(FieldValidUntil))
}

// HasPaymentOrder applies the HasEdge predicate on the "payment_order" edge.
func HasPaymentOrder() predicate.ReceiveAddress {
	return predicate.ReceiveAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PaymentOrderTable, PaymentOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentOrderWith applies the HasEdge predicate on the "payment_order" edge with a given conditions (other predicates).
func HasPaymentOrderWith(preds ...predicate.PaymentOrder) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(func(s *sql.Selector) {
		step := newPaymentOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReceiveAddress) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReceiveAddress) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReceiveAddress) predicate.ReceiveAddress {
	return predicate.ReceiveAddress(sql.NotPredicates(p))
}
