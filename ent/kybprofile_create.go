// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybprofile"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBProfileCreate is the builder for creating a KYBProfile entity.
type KYBProfileCreate struct {
	config
	mutation *KYBProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kpc *KYBProfileCreate) SetCreatedAt(t time.Time) *KYBProfileCreate {
	kpc.mutation.SetCreatedAt(t)
	return kpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableCreatedAt(t *time.Time) *KYBProfileCreate {
	if t != nil {
		kpc.SetCreatedAt(*t)
	}
	return kpc
}

// SetUpdatedAt sets the "updated_at" field.
func (kpc *KYBProfileCreate) SetUpdatedAt(t time.Time) *KYBProfileCreate {
	kpc.mutation.SetUpdatedAt(t)
	return kpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableUpdatedAt(t *time.Time) *KYBProfileCreate {
	if t != nil {
		kpc.SetUpdatedAt(*t)
	}
	return kpc
}

// SetMobileNumber sets the "mobile_number" field.
func (kpc *KYBProfileCreate) SetMobileNumber(s string) *KYBProfileCreate {
	kpc.mutation.SetMobileNumber(s)
	return kpc
}

// SetCompanyName sets the "company_name" field.
func (kpc *KYBProfileCreate) SetCompanyName(s string) *KYBProfileCreate {
	kpc.mutation.SetCompanyName(s)
	return kpc
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kpc *KYBProfileCreate) SetRegisteredBusinessAddress(s string) *KYBProfileCreate {
	kpc.mutation.SetRegisteredBusinessAddress(s)
	return kpc
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kpc *KYBProfileCreate) SetCertificateOfIncorporationURL(s string) *KYBProfileCreate {
	kpc.mutation.SetCertificateOfIncorporationURL(s)
	return kpc
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kpc *KYBProfileCreate) SetArticlesOfIncorporationURL(s string) *KYBProfileCreate {
	kpc.mutation.SetArticlesOfIncorporationURL(s)
	return kpc
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kpc *KYBProfileCreate) SetBusinessLicenseURL(s string) *KYBProfileCreate {
	kpc.mutation.SetBusinessLicenseURL(s)
	return kpc
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableBusinessLicenseURL(s *string) *KYBProfileCreate {
	if s != nil {
		kpc.SetBusinessLicenseURL(*s)
	}
	return kpc
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kpc *KYBProfileCreate) SetProofOfBusinessAddressURL(s string) *KYBProfileCreate {
	kpc.mutation.SetProofOfBusinessAddressURL(s)
	return kpc
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kpc *KYBProfileCreate) SetAmlPolicyURL(s string) *KYBProfileCreate {
	kpc.mutation.SetAmlPolicyURL(s)
	return kpc
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableAmlPolicyURL(s *string) *KYBProfileCreate {
	if s != nil {
		kpc.SetAmlPolicyURL(*s)
	}
	return kpc
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kpc *KYBProfileCreate) SetKycPolicyURL(s string) *KYBProfileCreate {
	kpc.mutation.SetKycPolicyURL(s)
	return kpc
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableKycPolicyURL(s *string) *KYBProfileCreate {
	if s != nil {
		kpc.SetKycPolicyURL(*s)
	}
	return kpc
}

// SetID sets the "id" field.
func (kpc *KYBProfileCreate) SetID(u uuid.UUID) *KYBProfileCreate {
	kpc.mutation.SetID(u)
	return kpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableID(u *uuid.UUID) *KYBProfileCreate {
	if u != nil {
		kpc.SetID(*u)
	}
	return kpc
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kpc *KYBProfileCreate) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBProfileCreate {
	kpc.mutation.AddBeneficialOwnerIDs(ids...)
	return kpc
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kpc *KYBProfileCreate) AddBeneficialOwners(b ...*BeneficialOwner) *KYBProfileCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kpc.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kpc *KYBProfileCreate) SetUserID(id uuid.UUID) *KYBProfileCreate {
	kpc.mutation.SetUserID(id)
	return kpc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kpc *KYBProfileCreate) SetNillableUserID(id *uuid.UUID) *KYBProfileCreate {
	if id != nil {
		kpc = kpc.SetUserID(*id)
	}
	return kpc
}

// SetUser sets the "user" edge to the User entity.
func (kpc *KYBProfileCreate) SetUser(u *User) *KYBProfileCreate {
	return kpc.SetUserID(u.ID)
}

// Mutation returns the KYBProfileMutation object of the builder.
func (kpc *KYBProfileCreate) Mutation() *KYBProfileMutation {
	return kpc.mutation
}

// Save creates the KYBProfile in the database.
func (kpc *KYBProfileCreate) Save(ctx context.Context) (*KYBProfile, error) {
	kpc.defaults()
	return withHooks(ctx, kpc.sqlSave, kpc.mutation, kpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kpc *KYBProfileCreate) SaveX(ctx context.Context) *KYBProfile {
	v, err := kpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kpc *KYBProfileCreate) Exec(ctx context.Context) error {
	_, err := kpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpc *KYBProfileCreate) ExecX(ctx context.Context) {
	if err := kpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kpc *KYBProfileCreate) defaults() {
	if _, ok := kpc.mutation.CreatedAt(); !ok {
		v := kybprofile.DefaultCreatedAt()
		kpc.mutation.SetCreatedAt(v)
	}
	if _, ok := kpc.mutation.UpdatedAt(); !ok {
		v := kybprofile.DefaultUpdatedAt()
		kpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kpc.mutation.ID(); !ok {
		v := kybprofile.DefaultID()
		kpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kpc *KYBProfileCreate) check() error {
	if _, ok := kpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "KYBProfile.created_at"`)}
	}
	if _, ok := kpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "KYBProfile.updated_at"`)}
	}
	if _, ok := kpc.mutation.MobileNumber(); !ok {
		return &ValidationError{Name: "mobile_number", err: errors.New(`ent: missing required field "KYBProfile.mobile_number"`)}
	}
	if _, ok := kpc.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`ent: missing required field "KYBProfile.company_name"`)}
	}
	if _, ok := kpc.mutation.RegisteredBusinessAddress(); !ok {
		return &ValidationError{Name: "registered_business_address", err: errors.New(`ent: missing required field "KYBProfile.registered_business_address"`)}
	}
	if _, ok := kpc.mutation.CertificateOfIncorporationURL(); !ok {
		return &ValidationError{Name: "certificate_of_incorporation_url", err: errors.New(`ent: missing required field "KYBProfile.certificate_of_incorporation_url"`)}
	}
	if _, ok := kpc.mutation.ArticlesOfIncorporationURL(); !ok {
		return &ValidationError{Name: "articles_of_incorporation_url", err: errors.New(`ent: missing required field "KYBProfile.articles_of_incorporation_url"`)}
	}
	if _, ok := kpc.mutation.ProofOfBusinessAddressURL(); !ok {
		return &ValidationError{Name: "proof_of_business_address_url", err: errors.New(`ent: missing required field "KYBProfile.proof_of_business_address_url"`)}
	}
	return nil
}

func (kpc *KYBProfileCreate) sqlSave(ctx context.Context) (*KYBProfile, error) {
	if err := kpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	kpc.mutation.id = &_node.ID
	kpc.mutation.done = true
	return _node, nil
}

func (kpc *KYBProfileCreate) createSpec() (*KYBProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &KYBProfile{config: kpc.config}
		_spec = sqlgraph.NewCreateSpec(kybprofile.Table, sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = kpc.conflict
	if id, ok := kpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := kpc.mutation.CreatedAt(); ok {
		_spec.SetField(kybprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := kpc.mutation.UpdatedAt(); ok {
		_spec.SetField(kybprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := kpc.mutation.MobileNumber(); ok {
		_spec.SetField(kybprofile.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := kpc.mutation.CompanyName(); ok {
		_spec.SetField(kybprofile.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := kpc.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybprofile.FieldRegisteredBusinessAddress, field.TypeString, value)
		_node.RegisteredBusinessAddress = value
	}
	if value, ok := kpc.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldCertificateOfIncorporationURL, field.TypeString, value)
		_node.CertificateOfIncorporationURL = value
	}
	if value, ok := kpc.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybprofile.FieldArticlesOfIncorporationURL, field.TypeString, value)
		_node.ArticlesOfIncorporationURL = value
	}
	if value, ok := kpc.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybprofile.FieldBusinessLicenseURL, field.TypeString, value)
		_node.BusinessLicenseURL = &value
	}
	if value, ok := kpc.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybprofile.FieldProofOfBusinessAddressURL, field.TypeString, value)
		_node.ProofOfBusinessAddressURL = value
	}
	if value, ok := kpc.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldAmlPolicyURL, field.TypeString, value)
		_node.AmlPolicyURL = value
	}
	if value, ok := kpc.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybprofile.FieldKycPolicyURL, field.TypeString, value)
		_node.KycPolicyURL = &value
	}
	if nodes := kpc.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybprofile.BeneficialOwnersTable,
			Columns: []string{kybprofile.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kybprofile.UserTable,
			Columns: []string{kybprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_kyb_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KYBProfile.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KYBProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kpc *KYBProfileCreate) OnConflict(opts ...sql.ConflictOption) *KYBProfileUpsertOne {
	kpc.conflict = opts
	return &KYBProfileUpsertOne{
		create: kpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kpc *KYBProfileCreate) OnConflictColumns(columns ...string) *KYBProfileUpsertOne {
	kpc.conflict = append(kpc.conflict, sql.ConflictColumns(columns...))
	return &KYBProfileUpsertOne{
		create: kpc,
	}
}

type (
	// KYBProfileUpsertOne is the builder for "upsert"-ing
	//  one KYBProfile node.
	KYBProfileUpsertOne struct {
		create *KYBProfileCreate
	}

	// KYBProfileUpsert is the "OnConflict" setter.
	KYBProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBProfileUpsert) SetUpdatedAt(v time.Time) *KYBProfileUpsert {
	u.Set(kybprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateUpdatedAt() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldUpdatedAt)
	return u
}

// SetMobileNumber sets the "mobile_number" field.
func (u *KYBProfileUpsert) SetMobileNumber(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldMobileNumber, v)
	return u
}

// UpdateMobileNumber sets the "mobile_number" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateMobileNumber() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldMobileNumber)
	return u
}

// SetCompanyName sets the "company_name" field.
func (u *KYBProfileUpsert) SetCompanyName(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldCompanyName, v)
	return u
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateCompanyName() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldCompanyName)
	return u
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBProfileUpsert) SetRegisteredBusinessAddress(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldRegisteredBusinessAddress, v)
	return u
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateRegisteredBusinessAddress() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldRegisteredBusinessAddress)
	return u
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBProfileUpsert) SetCertificateOfIncorporationURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldCertificateOfIncorporationURL, v)
	return u
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateCertificateOfIncorporationURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldCertificateOfIncorporationURL)
	return u
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBProfileUpsert) SetArticlesOfIncorporationURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldArticlesOfIncorporationURL, v)
	return u
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateArticlesOfIncorporationURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldArticlesOfIncorporationURL)
	return u
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBProfileUpsert) SetBusinessLicenseURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldBusinessLicenseURL, v)
	return u
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateBusinessLicenseURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldBusinessLicenseURL)
	return u
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBProfileUpsert) ClearBusinessLicenseURL() *KYBProfileUpsert {
	u.SetNull(kybprofile.FieldBusinessLicenseURL)
	return u
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBProfileUpsert) SetProofOfBusinessAddressURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldProofOfBusinessAddressURL, v)
	return u
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateProofOfBusinessAddressURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldProofOfBusinessAddressURL)
	return u
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBProfileUpsert) SetAmlPolicyURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldAmlPolicyURL, v)
	return u
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateAmlPolicyURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldAmlPolicyURL)
	return u
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBProfileUpsert) ClearAmlPolicyURL() *KYBProfileUpsert {
	u.SetNull(kybprofile.FieldAmlPolicyURL)
	return u
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBProfileUpsert) SetKycPolicyURL(v string) *KYBProfileUpsert {
	u.Set(kybprofile.FieldKycPolicyURL, v)
	return u
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsert) UpdateKycPolicyURL() *KYBProfileUpsert {
	u.SetExcluded(kybprofile.FieldKycPolicyURL)
	return u
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBProfileUpsert) ClearKycPolicyURL() *KYBProfileUpsert {
	u.SetNull(kybprofile.FieldKycPolicyURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kybprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KYBProfileUpsertOne) UpdateNewValues() *KYBProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kybprofile.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(kybprofile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KYBProfileUpsertOne) Ignore() *KYBProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KYBProfileUpsertOne) DoNothing() *KYBProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KYBProfileCreate.OnConflict
// documentation for more info.
func (u *KYBProfileUpsertOne) Update(set func(*KYBProfileUpsert)) *KYBProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KYBProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBProfileUpsertOne) SetUpdatedAt(v time.Time) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateUpdatedAt() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMobileNumber sets the "mobile_number" field.
func (u *KYBProfileUpsertOne) SetMobileNumber(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetMobileNumber(v)
	})
}

// UpdateMobileNumber sets the "mobile_number" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateMobileNumber() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateMobileNumber()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *KYBProfileUpsertOne) SetCompanyName(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateCompanyName() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateCompanyName()
	})
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBProfileUpsertOne) SetRegisteredBusinessAddress(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetRegisteredBusinessAddress(v)
	})
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateRegisteredBusinessAddress() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateRegisteredBusinessAddress()
	})
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBProfileUpsertOne) SetCertificateOfIncorporationURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetCertificateOfIncorporationURL(v)
	})
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateCertificateOfIncorporationURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateCertificateOfIncorporationURL()
	})
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBProfileUpsertOne) SetArticlesOfIncorporationURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetArticlesOfIncorporationURL(v)
	})
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateArticlesOfIncorporationURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateArticlesOfIncorporationURL()
	})
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBProfileUpsertOne) SetBusinessLicenseURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetBusinessLicenseURL(v)
	})
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateBusinessLicenseURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateBusinessLicenseURL()
	})
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBProfileUpsertOne) ClearBusinessLicenseURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearBusinessLicenseURL()
	})
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBProfileUpsertOne) SetProofOfBusinessAddressURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetProofOfBusinessAddressURL(v)
	})
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateProofOfBusinessAddressURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateProofOfBusinessAddressURL()
	})
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBProfileUpsertOne) SetAmlPolicyURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetAmlPolicyURL(v)
	})
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateAmlPolicyURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateAmlPolicyURL()
	})
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBProfileUpsertOne) ClearAmlPolicyURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearAmlPolicyURL()
	})
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBProfileUpsertOne) SetKycPolicyURL(v string) *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetKycPolicyURL(v)
	})
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsertOne) UpdateKycPolicyURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateKycPolicyURL()
	})
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBProfileUpsertOne) ClearKycPolicyURL() *KYBProfileUpsertOne {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearKycPolicyURL()
	})
}

// Exec executes the query.
func (u *KYBProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KYBProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KYBProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KYBProfileUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KYBProfileUpsertOne.ID is not supported by MySQL driver. Use KYBProfileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KYBProfileUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KYBProfileCreateBulk is the builder for creating many KYBProfile entities in bulk.
type KYBProfileCreateBulk struct {
	config
	err      error
	builders []*KYBProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the KYBProfile entities in the database.
func (kpcb *KYBProfileCreateBulk) Save(ctx context.Context) ([]*KYBProfile, error) {
	if kpcb.err != nil {
		return nil, kpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kpcb.builders))
	nodes := make([]*KYBProfile, len(kpcb.builders))
	mutators := make([]Mutator, len(kpcb.builders))
	for i := range kpcb.builders {
		func(i int, root context.Context) {
			builder := kpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KYBProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kpcb *KYBProfileCreateBulk) SaveX(ctx context.Context) []*KYBProfile {
	v, err := kpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kpcb *KYBProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := kpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpcb *KYBProfileCreateBulk) ExecX(ctx context.Context) {
	if err := kpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KYBProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KYBProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kpcb *KYBProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *KYBProfileUpsertBulk {
	kpcb.conflict = opts
	return &KYBProfileUpsertBulk{
		create: kpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kpcb *KYBProfileCreateBulk) OnConflictColumns(columns ...string) *KYBProfileUpsertBulk {
	kpcb.conflict = append(kpcb.conflict, sql.ConflictColumns(columns...))
	return &KYBProfileUpsertBulk{
		create: kpcb,
	}
}

// KYBProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of KYBProfile nodes.
type KYBProfileUpsertBulk struct {
	create *KYBProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kybprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KYBProfileUpsertBulk) UpdateNewValues() *KYBProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kybprofile.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(kybprofile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KYBProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KYBProfileUpsertBulk) Ignore() *KYBProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KYBProfileUpsertBulk) DoNothing() *KYBProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KYBProfileCreateBulk.OnConflict
// documentation for more info.
func (u *KYBProfileUpsertBulk) Update(set func(*KYBProfileUpsert)) *KYBProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KYBProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBProfileUpsertBulk) SetUpdatedAt(v time.Time) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateUpdatedAt() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMobileNumber sets the "mobile_number" field.
func (u *KYBProfileUpsertBulk) SetMobileNumber(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetMobileNumber(v)
	})
}

// UpdateMobileNumber sets the "mobile_number" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateMobileNumber() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateMobileNumber()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *KYBProfileUpsertBulk) SetCompanyName(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateCompanyName() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateCompanyName()
	})
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBProfileUpsertBulk) SetRegisteredBusinessAddress(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetRegisteredBusinessAddress(v)
	})
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateRegisteredBusinessAddress() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateRegisteredBusinessAddress()
	})
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBProfileUpsertBulk) SetCertificateOfIncorporationURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetCertificateOfIncorporationURL(v)
	})
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateCertificateOfIncorporationURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateCertificateOfIncorporationURL()
	})
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBProfileUpsertBulk) SetArticlesOfIncorporationURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetArticlesOfIncorporationURL(v)
	})
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateArticlesOfIncorporationURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateArticlesOfIncorporationURL()
	})
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBProfileUpsertBulk) SetBusinessLicenseURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetBusinessLicenseURL(v)
	})
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateBusinessLicenseURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateBusinessLicenseURL()
	})
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBProfileUpsertBulk) ClearBusinessLicenseURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearBusinessLicenseURL()
	})
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBProfileUpsertBulk) SetProofOfBusinessAddressURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetProofOfBusinessAddressURL(v)
	})
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateProofOfBusinessAddressURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateProofOfBusinessAddressURL()
	})
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBProfileUpsertBulk) SetAmlPolicyURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetAmlPolicyURL(v)
	})
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateAmlPolicyURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateAmlPolicyURL()
	})
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBProfileUpsertBulk) ClearAmlPolicyURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearAmlPolicyURL()
	})
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBProfileUpsertBulk) SetKycPolicyURL(v string) *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.SetKycPolicyURL(v)
	})
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBProfileUpsertBulk) UpdateKycPolicyURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.UpdateKycPolicyURL()
	})
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBProfileUpsertBulk) ClearKycPolicyURL() *KYBProfileUpsertBulk {
	return u.Update(func(s *KYBProfileUpsert) {
		s.ClearKycPolicyURL()
	})
}

// Exec executes the query.
func (u *KYBProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KYBProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KYBProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KYBProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
