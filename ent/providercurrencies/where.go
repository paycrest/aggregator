// Code generated by ent, DO NOT EDIT.

package providercurrencies

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLTE(FieldID, id))
}

// AvailableBalance applies equality check predicate on the "available_balance" field. It's identical to AvailableBalanceEQ.
func AvailableBalance(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldAvailableBalance, v))
}

// TotalBalance applies equality check predicate on the "total_balance" field. It's identical to TotalBalanceEQ.
func TotalBalance(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldTotalBalance, v))
}

// ReservedBalance applies equality check predicate on the "reserved_balance" field. It's identical to ReservedBalanceEQ.
func ReservedBalance(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldReservedBalance, v))
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldIsAvailable, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldUpdatedAt, v))
}

// AvailableBalanceEQ applies the EQ predicate on the "available_balance" field.
func AvailableBalanceEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldAvailableBalance, v))
}

// AvailableBalanceNEQ applies the NEQ predicate on the "available_balance" field.
func AvailableBalanceNEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldAvailableBalance, v))
}

// AvailableBalanceIn applies the In predicate on the "available_balance" field.
func AvailableBalanceIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldIn(FieldAvailableBalance, vs...))
}

// AvailableBalanceNotIn applies the NotIn predicate on the "available_balance" field.
func AvailableBalanceNotIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNotIn(FieldAvailableBalance, vs...))
}

// AvailableBalanceGT applies the GT predicate on the "available_balance" field.
func AvailableBalanceGT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGT(FieldAvailableBalance, v))
}

// AvailableBalanceGTE applies the GTE predicate on the "available_balance" field.
func AvailableBalanceGTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGTE(FieldAvailableBalance, v))
}

// AvailableBalanceLT applies the LT predicate on the "available_balance" field.
func AvailableBalanceLT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLT(FieldAvailableBalance, v))
}

// AvailableBalanceLTE applies the LTE predicate on the "available_balance" field.
func AvailableBalanceLTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLTE(FieldAvailableBalance, v))
}

// TotalBalanceEQ applies the EQ predicate on the "total_balance" field.
func TotalBalanceEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldTotalBalance, v))
}

// TotalBalanceNEQ applies the NEQ predicate on the "total_balance" field.
func TotalBalanceNEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldTotalBalance, v))
}

// TotalBalanceIn applies the In predicate on the "total_balance" field.
func TotalBalanceIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldIn(FieldTotalBalance, vs...))
}

// TotalBalanceNotIn applies the NotIn predicate on the "total_balance" field.
func TotalBalanceNotIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNotIn(FieldTotalBalance, vs...))
}

// TotalBalanceGT applies the GT predicate on the "total_balance" field.
func TotalBalanceGT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGT(FieldTotalBalance, v))
}

// TotalBalanceGTE applies the GTE predicate on the "total_balance" field.
func TotalBalanceGTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGTE(FieldTotalBalance, v))
}

// TotalBalanceLT applies the LT predicate on the "total_balance" field.
func TotalBalanceLT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLT(FieldTotalBalance, v))
}

// TotalBalanceLTE applies the LTE predicate on the "total_balance" field.
func TotalBalanceLTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLTE(FieldTotalBalance, v))
}

// ReservedBalanceEQ applies the EQ predicate on the "reserved_balance" field.
func ReservedBalanceEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldReservedBalance, v))
}

// ReservedBalanceNEQ applies the NEQ predicate on the "reserved_balance" field.
func ReservedBalanceNEQ(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldReservedBalance, v))
}

// ReservedBalanceIn applies the In predicate on the "reserved_balance" field.
func ReservedBalanceIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldIn(FieldReservedBalance, vs...))
}

// ReservedBalanceNotIn applies the NotIn predicate on the "reserved_balance" field.
func ReservedBalanceNotIn(vs ...decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNotIn(FieldReservedBalance, vs...))
}

// ReservedBalanceGT applies the GT predicate on the "reserved_balance" field.
func ReservedBalanceGT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGT(FieldReservedBalance, v))
}

// ReservedBalanceGTE applies the GTE predicate on the "reserved_balance" field.
func ReservedBalanceGTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGTE(FieldReservedBalance, v))
}

// ReservedBalanceLT applies the LT predicate on the "reserved_balance" field.
func ReservedBalanceLT(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLT(FieldReservedBalance, v))
}

// ReservedBalanceLTE applies the LTE predicate on the "reserved_balance" field.
func ReservedBalanceLTE(v decimal.Decimal) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLTE(FieldReservedBalance, v))
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldIsAvailable, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.ProviderProfile) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.FiatCurrency) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderCurrencies) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderCurrencies) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderCurrencies) predicate.ProviderCurrencies {
	return predicate.ProviderCurrencies(sql.NotPredicates(p))
}
