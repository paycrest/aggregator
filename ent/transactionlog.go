// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/transactionlog"
)

// TransactionLog is the model entity for the TransactionLog schema.
type TransactionLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GatewayID holds the value of the "gateway_id" field.
	GatewayID string `json:"gateway_id,omitempty"`
	// Status holds the value of the "status" field.
	Status transactionlog.Status `json:"status,omitempty"`
	// Network holds the value of the "network" field.
	Network string `json:"network,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt                       time.Time `json:"created_at,omitempty"`
	lock_payment_order_transactions *uuid.UUID
	payment_order_transactions      *uuid.UUID
	selectValues                    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactionlog.FieldMetadata:
			values[i] = new([]byte)
		case transactionlog.FieldGatewayID, transactionlog.FieldStatus, transactionlog.FieldNetwork, transactionlog.FieldTxHash:
			values[i] = new(sql.NullString)
		case transactionlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transactionlog.FieldID:
			values[i] = new(uuid.UUID)
		case transactionlog.ForeignKeys[0]: // lock_payment_order_transactions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case transactionlog.ForeignKeys[1]: // payment_order_transactions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionLog fields.
func (tl *TransactionLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactionlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tl.ID = *value
			}
		case transactionlog.FieldGatewayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_id", values[i])
			} else if value.Valid {
				tl.GatewayID = value.String
			}
		case transactionlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tl.Status = transactionlog.Status(value.String)
			}
		case transactionlog.FieldNetwork:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network", values[i])
			} else if value.Valid {
				tl.Network = value.String
			}
		case transactionlog.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				tl.TxHash = value.String
			}
		case transactionlog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tl.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case transactionlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		case transactionlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field lock_payment_order_transactions", values[i])
			} else if value.Valid {
				tl.lock_payment_order_transactions = new(uuid.UUID)
				*tl.lock_payment_order_transactions = *value.S.(*uuid.UUID)
			}
		case transactionlog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field payment_order_transactions", values[i])
			} else if value.Valid {
				tl.payment_order_transactions = new(uuid.UUID)
				*tl.payment_order_transactions = *value.S.(*uuid.UUID)
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TransactionLog.
// This includes values selected through modifiers, order, etc.
func (tl *TransactionLog) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// Update returns a builder for updating this TransactionLog.
// Note that you need to call TransactionLog.Unwrap() before calling this method if this TransactionLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TransactionLog) Update() *TransactionLogUpdateOne {
	return NewTransactionLogClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TransactionLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TransactionLog) Unwrap() *TransactionLog {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransactionLog is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TransactionLog) String() string {
	var builder strings.Builder
	builder.WriteString("TransactionLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("gateway_id=")
	builder.WriteString(tl.GatewayID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tl.Status))
	builder.WriteString(", ")
	builder.WriteString("network=")
	builder.WriteString(tl.Network)
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(tl.TxHash)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", tl.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionLogs is a parsable slice of TransactionLog.
type TransactionLogs []*TransactionLog
