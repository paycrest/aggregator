// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/providercurrencyavailability"
	"github.com/paycrest/aggregator/ent/providerprofile"
)

// ProviderCurrencyAvailabilityCreate is the builder for creating a ProviderCurrencyAvailability entity.
type ProviderCurrencyAvailabilityCreate struct {
	config
	mutation *ProviderCurrencyAvailabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsAvailable sets the "is_available" field.
func (pcac *ProviderCurrencyAvailabilityCreate) SetIsAvailable(b bool) *ProviderCurrencyAvailabilityCreate {
	pcac.mutation.SetIsAvailable(b)
	return pcac
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcac *ProviderCurrencyAvailabilityCreate) SetNillableIsAvailable(b *bool) *ProviderCurrencyAvailabilityCreate {
	if b != nil {
		pcac.SetIsAvailable(*b)
	}
	return pcac
}

// SetID sets the "id" field.
func (pcac *ProviderCurrencyAvailabilityCreate) SetID(u uuid.UUID) *ProviderCurrencyAvailabilityCreate {
	pcac.mutation.SetID(u)
	return pcac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcac *ProviderCurrencyAvailabilityCreate) SetNillableID(u *uuid.UUID) *ProviderCurrencyAvailabilityCreate {
	if u != nil {
		pcac.SetID(*u)
	}
	return pcac
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcac *ProviderCurrencyAvailabilityCreate) SetProviderID(id string) *ProviderCurrencyAvailabilityCreate {
	pcac.mutation.SetProviderID(id)
	return pcac
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcac *ProviderCurrencyAvailabilityCreate) SetProvider(p *ProviderProfile) *ProviderCurrencyAvailabilityCreate {
	return pcac.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcac *ProviderCurrencyAvailabilityCreate) SetCurrencyID(id uuid.UUID) *ProviderCurrencyAvailabilityCreate {
	pcac.mutation.SetCurrencyID(id)
	return pcac
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcac *ProviderCurrencyAvailabilityCreate) SetCurrency(f *FiatCurrency) *ProviderCurrencyAvailabilityCreate {
	return pcac.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrencyAvailabilityMutation object of the builder.
func (pcac *ProviderCurrencyAvailabilityCreate) Mutation() *ProviderCurrencyAvailabilityMutation {
	return pcac.mutation
}

// Save creates the ProviderCurrencyAvailability in the database.
func (pcac *ProviderCurrencyAvailabilityCreate) Save(ctx context.Context) (*ProviderCurrencyAvailability, error) {
	pcac.defaults()
	return withHooks(ctx, pcac.sqlSave, pcac.mutation, pcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcac *ProviderCurrencyAvailabilityCreate) SaveX(ctx context.Context) *ProviderCurrencyAvailability {
	v, err := pcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcac *ProviderCurrencyAvailabilityCreate) Exec(ctx context.Context) error {
	_, err := pcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcac *ProviderCurrencyAvailabilityCreate) ExecX(ctx context.Context) {
	if err := pcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcac *ProviderCurrencyAvailabilityCreate) defaults() {
	if _, ok := pcac.mutation.IsAvailable(); !ok {
		v := providercurrencyavailability.DefaultIsAvailable
		pcac.mutation.SetIsAvailable(v)
	}
	if _, ok := pcac.mutation.ID(); !ok {
		v := providercurrencyavailability.DefaultID()
		pcac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcac *ProviderCurrencyAvailabilityCreate) check() error {
	if _, ok := pcac.mutation.IsAvailable(); !ok {
		return &ValidationError{Name: "is_available", err: errors.New(`ent: missing required field "ProviderCurrencyAvailability.is_available"`)}
	}
	if len(pcac.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "ProviderCurrencyAvailability.provider"`)}
	}
	if len(pcac.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "ProviderCurrencyAvailability.currency"`)}
	}
	return nil
}

func (pcac *ProviderCurrencyAvailabilityCreate) sqlSave(ctx context.Context) (*ProviderCurrencyAvailability, error) {
	if err := pcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pcac.mutation.id = &_node.ID
	pcac.mutation.done = true
	return _node, nil
}

func (pcac *ProviderCurrencyAvailabilityCreate) createSpec() (*ProviderCurrencyAvailability, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderCurrencyAvailability{config: pcac.config}
		_spec = sqlgraph.NewCreateSpec(providercurrencyavailability.Table, sqlgraph.NewFieldSpec(providercurrencyavailability.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pcac.conflict
	if id, ok := pcac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcac.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencyavailability.FieldIsAvailable, field.TypeBool, value)
		_node.IsAvailable = value
	}
	if nodes := pcac.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.ProviderTable,
			Columns: []string{providercurrencyavailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_profile_currency_availability = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcac.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.CurrencyTable,
			Columns: []string{providercurrencyavailability.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fiat_currency_provider_availability = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderCurrencyAvailability.Create().
//		SetIsAvailable(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderCurrencyAvailabilityUpsert) {
//			SetIsAvailable(v+v).
//		}).
//		Exec(ctx)
func (pcac *ProviderCurrencyAvailabilityCreate) OnConflict(opts ...sql.ConflictOption) *ProviderCurrencyAvailabilityUpsertOne {
	pcac.conflict = opts
	return &ProviderCurrencyAvailabilityUpsertOne{
		create: pcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcac *ProviderCurrencyAvailabilityCreate) OnConflictColumns(columns ...string) *ProviderCurrencyAvailabilityUpsertOne {
	pcac.conflict = append(pcac.conflict, sql.ConflictColumns(columns...))
	return &ProviderCurrencyAvailabilityUpsertOne{
		create: pcac,
	}
}

type (
	// ProviderCurrencyAvailabilityUpsertOne is the builder for "upsert"-ing
	//  one ProviderCurrencyAvailability node.
	ProviderCurrencyAvailabilityUpsertOne struct {
		create *ProviderCurrencyAvailabilityCreate
	}

	// ProviderCurrencyAvailabilityUpsert is the "OnConflict" setter.
	ProviderCurrencyAvailabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsAvailable sets the "is_available" field.
func (u *ProviderCurrencyAvailabilityUpsert) SetIsAvailable(v bool) *ProviderCurrencyAvailabilityUpsert {
	u.Set(providercurrencyavailability.FieldIsAvailable, v)
	return u
}

// UpdateIsAvailable sets the "is_available" field to the value that was provided on create.
func (u *ProviderCurrencyAvailabilityUpsert) UpdateIsAvailable() *ProviderCurrencyAvailabilityUpsert {
	u.SetExcluded(providercurrencyavailability.FieldIsAvailable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providercurrencyavailability.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderCurrencyAvailabilityUpsertOne) UpdateNewValues() *ProviderCurrencyAvailabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(providercurrencyavailability.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProviderCurrencyAvailabilityUpsertOne) Ignore() *ProviderCurrencyAvailabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderCurrencyAvailabilityUpsertOne) DoNothing() *ProviderCurrencyAvailabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderCurrencyAvailabilityCreate.OnConflict
// documentation for more info.
func (u *ProviderCurrencyAvailabilityUpsertOne) Update(set func(*ProviderCurrencyAvailabilityUpsert)) *ProviderCurrencyAvailabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderCurrencyAvailabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsAvailable sets the "is_available" field.
func (u *ProviderCurrencyAvailabilityUpsertOne) SetIsAvailable(v bool) *ProviderCurrencyAvailabilityUpsertOne {
	return u.Update(func(s *ProviderCurrencyAvailabilityUpsert) {
		s.SetIsAvailable(v)
	})
}

// UpdateIsAvailable sets the "is_available" field to the value that was provided on create.
func (u *ProviderCurrencyAvailabilityUpsertOne) UpdateIsAvailable() *ProviderCurrencyAvailabilityUpsertOne {
	return u.Update(func(s *ProviderCurrencyAvailabilityUpsert) {
		s.UpdateIsAvailable()
	})
}

// Exec executes the query.
func (u *ProviderCurrencyAvailabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderCurrencyAvailabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderCurrencyAvailabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProviderCurrencyAvailabilityUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProviderCurrencyAvailabilityUpsertOne.ID is not supported by MySQL driver. Use ProviderCurrencyAvailabilityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProviderCurrencyAvailabilityUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProviderCurrencyAvailabilityCreateBulk is the builder for creating many ProviderCurrencyAvailability entities in bulk.
type ProviderCurrencyAvailabilityCreateBulk struct {
	config
	err      error
	builders []*ProviderCurrencyAvailabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the ProviderCurrencyAvailability entities in the database.
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) Save(ctx context.Context) ([]*ProviderCurrencyAvailability, error) {
	if pcacb.err != nil {
		return nil, pcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcacb.builders))
	nodes := make([]*ProviderCurrencyAvailability, len(pcacb.builders))
	mutators := make([]Mutator, len(pcacb.builders))
	for i := range pcacb.builders {
		func(i int, root context.Context) {
			builder := pcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderCurrencyAvailabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) SaveX(ctx context.Context) []*ProviderCurrencyAvailability {
	v, err := pcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := pcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) ExecX(ctx context.Context) {
	if err := pcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderCurrencyAvailability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderCurrencyAvailabilityUpsert) {
//			SetIsAvailable(v+v).
//		}).
//		Exec(ctx)
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProviderCurrencyAvailabilityUpsertBulk {
	pcacb.conflict = opts
	return &ProviderCurrencyAvailabilityUpsertBulk{
		create: pcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcacb *ProviderCurrencyAvailabilityCreateBulk) OnConflictColumns(columns ...string) *ProviderCurrencyAvailabilityUpsertBulk {
	pcacb.conflict = append(pcacb.conflict, sql.ConflictColumns(columns...))
	return &ProviderCurrencyAvailabilityUpsertBulk{
		create: pcacb,
	}
}

// ProviderCurrencyAvailabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of ProviderCurrencyAvailability nodes.
type ProviderCurrencyAvailabilityUpsertBulk struct {
	create *ProviderCurrencyAvailabilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providercurrencyavailability.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderCurrencyAvailabilityUpsertBulk) UpdateNewValues() *ProviderCurrencyAvailabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(providercurrencyavailability.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderCurrencyAvailability.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProviderCurrencyAvailabilityUpsertBulk) Ignore() *ProviderCurrencyAvailabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderCurrencyAvailabilityUpsertBulk) DoNothing() *ProviderCurrencyAvailabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderCurrencyAvailabilityCreateBulk.OnConflict
// documentation for more info.
func (u *ProviderCurrencyAvailabilityUpsertBulk) Update(set func(*ProviderCurrencyAvailabilityUpsert)) *ProviderCurrencyAvailabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderCurrencyAvailabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsAvailable sets the "is_available" field.
func (u *ProviderCurrencyAvailabilityUpsertBulk) SetIsAvailable(v bool) *ProviderCurrencyAvailabilityUpsertBulk {
	return u.Update(func(s *ProviderCurrencyAvailabilityUpsert) {
		s.SetIsAvailable(v)
	})
}

// UpdateIsAvailable sets the "is_available" field to the value that was provided on create.
func (u *ProviderCurrencyAvailabilityUpsertBulk) UpdateIsAvailable() *ProviderCurrencyAvailabilityUpsertBulk {
	return u.Update(func(s *ProviderCurrencyAvailabilityUpsert) {
		s.UpdateIsAvailable()
	})
}

// Exec executes the query.
func (u *ProviderCurrencyAvailabilityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProviderCurrencyAvailabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderCurrencyAvailabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderCurrencyAvailabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
