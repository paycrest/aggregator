// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/senderordertoken"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/token"
)

// SenderOrderTokenQuery is the builder for querying SenderOrderToken entities.
type SenderOrderTokenQuery struct {
	config
	ctx        *QueryContext
	order      []senderordertoken.OrderOption
	inters     []Interceptor
	predicates []predicate.SenderOrderToken
	withSender *SenderProfileQuery
	withToken  *TokenQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SenderOrderTokenQuery builder.
func (sotq *SenderOrderTokenQuery) Where(ps ...predicate.SenderOrderToken) *SenderOrderTokenQuery {
	sotq.predicates = append(sotq.predicates, ps...)
	return sotq
}

// Limit the number of records to be returned by this query.
func (sotq *SenderOrderTokenQuery) Limit(limit int) *SenderOrderTokenQuery {
	sotq.ctx.Limit = &limit
	return sotq
}

// Offset to start from.
func (sotq *SenderOrderTokenQuery) Offset(offset int) *SenderOrderTokenQuery {
	sotq.ctx.Offset = &offset
	return sotq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sotq *SenderOrderTokenQuery) Unique(unique bool) *SenderOrderTokenQuery {
	sotq.ctx.Unique = &unique
	return sotq
}

// Order specifies how the records should be ordered.
func (sotq *SenderOrderTokenQuery) Order(o ...senderordertoken.OrderOption) *SenderOrderTokenQuery {
	sotq.order = append(sotq.order, o...)
	return sotq
}

// QuerySender chains the current query on the "sender" edge.
func (sotq *SenderOrderTokenQuery) QuerySender() *SenderProfileQuery {
	query := (&SenderProfileClient{config: sotq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sotq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sotq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(senderordertoken.Table, senderordertoken.FieldID, selector),
			sqlgraph.To(senderprofile.Table, senderprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, senderordertoken.SenderTable, senderordertoken.SenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(sotq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToken chains the current query on the "token" edge.
func (sotq *SenderOrderTokenQuery) QueryToken() *TokenQuery {
	query := (&TokenClient{config: sotq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sotq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sotq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(senderordertoken.Table, senderordertoken.FieldID, selector),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, senderordertoken.TokenTable, senderordertoken.TokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(sotq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SenderOrderToken entity from the query.
// Returns a *NotFoundError when no SenderOrderToken was found.
func (sotq *SenderOrderTokenQuery) First(ctx context.Context) (*SenderOrderToken, error) {
	nodes, err := sotq.Limit(1).All(setContextOp(ctx, sotq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{senderordertoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) FirstX(ctx context.Context) *SenderOrderToken {
	node, err := sotq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SenderOrderToken ID from the query.
// Returns a *NotFoundError when no SenderOrderToken ID was found.
func (sotq *SenderOrderTokenQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sotq.Limit(1).IDs(setContextOp(ctx, sotq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{senderordertoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) FirstIDX(ctx context.Context) int {
	id, err := sotq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SenderOrderToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SenderOrderToken entity is found.
// Returns a *NotFoundError when no SenderOrderToken entities are found.
func (sotq *SenderOrderTokenQuery) Only(ctx context.Context) (*SenderOrderToken, error) {
	nodes, err := sotq.Limit(2).All(setContextOp(ctx, sotq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{senderordertoken.Label}
	default:
		return nil, &NotSingularError{senderordertoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) OnlyX(ctx context.Context) *SenderOrderToken {
	node, err := sotq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SenderOrderToken ID in the query.
// Returns a *NotSingularError when more than one SenderOrderToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (sotq *SenderOrderTokenQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sotq.Limit(2).IDs(setContextOp(ctx, sotq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{senderordertoken.Label}
	default:
		err = &NotSingularError{senderordertoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) OnlyIDX(ctx context.Context) int {
	id, err := sotq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SenderOrderTokens.
func (sotq *SenderOrderTokenQuery) All(ctx context.Context) ([]*SenderOrderToken, error) {
	ctx = setContextOp(ctx, sotq.ctx, ent.OpQueryAll)
	if err := sotq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SenderOrderToken, *SenderOrderTokenQuery]()
	return withInterceptors[[]*SenderOrderToken](ctx, sotq, qr, sotq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) AllX(ctx context.Context) []*SenderOrderToken {
	nodes, err := sotq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SenderOrderToken IDs.
func (sotq *SenderOrderTokenQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sotq.ctx.Unique == nil && sotq.path != nil {
		sotq.Unique(true)
	}
	ctx = setContextOp(ctx, sotq.ctx, ent.OpQueryIDs)
	if err = sotq.Select(senderordertoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) IDsX(ctx context.Context) []int {
	ids, err := sotq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sotq *SenderOrderTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sotq.ctx, ent.OpQueryCount)
	if err := sotq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sotq, querierCount[*SenderOrderTokenQuery](), sotq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) CountX(ctx context.Context) int {
	count, err := sotq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sotq *SenderOrderTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sotq.ctx, ent.OpQueryExist)
	switch _, err := sotq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sotq *SenderOrderTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := sotq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SenderOrderTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sotq *SenderOrderTokenQuery) Clone() *SenderOrderTokenQuery {
	if sotq == nil {
		return nil
	}
	return &SenderOrderTokenQuery{
		config:     sotq.config,
		ctx:        sotq.ctx.Clone(),
		order:      append([]senderordertoken.OrderOption{}, sotq.order...),
		inters:     append([]Interceptor{}, sotq.inters...),
		predicates: append([]predicate.SenderOrderToken{}, sotq.predicates...),
		withSender: sotq.withSender.Clone(),
		withToken:  sotq.withToken.Clone(),
		// clone intermediate query.
		sql:  sotq.sql.Clone(),
		path: sotq.path,
	}
}

// WithSender tells the query-builder to eager-load the nodes that are connected to
// the "sender" edge. The optional arguments are used to configure the query builder of the edge.
func (sotq *SenderOrderTokenQuery) WithSender(opts ...func(*SenderProfileQuery)) *SenderOrderTokenQuery {
	query := (&SenderProfileClient{config: sotq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sotq.withSender = query
	return sotq
}

// WithToken tells the query-builder to eager-load the nodes that are connected to
// the "token" edge. The optional arguments are used to configure the query builder of the edge.
func (sotq *SenderOrderTokenQuery) WithToken(opts ...func(*TokenQuery)) *SenderOrderTokenQuery {
	query := (&TokenClient{config: sotq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sotq.withToken = query
	return sotq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SenderOrderToken.Query().
//		GroupBy(senderordertoken.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sotq *SenderOrderTokenQuery) GroupBy(field string, fields ...string) *SenderOrderTokenGroupBy {
	sotq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SenderOrderTokenGroupBy{build: sotq}
	grbuild.flds = &sotq.ctx.Fields
	grbuild.label = senderordertoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SenderOrderToken.Query().
//		Select(senderordertoken.FieldCreatedAt).
//		Scan(ctx, &v)
func (sotq *SenderOrderTokenQuery) Select(fields ...string) *SenderOrderTokenSelect {
	sotq.ctx.Fields = append(sotq.ctx.Fields, fields...)
	sbuild := &SenderOrderTokenSelect{SenderOrderTokenQuery: sotq}
	sbuild.label = senderordertoken.Label
	sbuild.flds, sbuild.scan = &sotq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SenderOrderTokenSelect configured with the given aggregations.
func (sotq *SenderOrderTokenQuery) Aggregate(fns ...AggregateFunc) *SenderOrderTokenSelect {
	return sotq.Select().Aggregate(fns...)
}

func (sotq *SenderOrderTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sotq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sotq); err != nil {
				return err
			}
		}
	}
	for _, f := range sotq.ctx.Fields {
		if !senderordertoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sotq.path != nil {
		prev, err := sotq.path(ctx)
		if err != nil {
			return err
		}
		sotq.sql = prev
	}
	return nil
}

func (sotq *SenderOrderTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SenderOrderToken, error) {
	var (
		nodes       = []*SenderOrderToken{}
		withFKs     = sotq.withFKs
		_spec       = sotq.querySpec()
		loadedTypes = [2]bool{
			sotq.withSender != nil,
			sotq.withToken != nil,
		}
	)
	if sotq.withSender != nil || sotq.withToken != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, senderordertoken.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SenderOrderToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SenderOrderToken{config: sotq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sotq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sotq.withSender; query != nil {
		if err := sotq.loadSender(ctx, query, nodes, nil,
			func(n *SenderOrderToken, e *SenderProfile) { n.Edges.Sender = e }); err != nil {
			return nil, err
		}
	}
	if query := sotq.withToken; query != nil {
		if err := sotq.loadToken(ctx, query, nodes, nil,
			func(n *SenderOrderToken, e *Token) { n.Edges.Token = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sotq *SenderOrderTokenQuery) loadSender(ctx context.Context, query *SenderProfileQuery, nodes []*SenderOrderToken, init func(*SenderOrderToken), assign func(*SenderOrderToken, *SenderProfile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SenderOrderToken)
	for i := range nodes {
		if nodes[i].sender_profile_order_tokens == nil {
			continue
		}
		fk := *nodes[i].sender_profile_order_tokens
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(senderprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sender_profile_order_tokens" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sotq *SenderOrderTokenQuery) loadToken(ctx context.Context, query *TokenQuery, nodes []*SenderOrderToken, init func(*SenderOrderToken), assign func(*SenderOrderToken, *Token)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SenderOrderToken)
	for i := range nodes {
		if nodes[i].token_sender_order_tokens == nil {
			continue
		}
		fk := *nodes[i].token_sender_order_tokens
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(token.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "token_sender_order_tokens" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sotq *SenderOrderTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sotq.querySpec()
	_spec.Node.Columns = sotq.ctx.Fields
	if len(sotq.ctx.Fields) > 0 {
		_spec.Unique = sotq.ctx.Unique != nil && *sotq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sotq.driver, _spec)
}

func (sotq *SenderOrderTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(senderordertoken.Table, senderordertoken.Columns, sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt))
	_spec.From = sotq.sql
	if unique := sotq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sotq.path != nil {
		_spec.Unique = true
	}
	if fields := sotq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, senderordertoken.FieldID)
		for i := range fields {
			if fields[i] != senderordertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sotq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sotq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sotq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sotq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sotq *SenderOrderTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sotq.driver.Dialect())
	t1 := builder.Table(senderordertoken.Table)
	columns := sotq.ctx.Fields
	if len(columns) == 0 {
		columns = senderordertoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sotq.sql != nil {
		selector = sotq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sotq.ctx.Unique != nil && *sotq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sotq.predicates {
		p(selector)
	}
	for _, p := range sotq.order {
		p(selector)
	}
	if offset := sotq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sotq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SenderOrderTokenGroupBy is the group-by builder for SenderOrderToken entities.
type SenderOrderTokenGroupBy struct {
	selector
	build *SenderOrderTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sotgb *SenderOrderTokenGroupBy) Aggregate(fns ...AggregateFunc) *SenderOrderTokenGroupBy {
	sotgb.fns = append(sotgb.fns, fns...)
	return sotgb
}

// Scan applies the selector query and scans the result into the given value.
func (sotgb *SenderOrderTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sotgb.build.ctx, ent.OpQueryGroupBy)
	if err := sotgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SenderOrderTokenQuery, *SenderOrderTokenGroupBy](ctx, sotgb.build, sotgb, sotgb.build.inters, v)
}

func (sotgb *SenderOrderTokenGroupBy) sqlScan(ctx context.Context, root *SenderOrderTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sotgb.fns))
	for _, fn := range sotgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sotgb.flds)+len(sotgb.fns))
		for _, f := range *sotgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sotgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sotgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SenderOrderTokenSelect is the builder for selecting fields of SenderOrderToken entities.
type SenderOrderTokenSelect struct {
	*SenderOrderTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sots *SenderOrderTokenSelect) Aggregate(fns ...AggregateFunc) *SenderOrderTokenSelect {
	sots.fns = append(sots.fns, fns...)
	return sots
}

// Scan applies the selector query and scans the result into the given value.
func (sots *SenderOrderTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sots.ctx, ent.OpQuerySelect)
	if err := sots.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SenderOrderTokenQuery, *SenderOrderTokenSelect](ctx, sots.SenderOrderTokenQuery, sots, sots.inters, v)
}

func (sots *SenderOrderTokenSelect) sqlScan(ctx context.Context, root *SenderOrderTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sots.fns))
	for _, fn := range sots.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sots.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sots.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
