// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/providercurrencies"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/shopspring/decimal"
)

// ProviderCurrencies is the model entity for the ProviderCurrencies schema.
type ProviderCurrencies struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AvailableBalance holds the value of the "available_balance" field.
	AvailableBalance decimal.Decimal `json:"available_balance,omitempty"`
	// TotalBalance holds the value of the "total_balance" field.
	TotalBalance decimal.Decimal `json:"total_balance,omitempty"`
	// ReservedBalance holds the value of the "reserved_balance" field.
	ReservedBalance decimal.Decimal `json:"reserved_balance,omitempty"`
	// IsAvailable holds the value of the "is_available" field.
	IsAvailable bool `json:"is_available,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderCurrenciesQuery when eager-loading is set.
	Edges                                ProviderCurrenciesEdges `json:"edges"`
	fiat_currency_provider_currencies    *uuid.UUID
	provider_profile_provider_currencies *string
	selectValues                         sql.SelectValues
}

// ProviderCurrenciesEdges holds the relations/edges for other nodes in the graph.
type ProviderCurrenciesEdges struct {
	// Provider holds the value of the provider edge.
	Provider *ProviderProfile `json:"provider,omitempty"`
	// Currency holds the value of the currency edge.
	Currency *FiatCurrency `json:"currency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCurrenciesEdges) ProviderOrErr() (*ProviderProfile, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: providerprofile.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCurrenciesEdges) CurrencyOrErr() (*FiatCurrency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: fiatcurrency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderCurrencies) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providercurrencies.FieldAvailableBalance, providercurrencies.FieldTotalBalance, providercurrencies.FieldReservedBalance:
			values[i] = new(decimal.Decimal)
		case providercurrencies.FieldIsAvailable:
			values[i] = new(sql.NullBool)
		case providercurrencies.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case providercurrencies.FieldID:
			values[i] = new(uuid.UUID)
		case providercurrencies.ForeignKeys[0]: // fiat_currency_provider_currencies
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case providercurrencies.ForeignKeys[1]: // provider_profile_provider_currencies
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderCurrencies fields.
func (pc *ProviderCurrencies) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providercurrencies.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pc.ID = *value
			}
		case providercurrencies.FieldAvailableBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field available_balance", values[i])
			} else if value != nil {
				pc.AvailableBalance = *value
			}
		case providercurrencies.FieldTotalBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_balance", values[i])
			} else if value != nil {
				pc.TotalBalance = *value
			}
		case providercurrencies.FieldReservedBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field reserved_balance", values[i])
			} else if value != nil {
				pc.ReservedBalance = *value
			}
		case providercurrencies.FieldIsAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_available", values[i])
			} else if value.Valid {
				pc.IsAvailable = value.Bool
			}
		case providercurrencies.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case providercurrencies.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_currency_provider_currencies", values[i])
			} else if value.Valid {
				pc.fiat_currency_provider_currencies = new(uuid.UUID)
				*pc.fiat_currency_provider_currencies = *value.S.(*uuid.UUID)
			}
		case providercurrencies.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_profile_provider_currencies", values[i])
			} else if value.Valid {
				pc.provider_profile_provider_currencies = new(string)
				*pc.provider_profile_provider_currencies = value.String
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderCurrencies.
// This includes values selected through modifiers, order, etc.
func (pc *ProviderCurrencies) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the ProviderCurrencies entity.
func (pc *ProviderCurrencies) QueryProvider() *ProviderProfileQuery {
	return NewProviderCurrenciesClient(pc.config).QueryProvider(pc)
}

// QueryCurrency queries the "currency" edge of the ProviderCurrencies entity.
func (pc *ProviderCurrencies) QueryCurrency() *FiatCurrencyQuery {
	return NewProviderCurrenciesClient(pc.config).QueryCurrency(pc)
}

// Update returns a builder for updating this ProviderCurrencies.
// Note that you need to call ProviderCurrencies.Unwrap() before calling this method if this ProviderCurrencies
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProviderCurrencies) Update() *ProviderCurrenciesUpdateOne {
	return NewProviderCurrenciesClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProviderCurrencies entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProviderCurrencies) Unwrap() *ProviderCurrencies {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderCurrencies is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProviderCurrencies) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderCurrencies(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("available_balance=")
	builder.WriteString(fmt.Sprintf("%v", pc.AvailableBalance))
	builder.WriteString(", ")
	builder.WriteString("total_balance=")
	builder.WriteString(fmt.Sprintf("%v", pc.TotalBalance))
	builder.WriteString(", ")
	builder.WriteString("reserved_balance=")
	builder.WriteString(fmt.Sprintf("%v", pc.ReservedBalance))
	builder.WriteString(", ")
	builder.WriteString("is_available=")
	builder.WriteString(fmt.Sprintf("%v", pc.IsAvailable))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProviderCurrenciesSlice is a parsable slice of ProviderCurrencies.
type ProviderCurrenciesSlice []*ProviderCurrencies
