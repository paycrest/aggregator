// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
)

// LockOrderFulfillment is the model entity for the LockOrderFulfillment schema.
type LockOrderFulfillment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TxID holds the value of the "tx_id" field.
	TxID string `json:"tx_id,omitempty"`
	// Psp holds the value of the "psp" field.
	Psp string `json:"psp,omitempty"`
	// ValidationStatus holds the value of the "validation_status" field.
	ValidationStatus lockorderfulfillment.ValidationStatus `json:"validation_status,omitempty"`
	// ValidationError holds the value of the "validation_error" field.
	ValidationError string `json:"validation_error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LockOrderFulfillmentQuery when eager-loading is set.
	Edges                           LockOrderFulfillmentEdges `json:"edges"`
	lock_payment_order_fulfillments *uuid.UUID
	selectValues                    sql.SelectValues
}

// LockOrderFulfillmentEdges holds the relations/edges for other nodes in the graph.
type LockOrderFulfillmentEdges struct {
	// Order holds the value of the order edge.
	Order *LockPaymentOrder `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LockOrderFulfillmentEdges) OrderOrErr() (*LockPaymentOrder, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lockpaymentorder.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LockOrderFulfillment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lockorderfulfillment.FieldTxID, lockorderfulfillment.FieldPsp, lockorderfulfillment.FieldValidationStatus, lockorderfulfillment.FieldValidationError:
			values[i] = new(sql.NullString)
		case lockorderfulfillment.FieldCreatedAt, lockorderfulfillment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case lockorderfulfillment.FieldID:
			values[i] = new(uuid.UUID)
		case lockorderfulfillment.ForeignKeys[0]: // lock_payment_order_fulfillments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LockOrderFulfillment fields.
func (lof *LockOrderFulfillment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lockorderfulfillment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lof.ID = *value
			}
		case lockorderfulfillment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lof.CreatedAt = value.Time
			}
		case lockorderfulfillment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lof.UpdatedAt = value.Time
			}
		case lockorderfulfillment.FieldTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value.Valid {
				lof.TxID = value.String
			}
		case lockorderfulfillment.FieldPsp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field psp", values[i])
			} else if value.Valid {
				lof.Psp = value.String
			}
		case lockorderfulfillment.FieldValidationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_status", values[i])
			} else if value.Valid {
				lof.ValidationStatus = lockorderfulfillment.ValidationStatus(value.String)
			}
		case lockorderfulfillment.FieldValidationError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_error", values[i])
			} else if value.Valid {
				lof.ValidationError = value.String
			}
		case lockorderfulfillment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field lock_payment_order_fulfillments", values[i])
			} else if value.Valid {
				lof.lock_payment_order_fulfillments = new(uuid.UUID)
				*lof.lock_payment_order_fulfillments = *value.S.(*uuid.UUID)
			}
		default:
			lof.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LockOrderFulfillment.
// This includes values selected through modifiers, order, etc.
func (lof *LockOrderFulfillment) Value(name string) (ent.Value, error) {
	return lof.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the LockOrderFulfillment entity.
func (lof *LockOrderFulfillment) QueryOrder() *LockPaymentOrderQuery {
	return NewLockOrderFulfillmentClient(lof.config).QueryOrder(lof)
}

// Update returns a builder for updating this LockOrderFulfillment.
// Note that you need to call LockOrderFulfillment.Unwrap() before calling this method if this LockOrderFulfillment
// was returned from a transaction, and the transaction was committed or rolled back.
func (lof *LockOrderFulfillment) Update() *LockOrderFulfillmentUpdateOne {
	return NewLockOrderFulfillmentClient(lof.config).UpdateOne(lof)
}

// Unwrap unwraps the LockOrderFulfillment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lof *LockOrderFulfillment) Unwrap() *LockOrderFulfillment {
	_tx, ok := lof.config.driver.(*txDriver)
	if !ok {
		panic("ent: LockOrderFulfillment is not a transactional entity")
	}
	lof.config.driver = _tx.drv
	return lof
}

// String implements the fmt.Stringer.
func (lof *LockOrderFulfillment) String() string {
	var builder strings.Builder
	builder.WriteString("LockOrderFulfillment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lof.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lof.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lof.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tx_id=")
	builder.WriteString(lof.TxID)
	builder.WriteString(", ")
	builder.WriteString("psp=")
	builder.WriteString(lof.Psp)
	builder.WriteString(", ")
	builder.WriteString("validation_status=")
	builder.WriteString(fmt.Sprintf("%v", lof.ValidationStatus))
	builder.WriteString(", ")
	builder.WriteString("validation_error=")
	builder.WriteString(lof.ValidationError)
	builder.WriteByte(')')
	return builder.String()
}

// LockOrderFulfillments is a parsable slice of LockOrderFulfillment.
type LockOrderFulfillments []*LockOrderFulfillment
