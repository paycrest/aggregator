// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/providercurrencyavailability"
	"github.com/paycrest/aggregator/ent/providerprofile"
)

// ProviderCurrencyAvailability is the model entity for the ProviderCurrencyAvailability schema.
type ProviderCurrencyAvailability struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IsAvailable holds the value of the "is_available" field.
	IsAvailable bool `json:"is_available,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderCurrencyAvailabilityQuery when eager-loading is set.
	Edges                                  ProviderCurrencyAvailabilityEdges `json:"edges"`
	fiat_currency_provider_availability    *uuid.UUID
	provider_profile_currency_availability *string
	selectValues                           sql.SelectValues
}

// ProviderCurrencyAvailabilityEdges holds the relations/edges for other nodes in the graph.
type ProviderCurrencyAvailabilityEdges struct {
	// Provider holds the value of the provider edge.
	Provider *ProviderProfile `json:"provider,omitempty"`
	// Currency holds the value of the currency edge.
	Currency *FiatCurrency `json:"currency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCurrencyAvailabilityEdges) ProviderOrErr() (*ProviderProfile, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: providerprofile.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCurrencyAvailabilityEdges) CurrencyOrErr() (*FiatCurrency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: fiatcurrency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderCurrencyAvailability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providercurrencyavailability.FieldIsAvailable:
			values[i] = new(sql.NullBool)
		case providercurrencyavailability.FieldID:
			values[i] = new(uuid.UUID)
		case providercurrencyavailability.ForeignKeys[0]: // fiat_currency_provider_availability
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case providercurrencyavailability.ForeignKeys[1]: // provider_profile_currency_availability
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderCurrencyAvailability fields.
func (pca *ProviderCurrencyAvailability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providercurrencyavailability.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pca.ID = *value
			}
		case providercurrencyavailability.FieldIsAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_available", values[i])
			} else if value.Valid {
				pca.IsAvailable = value.Bool
			}
		case providercurrencyavailability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_currency_provider_availability", values[i])
			} else if value.Valid {
				pca.fiat_currency_provider_availability = new(uuid.UUID)
				*pca.fiat_currency_provider_availability = *value.S.(*uuid.UUID)
			}
		case providercurrencyavailability.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_profile_currency_availability", values[i])
			} else if value.Valid {
				pca.provider_profile_currency_availability = new(string)
				*pca.provider_profile_currency_availability = value.String
			}
		default:
			pca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderCurrencyAvailability.
// This includes values selected through modifiers, order, etc.
func (pca *ProviderCurrencyAvailability) Value(name string) (ent.Value, error) {
	return pca.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the ProviderCurrencyAvailability entity.
func (pca *ProviderCurrencyAvailability) QueryProvider() *ProviderProfileQuery {
	return NewProviderCurrencyAvailabilityClient(pca.config).QueryProvider(pca)
}

// QueryCurrency queries the "currency" edge of the ProviderCurrencyAvailability entity.
func (pca *ProviderCurrencyAvailability) QueryCurrency() *FiatCurrencyQuery {
	return NewProviderCurrencyAvailabilityClient(pca.config).QueryCurrency(pca)
}

// Update returns a builder for updating this ProviderCurrencyAvailability.
// Note that you need to call ProviderCurrencyAvailability.Unwrap() before calling this method if this ProviderCurrencyAvailability
// was returned from a transaction, and the transaction was committed or rolled back.
func (pca *ProviderCurrencyAvailability) Update() *ProviderCurrencyAvailabilityUpdateOne {
	return NewProviderCurrencyAvailabilityClient(pca.config).UpdateOne(pca)
}

// Unwrap unwraps the ProviderCurrencyAvailability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pca *ProviderCurrencyAvailability) Unwrap() *ProviderCurrencyAvailability {
	_tx, ok := pca.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderCurrencyAvailability is not a transactional entity")
	}
	pca.config.driver = _tx.drv
	return pca
}

// String implements the fmt.Stringer.
func (pca *ProviderCurrencyAvailability) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderCurrencyAvailability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pca.ID))
	builder.WriteString("is_available=")
	builder.WriteString(fmt.Sprintf("%v", pca.IsAvailable))
	builder.WriteByte(')')
	return builder.String()
}

// ProviderCurrencyAvailabilities is a parsable slice of ProviderCurrencyAvailability.
type ProviderCurrencyAvailabilities []*ProviderCurrencyAvailability
