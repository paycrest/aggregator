// Code generated by ent, DO NOT EDIT.

package providercurrencyavailability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the providercurrencyavailability type in the database.
	Label = "provider_currency_availability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsAvailable holds the string denoting the is_available field in the database.
	FieldIsAvailable = "is_available"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeCurrency holds the string denoting the currency edge name in mutations.
	EdgeCurrency = "currency"
	// Table holds the table name of the providercurrencyavailability in the database.
	Table = "provider_currency_availabilities"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "provider_currency_availabilities"
	// ProviderInverseTable is the table name for the ProviderProfile entity.
	// It exists in this package in order to avoid circular dependency with the "providerprofile" package.
	ProviderInverseTable = "provider_profiles"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_profile_currency_availability"
	// CurrencyTable is the table that holds the currency relation/edge.
	CurrencyTable = "provider_currency_availabilities"
	// CurrencyInverseTable is the table name for the FiatCurrency entity.
	// It exists in this package in order to avoid circular dependency with the "fiatcurrency" package.
	CurrencyInverseTable = "fiat_currencies"
	// CurrencyColumn is the table column denoting the currency relation/edge.
	CurrencyColumn = "fiat_currency_provider_availability"
)

// Columns holds all SQL columns for providercurrencyavailability fields.
var Columns = []string{
	FieldID,
	FieldIsAvailable,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_currency_availabilities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fiat_currency_provider_availability",
	"provider_profile_currency_availability",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAvailable holds the default value on creation for the "is_available" field.
	DefaultIsAvailable bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProviderCurrencyAvailability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsAvailable orders the results by the is_available field.
func ByIsAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAvailable, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrencyField orders the results by currency field.
func ByCurrencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
func newCurrencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
	)
}
