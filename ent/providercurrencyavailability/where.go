// Code generated by ent, DO NOT EDIT.

package providercurrencyavailability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldLTE(FieldID, id))
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.FieldNEQ(FieldIsAvailable, v))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.ProviderProfile) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.FiatCurrency) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderCurrencyAvailability) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderCurrencyAvailability) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderCurrencyAvailability) predicate.ProviderCurrencyAvailability {
	return predicate.ProviderCurrencyAvailability(sql.NotPredicates(p))
}
