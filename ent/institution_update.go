// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/institution"
	"github.com/paycrest/aggregator/ent/predicate"
)

// InstitutionUpdate is the builder for updating Institution entities.
type InstitutionUpdate struct {
	config
	hooks    []Hook
	mutation *InstitutionMutation
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iu *InstitutionUpdate) Where(ps ...predicate.Institution) *InstitutionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InstitutionUpdate) SetUpdatedAt(t time.Time) *InstitutionUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetCode sets the "code" field.
func (iu *InstitutionUpdate) SetCode(s string) *InstitutionUpdate {
	iu.mutation.SetCode(s)
	return iu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableCode(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetCode(*s)
	}
	return iu
}

// SetName sets the "name" field.
func (iu *InstitutionUpdate) SetName(s string) *InstitutionUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableName(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetType sets the "type" field.
func (iu *InstitutionUpdate) SetType(i institution.Type) *InstitutionUpdate {
	iu.mutation.SetType(i)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableType(i *institution.Type) *InstitutionUpdate {
	if i != nil {
		iu.SetType(*i)
	}
	return iu
}

// SetFiatCurrencyID sets the "fiat_currency" edge to the FiatCurrency entity by ID.
func (iu *InstitutionUpdate) SetFiatCurrencyID(id uuid.UUID) *InstitutionUpdate {
	iu.mutation.SetFiatCurrencyID(id)
	return iu
}

// SetNillableFiatCurrencyID sets the "fiat_currency" edge to the FiatCurrency entity by ID if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableFiatCurrencyID(id *uuid.UUID) *InstitutionUpdate {
	if id != nil {
		iu = iu.SetFiatCurrencyID(*id)
	}
	return iu
}

// SetFiatCurrency sets the "fiat_currency" edge to the FiatCurrency entity.
func (iu *InstitutionUpdate) SetFiatCurrency(f *FiatCurrency) *InstitutionUpdate {
	return iu.SetFiatCurrencyID(f.ID)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iu *InstitutionUpdate) Mutation() *InstitutionMutation {
	return iu.mutation
}

// ClearFiatCurrency clears the "fiat_currency" edge to the FiatCurrency entity.
func (iu *InstitutionUpdate) ClearFiatCurrency() *InstitutionUpdate {
	iu.mutation.ClearFiatCurrency()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstitutionUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstitutionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstitutionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstitutionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InstitutionUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := institution.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InstitutionUpdate) check() error {
	if v, ok := iu.mutation.GetType(); ok {
		if err := institution.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Institution.type": %w`, err)}
		}
	}
	return nil
}

func (iu *InstitutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(institution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Code(); ok {
		_spec.SetField(institution.FieldCode, field.TypeString, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(institution.FieldType, field.TypeEnum, value)
	}
	if iu.mutation.FiatCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institution.FiatCurrencyTable,
			Columns: []string{institution.FiatCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.FiatCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institution.FiatCurrencyTable,
			Columns: []string{institution.FiatCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstitutionUpdateOne is the builder for updating a single Institution entity.
type InstitutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstitutionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InstitutionUpdateOne) SetUpdatedAt(t time.Time) *InstitutionUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetCode sets the "code" field.
func (iuo *InstitutionUpdateOne) SetCode(s string) *InstitutionUpdateOne {
	iuo.mutation.SetCode(s)
	return iuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableCode(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetCode(*s)
	}
	return iuo
}

// SetName sets the "name" field.
func (iuo *InstitutionUpdateOne) SetName(s string) *InstitutionUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableName(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetType sets the "type" field.
func (iuo *InstitutionUpdateOne) SetType(i institution.Type) *InstitutionUpdateOne {
	iuo.mutation.SetType(i)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableType(i *institution.Type) *InstitutionUpdateOne {
	if i != nil {
		iuo.SetType(*i)
	}
	return iuo
}

// SetFiatCurrencyID sets the "fiat_currency" edge to the FiatCurrency entity by ID.
func (iuo *InstitutionUpdateOne) SetFiatCurrencyID(id uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.SetFiatCurrencyID(id)
	return iuo
}

// SetNillableFiatCurrencyID sets the "fiat_currency" edge to the FiatCurrency entity by ID if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableFiatCurrencyID(id *uuid.UUID) *InstitutionUpdateOne {
	if id != nil {
		iuo = iuo.SetFiatCurrencyID(*id)
	}
	return iuo
}

// SetFiatCurrency sets the "fiat_currency" edge to the FiatCurrency entity.
func (iuo *InstitutionUpdateOne) SetFiatCurrency(f *FiatCurrency) *InstitutionUpdateOne {
	return iuo.SetFiatCurrencyID(f.ID)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iuo *InstitutionUpdateOne) Mutation() *InstitutionMutation {
	return iuo.mutation
}

// ClearFiatCurrency clears the "fiat_currency" edge to the FiatCurrency entity.
func (iuo *InstitutionUpdateOne) ClearFiatCurrency() *InstitutionUpdateOne {
	iuo.mutation.ClearFiatCurrency()
	return iuo
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iuo *InstitutionUpdateOne) Where(ps ...predicate.Institution) *InstitutionUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstitutionUpdateOne) Select(field string, fields ...string) *InstitutionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Institution entity.
func (iuo *InstitutionUpdateOne) Save(ctx context.Context) (*Institution, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) SaveX(ctx context.Context) *Institution {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstitutionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InstitutionUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := institution.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InstitutionUpdateOne) check() error {
	if v, ok := iuo.mutation.GetType(); ok {
		if err := institution.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Institution.type": %w`, err)}
		}
	}
	return nil
}

func (iuo *InstitutionUpdateOne) sqlSave(ctx context.Context) (_node *Institution, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Institution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, institution.FieldID)
		for _, f := range fields {
			if !institution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != institution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(institution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Code(); ok {
		_spec.SetField(institution.FieldCode, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(institution.FieldType, field.TypeEnum, value)
	}
	if iuo.mutation.FiatCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institution.FiatCurrencyTable,
			Columns: []string{institution.FiatCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.FiatCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institution.FiatCurrencyTable,
			Columns: []string{institution.FiatCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Institution{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
