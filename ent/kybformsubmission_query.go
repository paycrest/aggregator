// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBFormSubmissionQuery is the builder for querying KYBFormSubmission entities.
type KYBFormSubmissionQuery struct {
	config
	ctx                  *QueryContext
	order                []kybformsubmission.OrderOption
	inters               []Interceptor
	predicates           []predicate.KYBFormSubmission
	withBeneficialOwners *BeneficialOwnerQuery
	withUser             *UserQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KYBFormSubmissionQuery builder.
func (kfsq *KYBFormSubmissionQuery) Where(ps ...predicate.KYBFormSubmission) *KYBFormSubmissionQuery {
	kfsq.predicates = append(kfsq.predicates, ps...)
	return kfsq
}

// Limit the number of records to be returned by this query.
func (kfsq *KYBFormSubmissionQuery) Limit(limit int) *KYBFormSubmissionQuery {
	kfsq.ctx.Limit = &limit
	return kfsq
}

// Offset to start from.
func (kfsq *KYBFormSubmissionQuery) Offset(offset int) *KYBFormSubmissionQuery {
	kfsq.ctx.Offset = &offset
	return kfsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kfsq *KYBFormSubmissionQuery) Unique(unique bool) *KYBFormSubmissionQuery {
	kfsq.ctx.Unique = &unique
	return kfsq
}

// Order specifies how the records should be ordered.
func (kfsq *KYBFormSubmissionQuery) Order(o ...kybformsubmission.OrderOption) *KYBFormSubmissionQuery {
	kfsq.order = append(kfsq.order, o...)
	return kfsq
}

// QueryBeneficialOwners chains the current query on the "beneficial_owners" edge.
func (kfsq *KYBFormSubmissionQuery) QueryBeneficialOwners() *BeneficialOwnerQuery {
	query := (&BeneficialOwnerClient{config: kfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kybformsubmission.Table, kybformsubmission.FieldID, selector),
			sqlgraph.To(beneficialowner.Table, beneficialowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kybformsubmission.BeneficialOwnersTable, kybformsubmission.BeneficialOwnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (kfsq *KYBFormSubmissionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: kfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kybformsubmission.Table, kybformsubmission.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, kybformsubmission.UserTable, kybformsubmission.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(kfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KYBFormSubmission entity from the query.
// Returns a *NotFoundError when no KYBFormSubmission was found.
func (kfsq *KYBFormSubmissionQuery) First(ctx context.Context) (*KYBFormSubmission, error) {
	nodes, err := kfsq.Limit(1).All(setContextOp(ctx, kfsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kybformsubmission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) FirstX(ctx context.Context) *KYBFormSubmission {
	node, err := kfsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KYBFormSubmission ID from the query.
// Returns a *NotFoundError when no KYBFormSubmission ID was found.
func (kfsq *KYBFormSubmissionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = kfsq.Limit(1).IDs(setContextOp(ctx, kfsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kybformsubmission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := kfsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KYBFormSubmission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KYBFormSubmission entity is found.
// Returns a *NotFoundError when no KYBFormSubmission entities are found.
func (kfsq *KYBFormSubmissionQuery) Only(ctx context.Context) (*KYBFormSubmission, error) {
	nodes, err := kfsq.Limit(2).All(setContextOp(ctx, kfsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kybformsubmission.Label}
	default:
		return nil, &NotSingularError{kybformsubmission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) OnlyX(ctx context.Context) *KYBFormSubmission {
	node, err := kfsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KYBFormSubmission ID in the query.
// Returns a *NotSingularError when more than one KYBFormSubmission ID is found.
// Returns a *NotFoundError when no entities are found.
func (kfsq *KYBFormSubmissionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = kfsq.Limit(2).IDs(setContextOp(ctx, kfsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kybformsubmission.Label}
	default:
		err = &NotSingularError{kybformsubmission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := kfsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KYBFormSubmissions.
func (kfsq *KYBFormSubmissionQuery) All(ctx context.Context) ([]*KYBFormSubmission, error) {
	ctx = setContextOp(ctx, kfsq.ctx, ent.OpQueryAll)
	if err := kfsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KYBFormSubmission, *KYBFormSubmissionQuery]()
	return withInterceptors[[]*KYBFormSubmission](ctx, kfsq, qr, kfsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) AllX(ctx context.Context) []*KYBFormSubmission {
	nodes, err := kfsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KYBFormSubmission IDs.
func (kfsq *KYBFormSubmissionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if kfsq.ctx.Unique == nil && kfsq.path != nil {
		kfsq.Unique(true)
	}
	ctx = setContextOp(ctx, kfsq.ctx, ent.OpQueryIDs)
	if err = kfsq.Select(kybformsubmission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := kfsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kfsq *KYBFormSubmissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, kfsq.ctx, ent.OpQueryCount)
	if err := kfsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, kfsq, querierCount[*KYBFormSubmissionQuery](), kfsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) CountX(ctx context.Context) int {
	count, err := kfsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kfsq *KYBFormSubmissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, kfsq.ctx, ent.OpQueryExist)
	switch _, err := kfsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (kfsq *KYBFormSubmissionQuery) ExistX(ctx context.Context) bool {
	exist, err := kfsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KYBFormSubmissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kfsq *KYBFormSubmissionQuery) Clone() *KYBFormSubmissionQuery {
	if kfsq == nil {
		return nil
	}
	return &KYBFormSubmissionQuery{
		config:               kfsq.config,
		ctx:                  kfsq.ctx.Clone(),
		order:                append([]kybformsubmission.OrderOption{}, kfsq.order...),
		inters:               append([]Interceptor{}, kfsq.inters...),
		predicates:           append([]predicate.KYBFormSubmission{}, kfsq.predicates...),
		withBeneficialOwners: kfsq.withBeneficialOwners.Clone(),
		withUser:             kfsq.withUser.Clone(),
		// clone intermediate query.
		sql:  kfsq.sql.Clone(),
		path: kfsq.path,
	}
}

// WithBeneficialOwners tells the query-builder to eager-load the nodes that are connected to
// the "beneficial_owners" edge. The optional arguments are used to configure the query builder of the edge.
func (kfsq *KYBFormSubmissionQuery) WithBeneficialOwners(opts ...func(*BeneficialOwnerQuery)) *KYBFormSubmissionQuery {
	query := (&BeneficialOwnerClient{config: kfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kfsq.withBeneficialOwners = query
	return kfsq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (kfsq *KYBFormSubmissionQuery) WithUser(opts ...func(*UserQuery)) *KYBFormSubmissionQuery {
	query := (&UserClient{config: kfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kfsq.withUser = query
	return kfsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KYBFormSubmission.Query().
//		GroupBy(kybformsubmission.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (kfsq *KYBFormSubmissionQuery) GroupBy(field string, fields ...string) *KYBFormSubmissionGroupBy {
	kfsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KYBFormSubmissionGroupBy{build: kfsq}
	grbuild.flds = &kfsq.ctx.Fields
	grbuild.label = kybformsubmission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.KYBFormSubmission.Query().
//		Select(kybformsubmission.FieldCreatedAt).
//		Scan(ctx, &v)
func (kfsq *KYBFormSubmissionQuery) Select(fields ...string) *KYBFormSubmissionSelect {
	kfsq.ctx.Fields = append(kfsq.ctx.Fields, fields...)
	sbuild := &KYBFormSubmissionSelect{KYBFormSubmissionQuery: kfsq}
	sbuild.label = kybformsubmission.Label
	sbuild.flds, sbuild.scan = &kfsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KYBFormSubmissionSelect configured with the given aggregations.
func (kfsq *KYBFormSubmissionQuery) Aggregate(fns ...AggregateFunc) *KYBFormSubmissionSelect {
	return kfsq.Select().Aggregate(fns...)
}

func (kfsq *KYBFormSubmissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range kfsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, kfsq); err != nil {
				return err
			}
		}
	}
	for _, f := range kfsq.ctx.Fields {
		if !kybformsubmission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kfsq.path != nil {
		prev, err := kfsq.path(ctx)
		if err != nil {
			return err
		}
		kfsq.sql = prev
	}
	return nil
}

func (kfsq *KYBFormSubmissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KYBFormSubmission, error) {
	var (
		nodes       = []*KYBFormSubmission{}
		withFKs     = kfsq.withFKs
		_spec       = kfsq.querySpec()
		loadedTypes = [2]bool{
			kfsq.withBeneficialOwners != nil,
			kfsq.withUser != nil,
		}
	)
	if kfsq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, kybformsubmission.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KYBFormSubmission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KYBFormSubmission{config: kfsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kfsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := kfsq.withBeneficialOwners; query != nil {
		if err := kfsq.loadBeneficialOwners(ctx, query, nodes,
			func(n *KYBFormSubmission) { n.Edges.BeneficialOwners = []*BeneficialOwner{} },
			func(n *KYBFormSubmission, e *BeneficialOwner) {
				n.Edges.BeneficialOwners = append(n.Edges.BeneficialOwners, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := kfsq.withUser; query != nil {
		if err := kfsq.loadUser(ctx, query, nodes, nil,
			func(n *KYBFormSubmission, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (kfsq *KYBFormSubmissionQuery) loadBeneficialOwners(ctx context.Context, query *BeneficialOwnerQuery, nodes []*KYBFormSubmission, init func(*KYBFormSubmission), assign func(*KYBFormSubmission, *BeneficialOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*KYBFormSubmission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BeneficialOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kybformsubmission.BeneficialOwnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kyb_form_submission_beneficial_owners
		if fk == nil {
			return fmt.Errorf(`foreign-key "kyb_form_submission_beneficial_owners" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kyb_form_submission_beneficial_owners" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kfsq *KYBFormSubmissionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*KYBFormSubmission, init func(*KYBFormSubmission), assign func(*KYBFormSubmission, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*KYBFormSubmission)
	for i := range nodes {
		if nodes[i].kyb_form_submission_user == nil {
			continue
		}
		fk := *nodes[i].kyb_form_submission_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "kyb_form_submission_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (kfsq *KYBFormSubmissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kfsq.querySpec()
	_spec.Node.Columns = kfsq.ctx.Fields
	if len(kfsq.ctx.Fields) > 0 {
		_spec.Unique = kfsq.ctx.Unique != nil && *kfsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, kfsq.driver, _spec)
}

func (kfsq *KYBFormSubmissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kybformsubmission.Table, kybformsubmission.Columns, sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID))
	_spec.From = kfsq.sql
	if unique := kfsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if kfsq.path != nil {
		_spec.Unique = true
	}
	if fields := kfsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kybformsubmission.FieldID)
		for i := range fields {
			if fields[i] != kybformsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kfsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kfsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kfsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kfsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kfsq *KYBFormSubmissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kfsq.driver.Dialect())
	t1 := builder.Table(kybformsubmission.Table)
	columns := kfsq.ctx.Fields
	if len(columns) == 0 {
		columns = kybformsubmission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kfsq.sql != nil {
		selector = kfsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kfsq.ctx.Unique != nil && *kfsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range kfsq.predicates {
		p(selector)
	}
	for _, p := range kfsq.order {
		p(selector)
	}
	if offset := kfsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kfsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KYBFormSubmissionGroupBy is the group-by builder for KYBFormSubmission entities.
type KYBFormSubmissionGroupBy struct {
	selector
	build *KYBFormSubmissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kfsgb *KYBFormSubmissionGroupBy) Aggregate(fns ...AggregateFunc) *KYBFormSubmissionGroupBy {
	kfsgb.fns = append(kfsgb.fns, fns...)
	return kfsgb
}

// Scan applies the selector query and scans the result into the given value.
func (kfsgb *KYBFormSubmissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kfsgb.build.ctx, ent.OpQueryGroupBy)
	if err := kfsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KYBFormSubmissionQuery, *KYBFormSubmissionGroupBy](ctx, kfsgb.build, kfsgb, kfsgb.build.inters, v)
}

func (kfsgb *KYBFormSubmissionGroupBy) sqlScan(ctx context.Context, root *KYBFormSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kfsgb.fns))
	for _, fn := range kfsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kfsgb.flds)+len(kfsgb.fns))
		for _, f := range *kfsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kfsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kfsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KYBFormSubmissionSelect is the builder for selecting fields of KYBFormSubmission entities.
type KYBFormSubmissionSelect struct {
	*KYBFormSubmissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kfss *KYBFormSubmissionSelect) Aggregate(fns ...AggregateFunc) *KYBFormSubmissionSelect {
	kfss.fns = append(kfss.fns, fns...)
	return kfss
}

// Scan applies the selector query and scans the result into the given value.
func (kfss *KYBFormSubmissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kfss.ctx, ent.OpQuerySelect)
	if err := kfss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KYBFormSubmissionQuery, *KYBFormSubmissionSelect](ctx, kfss.KYBFormSubmissionQuery, kfss, kfss.inters, v)
}

func (kfss *KYBFormSubmissionSelect) sqlScan(ctx context.Context, root *KYBFormSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kfss.fns))
	for _, fn := range kfss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kfss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kfss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
