// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "scope", Type: field.TypeEnum, Enums: []string{"sender", "provider", "tx_validator"}},
		{Name: "secret", Type: field.TypeString, Unique: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_api_keys", Type: field.TypeUUID, Nullable: true},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apikey_scope_user_api_keys",
				Unique:  true,
				Columns: []*schema.Column{APIKeysColumns[2], APIKeysColumns[6]},
			},
		},
	}
	// NetworksColumns holds the columns for the "networks" table.
	NetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "chain_id", Type: field.TypeInt64},
		{Name: "identifier", Type: field.TypeEnum, Enums: []string{"bnb-smart-chain", "polygon", "tron", "polygon-mumbai", "tron-shasta"}},
		{Name: "rpc_endpoint", Type: field.TypeString},
		{Name: "is_testnet", Type: field.TypeBool},
	}
	// NetworksTable holds the schema information for the "networks" table.
	NetworksTable = &schema.Table{
		Name:       "networks",
		Columns:    NetworksColumns,
		PrimaryKey: []*schema.Column{NetworksColumns[0]},
	}
	// PaymentOrdersColumns holds the columns for the "payment_orders" table.
	PaymentOrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "amount_paid", Type: field.TypeFloat64},
		{Name: "tx_hash", Type: field.TypeString, Nullable: true, Size: 70},
		{Name: "receive_address_text", Type: field.TypeString, Size: 60},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"initiated", "pending", "settled", "cancelled", "failed", "refunded"}, Default: "initiated"},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "api_key_payment_orders", Type: field.TypeUUID, Nullable: true},
		{Name: "token_payment_orders", Type: field.TypeInt},
	}
	// PaymentOrdersTable holds the schema information for the "payment_orders" table.
	PaymentOrdersTable = &schema.Table{
		Name:       "payment_orders",
		Columns:    PaymentOrdersColumns,
		PrimaryKey: []*schema.Column{PaymentOrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_orders_api_keys_payment_orders",
				Columns:    []*schema.Column{PaymentOrdersColumns[9]},
				RefColumns: []*schema.Column{APIKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "payment_orders_tokens_payment_orders",
				Columns:    []*schema.Column{PaymentOrdersColumns[10]},
				RefColumns: []*schema.Column{TokensColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentOrderRecipientsColumns holds the columns for the "payment_order_recipients" table.
	PaymentOrderRecipientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "institution", Type: field.TypeString},
		{Name: "account_identifier", Type: field.TypeString},
		{Name: "account_name", Type: field.TypeString},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "payment_order_recipient", Type: field.TypeUUID, Unique: true},
	}
	// PaymentOrderRecipientsTable holds the schema information for the "payment_order_recipients" table.
	PaymentOrderRecipientsTable = &schema.Table{
		Name:       "payment_order_recipients",
		Columns:    PaymentOrderRecipientsColumns,
		PrimaryKey: []*schema.Column{PaymentOrderRecipientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_order_recipients_payment_orders_recipient",
				Columns:    []*schema.Column{PaymentOrderRecipientsColumns[5]},
				RefColumns: []*schema.Column{PaymentOrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProviderAvailabilitiesColumns holds the columns for the "provider_availabilities" table.
	ProviderAvailabilitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "cadence", Type: field.TypeEnum, Enums: []string{"always", "weekdays", "weekends"}},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "provider_profile_availability", Type: field.TypeString, Unique: true},
	}
	// ProviderAvailabilitiesTable holds the schema information for the "provider_availabilities" table.
	ProviderAvailabilitiesTable = &schema.Table{
		Name:       "provider_availabilities",
		Columns:    ProviderAvailabilitiesColumns,
		PrimaryKey: []*schema.Column{ProviderAvailabilitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_availabilities_provider_profiles_availability",
				Columns:    []*schema.Column{ProviderAvailabilitiesColumns[4]},
				RefColumns: []*schema.Column{ProviderProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProviderOrderTokensColumns holds the columns for the "provider_order_tokens" table.
	ProviderOrderTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeEnum, Enums: []string{"USDT", "USDC", "BUSD"}},
		{Name: "fixed_conversion_rate", Type: field.TypeFloat64},
		{Name: "floating_conversion_rate", Type: field.TypeFloat64},
		{Name: "conversion_rate_type", Type: field.TypeEnum, Enums: []string{"fixed", "floating"}},
		{Name: "max_order_amount", Type: field.TypeFloat64},
		{Name: "min_order_amount", Type: field.TypeFloat64},
		{Name: "provider_profile_order_tokens", Type: field.TypeString, Nullable: true},
	}
	// ProviderOrderTokensTable holds the schema information for the "provider_order_tokens" table.
	ProviderOrderTokensTable = &schema.Table{
		Name:       "provider_order_tokens",
		Columns:    ProviderOrderTokensColumns,
		PrimaryKey: []*schema.Column{ProviderOrderTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_order_tokens_provider_profiles_order_tokens",
				Columns:    []*schema.Column{ProviderOrderTokensColumns[9]},
				RefColumns: []*schema.Column{ProviderProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "providerordertoken_name_provider_profile_order_tokens",
				Unique:  true,
				Columns: []*schema.Column{ProviderOrderTokensColumns[3], ProviderOrderTokensColumns[9]},
			},
		},
	}
	// ProviderOrderTokenAddressesColumns holds the columns for the "provider_order_token_addresses" table.
	ProviderOrderTokenAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "network", Type: field.TypeEnum, Enums: []string{"bnb-smart-chain", "polygon", "tron", "polygon-mumbai", "tron-shasta"}},
		{Name: "address", Type: field.TypeString, Size: 50},
		{Name: "provider_order_token_addresses", Type: field.TypeInt, Nullable: true},
	}
	// ProviderOrderTokenAddressesTable holds the schema information for the "provider_order_token_addresses" table.
	ProviderOrderTokenAddressesTable = &schema.Table{
		Name:       "provider_order_token_addresses",
		Columns:    ProviderOrderTokenAddressesColumns,
		PrimaryKey: []*schema.Column{ProviderOrderTokenAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_order_token_addresses_provider_order_tokens_addresses",
				Columns:    []*schema.Column{ProviderOrderTokenAddressesColumns[3]},
				RefColumns: []*schema.Column{ProviderOrderTokensColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProviderProfilesColumns holds the columns for the "provider_profiles" table.
	ProviderProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "trading_name", Type: field.TypeString, Size: 80},
		{Name: "country", Type: field.TypeString, Size: 80},
		{Name: "api_key_provider_profile", Type: field.TypeUUID, Unique: true},
	}
	// ProviderProfilesTable holds the schema information for the "provider_profiles" table.
	ProviderProfilesTable = &schema.Table{
		Name:       "provider_profiles",
		Columns:    ProviderProfilesColumns,
		PrimaryKey: []*schema.Column{ProviderProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_profiles_api_keys_provider_profile",
				Columns:    []*schema.Column{ProviderProfilesColumns[5]},
				RefColumns: []*schema.Column{APIKeysColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ReceiveAddressesColumns holds the columns for the "receive_addresses" table.
	ReceiveAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"unused", "partial", "used", "expired"}, Default: "unused"},
		{Name: "last_indexed_block", Type: field.TypeInt64, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "payment_order_receive_address", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// ReceiveAddressesTable holds the schema information for the "receive_addresses" table.
	ReceiveAddressesTable = &schema.Table{
		Name:       "receive_addresses",
		Columns:    ReceiveAddressesColumns,
		PrimaryKey: []*schema.Column{ReceiveAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "receive_addresses_payment_orders_receive_address",
				Columns:    []*schema.Column{ReceiveAddressesColumns[7]},
				RefColumns: []*schema.Column{PaymentOrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "symbol", Type: field.TypeString, Size: 10},
		{Name: "contract_address", Type: field.TypeString, Size: 60},
		{Name: "decimals", Type: field.TypeInt8},
		{Name: "is_enabled", Type: field.TypeBool, Default: false},
		{Name: "network_tokens", Type: field.TypeInt},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_networks_tokens",
				Columns:    []*schema.Column{TokensColumns[7]},
				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_name", Type: field.TypeString, Size: 80},
		{Name: "last_name", Type: field.TypeString, Size: 80},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "is_verified", Type: field.TypeBool, Default: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		NetworksTable,
		PaymentOrdersTable,
		PaymentOrderRecipientsTable,
		ProviderAvailabilitiesTable,
		ProviderOrderTokensTable,
		ProviderOrderTokenAddressesTable,
		ProviderProfilesTable,
		ReceiveAddressesTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	PaymentOrdersTable.ForeignKeys[0].RefTable = APIKeysTable
	PaymentOrdersTable.ForeignKeys[1].RefTable = TokensTable
	PaymentOrderRecipientsTable.ForeignKeys[0].RefTable = PaymentOrdersTable
	ProviderAvailabilitiesTable.ForeignKeys[0].RefTable = ProviderProfilesTable
	ProviderOrderTokensTable.ForeignKeys[0].RefTable = ProviderProfilesTable
	ProviderOrderTokenAddressesTable.ForeignKeys[0].RefTable = ProviderOrderTokensTable
	ProviderProfilesTable.ForeignKeys[0].RefTable = APIKeysTable
	ReceiveAddressesTable.ForeignKeys[0].RefTable = PaymentOrdersTable
	TokensTable.ForeignKeys[0].RefTable = NetworksTable
}
