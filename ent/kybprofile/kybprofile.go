// Code generated by ent, DO NOT EDIT.

package kybprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the kybprofile type in the database.
	Label = "kyb_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMobileNumber holds the string denoting the mobile_number field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldRegisteredBusinessAddress holds the string denoting the registered_business_address field in the database.
	FieldRegisteredBusinessAddress = "registered_business_address"
	// FieldCertificateOfIncorporationURL holds the string denoting the certificate_of_incorporation_url field in the database.
	FieldCertificateOfIncorporationURL = "certificate_of_incorporation_url"
	// FieldArticlesOfIncorporationURL holds the string denoting the articles_of_incorporation_url field in the database.
	FieldArticlesOfIncorporationURL = "articles_of_incorporation_url"
	// FieldBusinessLicenseURL holds the string denoting the business_license_url field in the database.
	FieldBusinessLicenseURL = "business_license_url"
	// FieldProofOfBusinessAddressURL holds the string denoting the proof_of_business_address_url field in the database.
	FieldProofOfBusinessAddressURL = "proof_of_business_address_url"
	// FieldProofOfResidentialAddressURL holds the string denoting the proof_of_residential_address_url field in the database.
	FieldProofOfResidentialAddressURL = "proof_of_residential_address_url"
	// FieldAmlPolicyURL holds the string denoting the aml_policy_url field in the database.
	FieldAmlPolicyURL = "aml_policy_url"
	// FieldKycPolicyURL holds the string denoting the kyc_policy_url field in the database.
	FieldKycPolicyURL = "kyc_policy_url"
	// EdgeBeneficialOwners holds the string denoting the beneficial_owners edge name in mutations.
	EdgeBeneficialOwners = "beneficial_owners"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the kybprofile in the database.
	Table = "kyb_profiles"
	// BeneficialOwnersTable is the table that holds the beneficial_owners relation/edge.
	BeneficialOwnersTable = "beneficial_owners"
	// BeneficialOwnersInverseTable is the table name for the BeneficialOwner entity.
	// It exists in this package in order to avoid circular dependency with the "beneficialowner" package.
	BeneficialOwnersInverseTable = "beneficial_owners"
	// BeneficialOwnersColumn is the table column denoting the beneficial_owners relation/edge.
	BeneficialOwnersColumn = "kyb_profile_beneficial_owners"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "kyb_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_kyb_profile"
)

// Columns holds all SQL columns for kybprofile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMobileNumber,
	FieldCompanyName,
	FieldRegisteredBusinessAddress,
	FieldCertificateOfIncorporationURL,
	FieldArticlesOfIncorporationURL,
	FieldBusinessLicenseURL,
	FieldProofOfBusinessAddressURL,
	FieldProofOfResidentialAddressURL,
	FieldAmlPolicyURL,
	FieldKycPolicyURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "kyb_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_kyb_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the KYBProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMobileNumber orders the results by the mobile_number field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByRegisteredBusinessAddress orders the results by the registered_business_address field.
func ByRegisteredBusinessAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisteredBusinessAddress, opts...).ToFunc()
}

// ByCertificateOfIncorporationURL orders the results by the certificate_of_incorporation_url field.
func ByCertificateOfIncorporationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificateOfIncorporationURL, opts...).ToFunc()
}

// ByArticlesOfIncorporationURL orders the results by the articles_of_incorporation_url field.
func ByArticlesOfIncorporationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArticlesOfIncorporationURL, opts...).ToFunc()
}

// ByBusinessLicenseURL orders the results by the business_license_url field.
func ByBusinessLicenseURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessLicenseURL, opts...).ToFunc()
}

// ByProofOfBusinessAddressURL orders the results by the proof_of_business_address_url field.
func ByProofOfBusinessAddressURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProofOfBusinessAddressURL, opts...).ToFunc()
}

// ByProofOfResidentialAddressURL orders the results by the proof_of_residential_address_url field.
func ByProofOfResidentialAddressURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProofOfResidentialAddressURL, opts...).ToFunc()
}

// ByAmlPolicyURL orders the results by the aml_policy_url field.
func ByAmlPolicyURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmlPolicyURL, opts...).ToFunc()
}

// ByKycPolicyURL orders the results by the kyc_policy_url field.
func ByKycPolicyURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKycPolicyURL, opts...).ToFunc()
}

// ByBeneficialOwnersCount orders the results by beneficial_owners count.
func ByBeneficialOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBeneficialOwnersStep(), opts...)
	}
}

// ByBeneficialOwners orders the results by beneficial_owners terms.
func ByBeneficialOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBeneficialOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newBeneficialOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BeneficialOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BeneficialOwnersTable, BeneficialOwnersColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
