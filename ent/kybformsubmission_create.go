// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBFormSubmissionCreate is the builder for creating a KYBFormSubmission entity.
type KYBFormSubmissionCreate struct {
	config
	mutation *KYBFormSubmissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kfsc *KYBFormSubmissionCreate) SetCreatedAt(t time.Time) *KYBFormSubmissionCreate {
	kfsc.mutation.SetCreatedAt(t)
	return kfsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableCreatedAt(t *time.Time) *KYBFormSubmissionCreate {
	if t != nil {
		kfsc.SetCreatedAt(*t)
	}
	return kfsc
}

// SetUpdatedAt sets the "updated_at" field.
func (kfsc *KYBFormSubmissionCreate) SetUpdatedAt(t time.Time) *KYBFormSubmissionCreate {
	kfsc.mutation.SetUpdatedAt(t)
	return kfsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableUpdatedAt(t *time.Time) *KYBFormSubmissionCreate {
	if t != nil {
		kfsc.SetUpdatedAt(*t)
	}
	return kfsc
}

// SetEmail sets the "email" field.
func (kfsc *KYBFormSubmissionCreate) SetEmail(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetEmail(s)
	return kfsc
}

// SetCompanyName sets the "company_name" field.
func (kfsc *KYBFormSubmissionCreate) SetCompanyName(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetCompanyName(s)
	return kfsc
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kfsc *KYBFormSubmissionCreate) SetRegisteredBusinessAddress(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetRegisteredBusinessAddress(s)
	return kfsc
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kfsc *KYBFormSubmissionCreate) SetCertificateOfIncorporationURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetCertificateOfIncorporationURL(s)
	return kfsc
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kfsc *KYBFormSubmissionCreate) SetArticlesOfIncorporationURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetArticlesOfIncorporationURL(s)
	return kfsc
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kfsc *KYBFormSubmissionCreate) SetBusinessLicenseURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetBusinessLicenseURL(s)
	return kfsc
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableBusinessLicenseURL(s *string) *KYBFormSubmissionCreate {
	if s != nil {
		kfsc.SetBusinessLicenseURL(*s)
	}
	return kfsc
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kfsc *KYBFormSubmissionCreate) SetProofOfBusinessAddressURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetProofOfBusinessAddressURL(s)
	return kfsc
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (kfsc *KYBFormSubmissionCreate) SetProofOfResidentialAddressURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetProofOfResidentialAddressURL(s)
	return kfsc
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kfsc *KYBFormSubmissionCreate) SetAmlPolicyURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetAmlPolicyURL(s)
	return kfsc
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableAmlPolicyURL(s *string) *KYBFormSubmissionCreate {
	if s != nil {
		kfsc.SetAmlPolicyURL(*s)
	}
	return kfsc
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kfsc *KYBFormSubmissionCreate) SetKycPolicyURL(s string) *KYBFormSubmissionCreate {
	kfsc.mutation.SetKycPolicyURL(s)
	return kfsc
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableKycPolicyURL(s *string) *KYBFormSubmissionCreate {
	if s != nil {
		kfsc.SetKycPolicyURL(*s)
	}
	return kfsc
}

// SetID sets the "id" field.
func (kfsc *KYBFormSubmissionCreate) SetID(u uuid.UUID) *KYBFormSubmissionCreate {
	kfsc.mutation.SetID(u)
	return kfsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableID(u *uuid.UUID) *KYBFormSubmissionCreate {
	if u != nil {
		kfsc.SetID(*u)
	}
	return kfsc
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kfsc *KYBFormSubmissionCreate) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBFormSubmissionCreate {
	kfsc.mutation.AddBeneficialOwnerIDs(ids...)
	return kfsc
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kfsc *KYBFormSubmissionCreate) AddBeneficialOwners(b ...*BeneficialOwner) *KYBFormSubmissionCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kfsc.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kfsc *KYBFormSubmissionCreate) SetUserID(id uuid.UUID) *KYBFormSubmissionCreate {
	kfsc.mutation.SetUserID(id)
	return kfsc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kfsc *KYBFormSubmissionCreate) SetNillableUserID(id *uuid.UUID) *KYBFormSubmissionCreate {
	if id != nil {
		kfsc = kfsc.SetUserID(*id)
	}
	return kfsc
}

// SetUser sets the "user" edge to the User entity.
func (kfsc *KYBFormSubmissionCreate) SetUser(u *User) *KYBFormSubmissionCreate {
	return kfsc.SetUserID(u.ID)
}

// Mutation returns the KYBFormSubmissionMutation object of the builder.
func (kfsc *KYBFormSubmissionCreate) Mutation() *KYBFormSubmissionMutation {
	return kfsc.mutation
}

// Save creates the KYBFormSubmission in the database.
func (kfsc *KYBFormSubmissionCreate) Save(ctx context.Context) (*KYBFormSubmission, error) {
	kfsc.defaults()
	return withHooks(ctx, kfsc.sqlSave, kfsc.mutation, kfsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kfsc *KYBFormSubmissionCreate) SaveX(ctx context.Context) *KYBFormSubmission {
	v, err := kfsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kfsc *KYBFormSubmissionCreate) Exec(ctx context.Context) error {
	_, err := kfsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kfsc *KYBFormSubmissionCreate) ExecX(ctx context.Context) {
	if err := kfsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kfsc *KYBFormSubmissionCreate) defaults() {
	if _, ok := kfsc.mutation.CreatedAt(); !ok {
		v := kybformsubmission.DefaultCreatedAt()
		kfsc.mutation.SetCreatedAt(v)
	}
	if _, ok := kfsc.mutation.UpdatedAt(); !ok {
		v := kybformsubmission.DefaultUpdatedAt()
		kfsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kfsc.mutation.ID(); !ok {
		v := kybformsubmission.DefaultID()
		kfsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kfsc *KYBFormSubmissionCreate) check() error {
	if _, ok := kfsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "KYBFormSubmission.created_at"`)}
	}
	if _, ok := kfsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "KYBFormSubmission.updated_at"`)}
	}
	if _, ok := kfsc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "KYBFormSubmission.email"`)}
	}
	if _, ok := kfsc.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`ent: missing required field "KYBFormSubmission.company_name"`)}
	}
	if _, ok := kfsc.mutation.RegisteredBusinessAddress(); !ok {
		return &ValidationError{Name: "registered_business_address", err: errors.New(`ent: missing required field "KYBFormSubmission.registered_business_address"`)}
	}
	if _, ok := kfsc.mutation.CertificateOfIncorporationURL(); !ok {
		return &ValidationError{Name: "certificate_of_incorporation_url", err: errors.New(`ent: missing required field "KYBFormSubmission.certificate_of_incorporation_url"`)}
	}
	if _, ok := kfsc.mutation.ArticlesOfIncorporationURL(); !ok {
		return &ValidationError{Name: "articles_of_incorporation_url", err: errors.New(`ent: missing required field "KYBFormSubmission.articles_of_incorporation_url"`)}
	}
	if _, ok := kfsc.mutation.ProofOfBusinessAddressURL(); !ok {
		return &ValidationError{Name: "proof_of_business_address_url", err: errors.New(`ent: missing required field "KYBFormSubmission.proof_of_business_address_url"`)}
	}
	if _, ok := kfsc.mutation.ProofOfResidentialAddressURL(); !ok {
		return &ValidationError{Name: "proof_of_residential_address_url", err: errors.New(`ent: missing required field "KYBFormSubmission.proof_of_residential_address_url"`)}
	}
	return nil
}

func (kfsc *KYBFormSubmissionCreate) sqlSave(ctx context.Context) (*KYBFormSubmission, error) {
	if err := kfsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kfsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kfsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	kfsc.mutation.id = &_node.ID
	kfsc.mutation.done = true
	return _node, nil
}

func (kfsc *KYBFormSubmissionCreate) createSpec() (*KYBFormSubmission, *sqlgraph.CreateSpec) {
	var (
		_node = &KYBFormSubmission{config: kfsc.config}
		_spec = sqlgraph.NewCreateSpec(kybformsubmission.Table, sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = kfsc.conflict
	if id, ok := kfsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := kfsc.mutation.CreatedAt(); ok {
		_spec.SetField(kybformsubmission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := kfsc.mutation.UpdatedAt(); ok {
		_spec.SetField(kybformsubmission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := kfsc.mutation.Email(); ok {
		_spec.SetField(kybformsubmission.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := kfsc.mutation.CompanyName(); ok {
		_spec.SetField(kybformsubmission.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := kfsc.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybformsubmission.FieldRegisteredBusinessAddress, field.TypeString, value)
		_node.RegisteredBusinessAddress = value
	}
	if value, ok := kfsc.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldCertificateOfIncorporationURL, field.TypeString, value)
		_node.CertificateOfIncorporationURL = value
	}
	if value, ok := kfsc.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldArticlesOfIncorporationURL, field.TypeString, value)
		_node.ArticlesOfIncorporationURL = value
	}
	if value, ok := kfsc.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybformsubmission.FieldBusinessLicenseURL, field.TypeString, value)
		_node.BusinessLicenseURL = &value
	}
	if value, ok := kfsc.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfBusinessAddressURL, field.TypeString, value)
		_node.ProofOfBusinessAddressURL = value
	}
	if value, ok := kfsc.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfResidentialAddressURL, field.TypeString, value)
		_node.ProofOfResidentialAddressURL = value
	}
	if value, ok := kfsc.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldAmlPolicyURL, field.TypeString, value)
		_node.AmlPolicyURL = &value
	}
	if value, ok := kfsc.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldKycPolicyURL, field.TypeString, value)
		_node.KycPolicyURL = &value
	}
	if nodes := kfsc.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kfsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kybformsubmission.UserTable,
			Columns: []string{kybformsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kyb_form_submission_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KYBFormSubmission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KYBFormSubmissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kfsc *KYBFormSubmissionCreate) OnConflict(opts ...sql.ConflictOption) *KYBFormSubmissionUpsertOne {
	kfsc.conflict = opts
	return &KYBFormSubmissionUpsertOne{
		create: kfsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kfsc *KYBFormSubmissionCreate) OnConflictColumns(columns ...string) *KYBFormSubmissionUpsertOne {
	kfsc.conflict = append(kfsc.conflict, sql.ConflictColumns(columns...))
	return &KYBFormSubmissionUpsertOne{
		create: kfsc,
	}
}

type (
	// KYBFormSubmissionUpsertOne is the builder for "upsert"-ing
	//  one KYBFormSubmission node.
	KYBFormSubmissionUpsertOne struct {
		create *KYBFormSubmissionCreate
	}

	// KYBFormSubmissionUpsert is the "OnConflict" setter.
	KYBFormSubmissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBFormSubmissionUpsert) SetUpdatedAt(v time.Time) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateUpdatedAt() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldUpdatedAt)
	return u
}

// SetEmail sets the "email" field.
func (u *KYBFormSubmissionUpsert) SetEmail(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateEmail() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldEmail)
	return u
}

// SetCompanyName sets the "company_name" field.
func (u *KYBFormSubmissionUpsert) SetCompanyName(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldCompanyName, v)
	return u
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateCompanyName() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldCompanyName)
	return u
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBFormSubmissionUpsert) SetRegisteredBusinessAddress(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldRegisteredBusinessAddress, v)
	return u
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateRegisteredBusinessAddress() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldRegisteredBusinessAddress)
	return u
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsert) SetCertificateOfIncorporationURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldCertificateOfIncorporationURL, v)
	return u
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateCertificateOfIncorporationURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldCertificateOfIncorporationURL)
	return u
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsert) SetArticlesOfIncorporationURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldArticlesOfIncorporationURL, v)
	return u
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateArticlesOfIncorporationURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldArticlesOfIncorporationURL)
	return u
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBFormSubmissionUpsert) SetBusinessLicenseURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldBusinessLicenseURL, v)
	return u
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateBusinessLicenseURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldBusinessLicenseURL)
	return u
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBFormSubmissionUpsert) ClearBusinessLicenseURL() *KYBFormSubmissionUpsert {
	u.SetNull(kybformsubmission.FieldBusinessLicenseURL)
	return u
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBFormSubmissionUpsert) SetProofOfBusinessAddressURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldProofOfBusinessAddressURL, v)
	return u
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateProofOfBusinessAddressURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldProofOfBusinessAddressURL)
	return u
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *KYBFormSubmissionUpsert) SetProofOfResidentialAddressURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldProofOfResidentialAddressURL, v)
	return u
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateProofOfResidentialAddressURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldProofOfResidentialAddressURL)
	return u
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsert) SetAmlPolicyURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldAmlPolicyURL, v)
	return u
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateAmlPolicyURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldAmlPolicyURL)
	return u
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsert) ClearAmlPolicyURL() *KYBFormSubmissionUpsert {
	u.SetNull(kybformsubmission.FieldAmlPolicyURL)
	return u
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsert) SetKycPolicyURL(v string) *KYBFormSubmissionUpsert {
	u.Set(kybformsubmission.FieldKycPolicyURL, v)
	return u
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsert) UpdateKycPolicyURL() *KYBFormSubmissionUpsert {
	u.SetExcluded(kybformsubmission.FieldKycPolicyURL)
	return u
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsert) ClearKycPolicyURL() *KYBFormSubmissionUpsert {
	u.SetNull(kybformsubmission.FieldKycPolicyURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kybformsubmission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KYBFormSubmissionUpsertOne) UpdateNewValues() *KYBFormSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kybformsubmission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(kybformsubmission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KYBFormSubmissionUpsertOne) Ignore() *KYBFormSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KYBFormSubmissionUpsertOne) DoNothing() *KYBFormSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KYBFormSubmissionCreate.OnConflict
// documentation for more info.
func (u *KYBFormSubmissionUpsertOne) Update(set func(*KYBFormSubmissionUpsert)) *KYBFormSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KYBFormSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBFormSubmissionUpsertOne) SetUpdatedAt(v time.Time) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateUpdatedAt() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *KYBFormSubmissionUpsertOne) SetEmail(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateEmail() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateEmail()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *KYBFormSubmissionUpsertOne) SetCompanyName(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateCompanyName() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateCompanyName()
	})
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBFormSubmissionUpsertOne) SetRegisteredBusinessAddress(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetRegisteredBusinessAddress(v)
	})
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateRegisteredBusinessAddress() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateRegisteredBusinessAddress()
	})
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsertOne) SetCertificateOfIncorporationURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetCertificateOfIncorporationURL(v)
	})
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateCertificateOfIncorporationURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateCertificateOfIncorporationURL()
	})
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsertOne) SetArticlesOfIncorporationURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetArticlesOfIncorporationURL(v)
	})
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateArticlesOfIncorporationURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateArticlesOfIncorporationURL()
	})
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBFormSubmissionUpsertOne) SetBusinessLicenseURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetBusinessLicenseURL(v)
	})
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateBusinessLicenseURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateBusinessLicenseURL()
	})
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBFormSubmissionUpsertOne) ClearBusinessLicenseURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearBusinessLicenseURL()
	})
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBFormSubmissionUpsertOne) SetProofOfBusinessAddressURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetProofOfBusinessAddressURL(v)
	})
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateProofOfBusinessAddressURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateProofOfBusinessAddressURL()
	})
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *KYBFormSubmissionUpsertOne) SetProofOfResidentialAddressURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetProofOfResidentialAddressURL(v)
	})
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateProofOfResidentialAddressURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateProofOfResidentialAddressURL()
	})
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsertOne) SetAmlPolicyURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetAmlPolicyURL(v)
	})
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateAmlPolicyURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateAmlPolicyURL()
	})
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsertOne) ClearAmlPolicyURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearAmlPolicyURL()
	})
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsertOne) SetKycPolicyURL(v string) *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetKycPolicyURL(v)
	})
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertOne) UpdateKycPolicyURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateKycPolicyURL()
	})
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsertOne) ClearKycPolicyURL() *KYBFormSubmissionUpsertOne {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearKycPolicyURL()
	})
}

// Exec executes the query.
func (u *KYBFormSubmissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KYBFormSubmissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KYBFormSubmissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KYBFormSubmissionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KYBFormSubmissionUpsertOne.ID is not supported by MySQL driver. Use KYBFormSubmissionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KYBFormSubmissionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KYBFormSubmissionCreateBulk is the builder for creating many KYBFormSubmission entities in bulk.
type KYBFormSubmissionCreateBulk struct {
	config
	err      error
	builders []*KYBFormSubmissionCreate
	conflict []sql.ConflictOption
}

// Save creates the KYBFormSubmission entities in the database.
func (kfscb *KYBFormSubmissionCreateBulk) Save(ctx context.Context) ([]*KYBFormSubmission, error) {
	if kfscb.err != nil {
		return nil, kfscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kfscb.builders))
	nodes := make([]*KYBFormSubmission, len(kfscb.builders))
	mutators := make([]Mutator, len(kfscb.builders))
	for i := range kfscb.builders {
		func(i int, root context.Context) {
			builder := kfscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KYBFormSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kfscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kfscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kfscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kfscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kfscb *KYBFormSubmissionCreateBulk) SaveX(ctx context.Context) []*KYBFormSubmission {
	v, err := kfscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kfscb *KYBFormSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := kfscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kfscb *KYBFormSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := kfscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KYBFormSubmission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KYBFormSubmissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kfscb *KYBFormSubmissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *KYBFormSubmissionUpsertBulk {
	kfscb.conflict = opts
	return &KYBFormSubmissionUpsertBulk{
		create: kfscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kfscb *KYBFormSubmissionCreateBulk) OnConflictColumns(columns ...string) *KYBFormSubmissionUpsertBulk {
	kfscb.conflict = append(kfscb.conflict, sql.ConflictColumns(columns...))
	return &KYBFormSubmissionUpsertBulk{
		create: kfscb,
	}
}

// KYBFormSubmissionUpsertBulk is the builder for "upsert"-ing
// a bulk of KYBFormSubmission nodes.
type KYBFormSubmissionUpsertBulk struct {
	create *KYBFormSubmissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kybformsubmission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KYBFormSubmissionUpsertBulk) UpdateNewValues() *KYBFormSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kybformsubmission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(kybformsubmission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KYBFormSubmission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KYBFormSubmissionUpsertBulk) Ignore() *KYBFormSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KYBFormSubmissionUpsertBulk) DoNothing() *KYBFormSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KYBFormSubmissionCreateBulk.OnConflict
// documentation for more info.
func (u *KYBFormSubmissionUpsertBulk) Update(set func(*KYBFormSubmissionUpsert)) *KYBFormSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KYBFormSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KYBFormSubmissionUpsertBulk) SetUpdatedAt(v time.Time) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateUpdatedAt() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *KYBFormSubmissionUpsertBulk) SetEmail(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateEmail() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateEmail()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *KYBFormSubmissionUpsertBulk) SetCompanyName(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateCompanyName() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateCompanyName()
	})
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (u *KYBFormSubmissionUpsertBulk) SetRegisteredBusinessAddress(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetRegisteredBusinessAddress(v)
	})
}

// UpdateRegisteredBusinessAddress sets the "registered_business_address" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateRegisteredBusinessAddress() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateRegisteredBusinessAddress()
	})
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetCertificateOfIncorporationURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetCertificateOfIncorporationURL(v)
	})
}

// UpdateCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateCertificateOfIncorporationURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateCertificateOfIncorporationURL()
	})
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetArticlesOfIncorporationURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetArticlesOfIncorporationURL(v)
	})
}

// UpdateArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateArticlesOfIncorporationURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateArticlesOfIncorporationURL()
	})
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetBusinessLicenseURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetBusinessLicenseURL(v)
	})
}

// UpdateBusinessLicenseURL sets the "business_license_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateBusinessLicenseURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateBusinessLicenseURL()
	})
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (u *KYBFormSubmissionUpsertBulk) ClearBusinessLicenseURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearBusinessLicenseURL()
	})
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetProofOfBusinessAddressURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetProofOfBusinessAddressURL(v)
	})
}

// UpdateProofOfBusinessAddressURL sets the "proof_of_business_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateProofOfBusinessAddressURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateProofOfBusinessAddressURL()
	})
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetProofOfResidentialAddressURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetProofOfResidentialAddressURL(v)
	})
}

// UpdateProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateProofOfResidentialAddressURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateProofOfResidentialAddressURL()
	})
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetAmlPolicyURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetAmlPolicyURL(v)
	})
}

// UpdateAmlPolicyURL sets the "aml_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateAmlPolicyURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateAmlPolicyURL()
	})
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (u *KYBFormSubmissionUpsertBulk) ClearAmlPolicyURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearAmlPolicyURL()
	})
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsertBulk) SetKycPolicyURL(v string) *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.SetKycPolicyURL(v)
	})
}

// UpdateKycPolicyURL sets the "kyc_policy_url" field to the value that was provided on create.
func (u *KYBFormSubmissionUpsertBulk) UpdateKycPolicyURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.UpdateKycPolicyURL()
	})
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (u *KYBFormSubmissionUpsertBulk) ClearKycPolicyURL() *KYBFormSubmissionUpsertBulk {
	return u.Update(func(s *KYBFormSubmissionUpsert) {
		s.ClearKycPolicyURL()
	})
}

// Exec executes the query.
func (u *KYBFormSubmissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KYBFormSubmissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KYBFormSubmissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KYBFormSubmissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
