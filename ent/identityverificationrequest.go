// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
)

// IdentityVerificationRequest is the model entity for the IdentityVerificationRequest schema.
type IdentityVerificationRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WalletAddress holds the value of the "wallet_address" field.
	WalletAddress string `json:"wallet_address,omitempty"`
	// WalletSignature holds the value of the "wallet_signature" field.
	WalletSignature string `json:"wallet_signature,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform identityverificationrequest.Platform `json:"platform,omitempty"`
	// PlatformRef holds the value of the "platform_ref" field.
	PlatformRef string `json:"platform_ref,omitempty"`
	// VerificationURL holds the value of the "verification_url" field.
	VerificationURL string `json:"verification_url,omitempty"`
	// Status holds the value of the "status" field.
	Status identityverificationrequest.Status `json:"status,omitempty"`
	// FeeReclaimed holds the value of the "fee_reclaimed" field.
	FeeReclaimed bool `json:"fee_reclaimed,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LastURLCreatedAt holds the value of the "last_url_created_at" field.
	LastURLCreatedAt time.Time `json:"last_url_created_at,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentityVerificationRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identityverificationrequest.FieldFeeReclaimed:
			values[i] = new(sql.NullBool)
		case identityverificationrequest.FieldWalletAddress, identityverificationrequest.FieldWalletSignature, identityverificationrequest.FieldPlatform, identityverificationrequest.FieldPlatformRef, identityverificationrequest.FieldVerificationURL, identityverificationrequest.FieldStatus:
			values[i] = new(sql.NullString)
		case identityverificationrequest.FieldUpdatedAt, identityverificationrequest.FieldLastURLCreatedAt:
			values[i] = new(sql.NullTime)
		case identityverificationrequest.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentityVerificationRequest fields.
func (ivr *IdentityVerificationRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identityverificationrequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ivr.ID = *value
			}
		case identityverificationrequest.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				ivr.WalletAddress = value.String
			}
		case identityverificationrequest.FieldWalletSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_signature", values[i])
			} else if value.Valid {
				ivr.WalletSignature = value.String
			}
		case identityverificationrequest.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ivr.Platform = identityverificationrequest.Platform(value.String)
			}
		case identityverificationrequest.FieldPlatformRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_ref", values[i])
			} else if value.Valid {
				ivr.PlatformRef = value.String
			}
		case identityverificationrequest.FieldVerificationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verification_url", values[i])
			} else if value.Valid {
				ivr.VerificationURL = value.String
			}
		case identityverificationrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ivr.Status = identityverificationrequest.Status(value.String)
			}
		case identityverificationrequest.FieldFeeReclaimed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fee_reclaimed", values[i])
			} else if value.Valid {
				ivr.FeeReclaimed = value.Bool
			}
		case identityverificationrequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ivr.UpdatedAt = value.Time
			}
		case identityverificationrequest.FieldLastURLCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_url_created_at", values[i])
			} else if value.Valid {
				ivr.LastURLCreatedAt = value.Time
			}
		default:
			ivr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdentityVerificationRequest.
// This includes values selected through modifiers, order, etc.
func (ivr *IdentityVerificationRequest) Value(name string) (ent.Value, error) {
	return ivr.selectValues.Get(name)
}

// Update returns a builder for updating this IdentityVerificationRequest.
// Note that you need to call IdentityVerificationRequest.Unwrap() before calling this method if this IdentityVerificationRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ivr *IdentityVerificationRequest) Update() *IdentityVerificationRequestUpdateOne {
	return NewIdentityVerificationRequestClient(ivr.config).UpdateOne(ivr)
}

// Unwrap unwraps the IdentityVerificationRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ivr *IdentityVerificationRequest) Unwrap() *IdentityVerificationRequest {
	_tx, ok := ivr.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdentityVerificationRequest is not a transactional entity")
	}
	ivr.config.driver = _tx.drv
	return ivr
}

// String implements the fmt.Stringer.
func (ivr *IdentityVerificationRequest) String() string {
	var builder strings.Builder
	builder.WriteString("IdentityVerificationRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ivr.ID))
	builder.WriteString("wallet_address=")
	builder.WriteString(ivr.WalletAddress)
	builder.WriteString(", ")
	builder.WriteString("wallet_signature=")
	builder.WriteString(ivr.WalletSignature)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", ivr.Platform))
	builder.WriteString(", ")
	builder.WriteString("platform_ref=")
	builder.WriteString(ivr.PlatformRef)
	builder.WriteString(", ")
	builder.WriteString("verification_url=")
	builder.WriteString(ivr.VerificationURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ivr.Status))
	builder.WriteString(", ")
	builder.WriteString("fee_reclaimed=")
	builder.WriteString(fmt.Sprintf("%v", ivr.FeeReclaimed))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ivr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_url_created_at=")
	builder.WriteString(ivr.LastURLCreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdentityVerificationRequests is a parsable slice of IdentityVerificationRequest.
type IdentityVerificationRequests []*IdentityVerificationRequest
