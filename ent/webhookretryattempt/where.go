// Code generated by ent, DO NOT EDIT.

package webhookretryattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// AttemptNumber applies equality check predicate on the "attempt_number" field. It's identical to AttemptNumberEQ.
func AttemptNumber(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldAttemptNumber, v))
}

// NextRetryTime applies equality check predicate on the "next_retry_time" field. It's identical to NextRetryTimeEQ.
func NextRetryTime(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldNextRetryTime, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldSignature, v))
}

// WebhookURL applies equality check predicate on the "webhook_url" field. It's identical to WebhookURLEQ.
func WebhookURL(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldWebhookURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldUpdatedAt, v))
}

// AttemptNumberEQ applies the EQ predicate on the "attempt_number" field.
func AttemptNumberEQ(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldAttemptNumber, v))
}

// AttemptNumberNEQ applies the NEQ predicate on the "attempt_number" field.
func AttemptNumberNEQ(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldAttemptNumber, v))
}

// AttemptNumberIn applies the In predicate on the "attempt_number" field.
func AttemptNumberIn(vs ...int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldAttemptNumber, vs...))
}

// AttemptNumberNotIn applies the NotIn predicate on the "attempt_number" field.
func AttemptNumberNotIn(vs ...int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldAttemptNumber, vs...))
}

// AttemptNumberGT applies the GT predicate on the "attempt_number" field.
func AttemptNumberGT(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldAttemptNumber, v))
}

// AttemptNumberGTE applies the GTE predicate on the "attempt_number" field.
func AttemptNumberGTE(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldAttemptNumber, v))
}

// AttemptNumberLT applies the LT predicate on the "attempt_number" field.
func AttemptNumberLT(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldAttemptNumber, v))
}

// AttemptNumberLTE applies the LTE predicate on the "attempt_number" field.
func AttemptNumberLTE(v int) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldAttemptNumber, v))
}

// NextRetryTimeEQ applies the EQ predicate on the "next_retry_time" field.
func NextRetryTimeEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldNextRetryTime, v))
}

// NextRetryTimeNEQ applies the NEQ predicate on the "next_retry_time" field.
func NextRetryTimeNEQ(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldNextRetryTime, v))
}

// NextRetryTimeIn applies the In predicate on the "next_retry_time" field.
func NextRetryTimeIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldNextRetryTime, vs...))
}

// NextRetryTimeNotIn applies the NotIn predicate on the "next_retry_time" field.
func NextRetryTimeNotIn(vs ...time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldNextRetryTime, vs...))
}

// NextRetryTimeGT applies the GT predicate on the "next_retry_time" field.
func NextRetryTimeGT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldNextRetryTime, v))
}

// NextRetryTimeGTE applies the GTE predicate on the "next_retry_time" field.
func NextRetryTimeGTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldNextRetryTime, v))
}

// NextRetryTimeLT applies the LT predicate on the "next_retry_time" field.
func NextRetryTimeLT(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldNextRetryTime, v))
}

// NextRetryTimeLTE applies the LTE predicate on the "next_retry_time" field.
func NextRetryTimeLTE(v time.Time) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldNextRetryTime, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "signature" field.
func SignatureContains(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "signature" field.
func SignatureHasPrefix(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "signature" field.
func SignatureHasSuffix(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureIsNil applies the IsNil predicate on the "signature" field.
func SignatureIsNil() predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIsNull(FieldSignature))
}

// SignatureNotNil applies the NotNil predicate on the "signature" field.
func SignatureNotNil() predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotNull(FieldSignature))
}

// SignatureEqualFold applies the EqualFold predicate on the "signature" field.
func SignatureEqualFold(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "signature" field.
func SignatureContainsFold(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldContainsFold(FieldSignature, v))
}

// WebhookURLEQ applies the EQ predicate on the "webhook_url" field.
func WebhookURLEQ(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldWebhookURL, v))
}

// WebhookURLNEQ applies the NEQ predicate on the "webhook_url" field.
func WebhookURLNEQ(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldWebhookURL, v))
}

// WebhookURLIn applies the In predicate on the "webhook_url" field.
func WebhookURLIn(vs ...string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldWebhookURL, vs...))
}

// WebhookURLNotIn applies the NotIn predicate on the "webhook_url" field.
func WebhookURLNotIn(vs ...string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldWebhookURL, vs...))
}

// WebhookURLGT applies the GT predicate on the "webhook_url" field.
func WebhookURLGT(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGT(FieldWebhookURL, v))
}

// WebhookURLGTE applies the GTE predicate on the "webhook_url" field.
func WebhookURLGTE(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldGTE(FieldWebhookURL, v))
}

// WebhookURLLT applies the LT predicate on the "webhook_url" field.
func WebhookURLLT(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLT(FieldWebhookURL, v))
}

// WebhookURLLTE applies the LTE predicate on the "webhook_url" field.
func WebhookURLLTE(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldLTE(FieldWebhookURL, v))
}

// WebhookURLContains applies the Contains predicate on the "webhook_url" field.
func WebhookURLContains(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldContains(FieldWebhookURL, v))
}

// WebhookURLHasPrefix applies the HasPrefix predicate on the "webhook_url" field.
func WebhookURLHasPrefix(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldHasPrefix(FieldWebhookURL, v))
}

// WebhookURLHasSuffix applies the HasSuffix predicate on the "webhook_url" field.
func WebhookURLHasSuffix(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldHasSuffix(FieldWebhookURL, v))
}

// WebhookURLEqualFold applies the EqualFold predicate on the "webhook_url" field.
func WebhookURLEqualFold(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEqualFold(FieldWebhookURL, v))
}

// WebhookURLContainsFold applies the ContainsFold predicate on the "webhook_url" field.
func WebhookURLContainsFold(v string) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldContainsFold(FieldWebhookURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebhookRetryAttempt) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebhookRetryAttempt) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebhookRetryAttempt) predicate.WebhookRetryAttempt {
	return predicate.WebhookRetryAttempt(sql.NotPredicates(p))
}
