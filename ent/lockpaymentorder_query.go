// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/paycrest/aggregator/ent/transactionlog"
)

// LockPaymentOrderQuery is the builder for querying LockPaymentOrder entities.
type LockPaymentOrderQuery struct {
	config
	ctx                 *QueryContext
	order               []lockpaymentorder.OrderOption
	inters              []Interceptor
	predicates          []predicate.LockPaymentOrder
	withToken           *TokenQuery
	withProvisionBucket *ProvisionBucketQuery
	withProvider        *ProviderProfileQuery
	withFulfillments    *LockOrderFulfillmentQuery
	withTransactions    *TransactionLogQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LockPaymentOrderQuery builder.
func (lpoq *LockPaymentOrderQuery) Where(ps ...predicate.LockPaymentOrder) *LockPaymentOrderQuery {
	lpoq.predicates = append(lpoq.predicates, ps...)
	return lpoq
}

// Limit the number of records to be returned by this query.
func (lpoq *LockPaymentOrderQuery) Limit(limit int) *LockPaymentOrderQuery {
	lpoq.ctx.Limit = &limit
	return lpoq
}

// Offset to start from.
func (lpoq *LockPaymentOrderQuery) Offset(offset int) *LockPaymentOrderQuery {
	lpoq.ctx.Offset = &offset
	return lpoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpoq *LockPaymentOrderQuery) Unique(unique bool) *LockPaymentOrderQuery {
	lpoq.ctx.Unique = &unique
	return lpoq
}

// Order specifies how the records should be ordered.
func (lpoq *LockPaymentOrderQuery) Order(o ...lockpaymentorder.OrderOption) *LockPaymentOrderQuery {
	lpoq.order = append(lpoq.order, o...)
	return lpoq
}

// QueryToken chains the current query on the "token" edge.
func (lpoq *LockPaymentOrderQuery) QueryToken() *TokenQuery {
	query := (&TokenClient{config: lpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, selector),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.TokenTable, lockpaymentorder.TokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionBucket chains the current query on the "provision_bucket" edge.
func (lpoq *LockPaymentOrderQuery) QueryProvisionBucket() *ProvisionBucketQuery {
	query := (&ProvisionBucketClient{config: lpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, selector),
			sqlgraph.To(provisionbucket.Table, provisionbucket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.ProvisionBucketTable, lockpaymentorder.ProvisionBucketColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (lpoq *LockPaymentOrderQuery) QueryProvider() *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: lpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, selector),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockpaymentorder.ProviderTable, lockpaymentorder.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFulfillments chains the current query on the "fulfillments" edge.
func (lpoq *LockPaymentOrderQuery) QueryFulfillments() *LockOrderFulfillmentQuery {
	query := (&LockOrderFulfillmentClient{config: lpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, selector),
			sqlgraph.To(lockorderfulfillment.Table, lockorderfulfillment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lockpaymentorder.FulfillmentsTable, lockpaymentorder.FulfillmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactions chains the current query on the "transactions" edge.
func (lpoq *LockPaymentOrderQuery) QueryTransactions() *TransactionLogQuery {
	query := (&TransactionLogClient{config: lpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockpaymentorder.Table, lockpaymentorder.FieldID, selector),
			sqlgraph.To(transactionlog.Table, transactionlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lockpaymentorder.TransactionsTable, lockpaymentorder.TransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LockPaymentOrder entity from the query.
// Returns a *NotFoundError when no LockPaymentOrder was found.
func (lpoq *LockPaymentOrderQuery) First(ctx context.Context) (*LockPaymentOrder, error) {
	nodes, err := lpoq.Limit(1).All(setContextOp(ctx, lpoq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lockpaymentorder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) FirstX(ctx context.Context) *LockPaymentOrder {
	node, err := lpoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LockPaymentOrder ID from the query.
// Returns a *NotFoundError when no LockPaymentOrder ID was found.
func (lpoq *LockPaymentOrderQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lpoq.Limit(1).IDs(setContextOp(ctx, lpoq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lockpaymentorder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := lpoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LockPaymentOrder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LockPaymentOrder entity is found.
// Returns a *NotFoundError when no LockPaymentOrder entities are found.
func (lpoq *LockPaymentOrderQuery) Only(ctx context.Context) (*LockPaymentOrder, error) {
	nodes, err := lpoq.Limit(2).All(setContextOp(ctx, lpoq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lockpaymentorder.Label}
	default:
		return nil, &NotSingularError{lockpaymentorder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) OnlyX(ctx context.Context) *LockPaymentOrder {
	node, err := lpoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LockPaymentOrder ID in the query.
// Returns a *NotSingularError when more than one LockPaymentOrder ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpoq *LockPaymentOrderQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lpoq.Limit(2).IDs(setContextOp(ctx, lpoq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lockpaymentorder.Label}
	default:
		err = &NotSingularError{lockpaymentorder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := lpoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LockPaymentOrders.
func (lpoq *LockPaymentOrderQuery) All(ctx context.Context) ([]*LockPaymentOrder, error) {
	ctx = setContextOp(ctx, lpoq.ctx, ent.OpQueryAll)
	if err := lpoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LockPaymentOrder, *LockPaymentOrderQuery]()
	return withInterceptors[[]*LockPaymentOrder](ctx, lpoq, qr, lpoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) AllX(ctx context.Context) []*LockPaymentOrder {
	nodes, err := lpoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LockPaymentOrder IDs.
func (lpoq *LockPaymentOrderQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if lpoq.ctx.Unique == nil && lpoq.path != nil {
		lpoq.Unique(true)
	}
	ctx = setContextOp(ctx, lpoq.ctx, ent.OpQueryIDs)
	if err = lpoq.Select(lockpaymentorder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := lpoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpoq *LockPaymentOrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpoq.ctx, ent.OpQueryCount)
	if err := lpoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpoq, querierCount[*LockPaymentOrderQuery](), lpoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) CountX(ctx context.Context) int {
	count, err := lpoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpoq *LockPaymentOrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpoq.ctx, ent.OpQueryExist)
	switch _, err := lpoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpoq *LockPaymentOrderQuery) ExistX(ctx context.Context) bool {
	exist, err := lpoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LockPaymentOrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpoq *LockPaymentOrderQuery) Clone() *LockPaymentOrderQuery {
	if lpoq == nil {
		return nil
	}
	return &LockPaymentOrderQuery{
		config:              lpoq.config,
		ctx:                 lpoq.ctx.Clone(),
		order:               append([]lockpaymentorder.OrderOption{}, lpoq.order...),
		inters:              append([]Interceptor{}, lpoq.inters...),
		predicates:          append([]predicate.LockPaymentOrder{}, lpoq.predicates...),
		withToken:           lpoq.withToken.Clone(),
		withProvisionBucket: lpoq.withProvisionBucket.Clone(),
		withProvider:        lpoq.withProvider.Clone(),
		withFulfillments:    lpoq.withFulfillments.Clone(),
		withTransactions:    lpoq.withTransactions.Clone(),
		// clone intermediate query.
		sql:  lpoq.sql.Clone(),
		path: lpoq.path,
	}
}

// WithToken tells the query-builder to eager-load the nodes that are connected to
// the "token" edge. The optional arguments are used to configure the query builder of the edge.
func (lpoq *LockPaymentOrderQuery) WithToken(opts ...func(*TokenQuery)) *LockPaymentOrderQuery {
	query := (&TokenClient{config: lpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpoq.withToken = query
	return lpoq
}

// WithProvisionBucket tells the query-builder to eager-load the nodes that are connected to
// the "provision_bucket" edge. The optional arguments are used to configure the query builder of the edge.
func (lpoq *LockPaymentOrderQuery) WithProvisionBucket(opts ...func(*ProvisionBucketQuery)) *LockPaymentOrderQuery {
	query := (&ProvisionBucketClient{config: lpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpoq.withProvisionBucket = query
	return lpoq
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (lpoq *LockPaymentOrderQuery) WithProvider(opts ...func(*ProviderProfileQuery)) *LockPaymentOrderQuery {
	query := (&ProviderProfileClient{config: lpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpoq.withProvider = query
	return lpoq
}

// WithFulfillments tells the query-builder to eager-load the nodes that are connected to
// the "fulfillments" edge. The optional arguments are used to configure the query builder of the edge.
func (lpoq *LockPaymentOrderQuery) WithFulfillments(opts ...func(*LockOrderFulfillmentQuery)) *LockPaymentOrderQuery {
	query := (&LockOrderFulfillmentClient{config: lpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpoq.withFulfillments = query
	return lpoq
}

// WithTransactions tells the query-builder to eager-load the nodes that are connected to
// the "transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (lpoq *LockPaymentOrderQuery) WithTransactions(opts ...func(*TransactionLogQuery)) *LockPaymentOrderQuery {
	query := (&TransactionLogClient{config: lpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpoq.withTransactions = query
	return lpoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LockPaymentOrder.Query().
//		GroupBy(lockpaymentorder.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpoq *LockPaymentOrderQuery) GroupBy(field string, fields ...string) *LockPaymentOrderGroupBy {
	lpoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LockPaymentOrderGroupBy{build: lpoq}
	grbuild.flds = &lpoq.ctx.Fields
	grbuild.label = lockpaymentorder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LockPaymentOrder.Query().
//		Select(lockpaymentorder.FieldCreatedAt).
//		Scan(ctx, &v)
func (lpoq *LockPaymentOrderQuery) Select(fields ...string) *LockPaymentOrderSelect {
	lpoq.ctx.Fields = append(lpoq.ctx.Fields, fields...)
	sbuild := &LockPaymentOrderSelect{LockPaymentOrderQuery: lpoq}
	sbuild.label = lockpaymentorder.Label
	sbuild.flds, sbuild.scan = &lpoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LockPaymentOrderSelect configured with the given aggregations.
func (lpoq *LockPaymentOrderQuery) Aggregate(fns ...AggregateFunc) *LockPaymentOrderSelect {
	return lpoq.Select().Aggregate(fns...)
}

func (lpoq *LockPaymentOrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpoq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpoq.ctx.Fields {
		if !lockpaymentorder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpoq.path != nil {
		prev, err := lpoq.path(ctx)
		if err != nil {
			return err
		}
		lpoq.sql = prev
	}
	return nil
}

func (lpoq *LockPaymentOrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LockPaymentOrder, error) {
	var (
		nodes       = []*LockPaymentOrder{}
		withFKs     = lpoq.withFKs
		_spec       = lpoq.querySpec()
		loadedTypes = [5]bool{
			lpoq.withToken != nil,
			lpoq.withProvisionBucket != nil,
			lpoq.withProvider != nil,
			lpoq.withFulfillments != nil,
			lpoq.withTransactions != nil,
		}
	)
	if lpoq.withToken != nil || lpoq.withProvisionBucket != nil || lpoq.withProvider != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, lockpaymentorder.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LockPaymentOrder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LockPaymentOrder{config: lpoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpoq.withToken; query != nil {
		if err := lpoq.loadToken(ctx, query, nodes, nil,
			func(n *LockPaymentOrder, e *Token) { n.Edges.Token = e }); err != nil {
			return nil, err
		}
	}
	if query := lpoq.withProvisionBucket; query != nil {
		if err := lpoq.loadProvisionBucket(ctx, query, nodes, nil,
			func(n *LockPaymentOrder, e *ProvisionBucket) { n.Edges.ProvisionBucket = e }); err != nil {
			return nil, err
		}
	}
	if query := lpoq.withProvider; query != nil {
		if err := lpoq.loadProvider(ctx, query, nodes, nil,
			func(n *LockPaymentOrder, e *ProviderProfile) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	if query := lpoq.withFulfillments; query != nil {
		if err := lpoq.loadFulfillments(ctx, query, nodes,
			func(n *LockPaymentOrder) { n.Edges.Fulfillments = []*LockOrderFulfillment{} },
			func(n *LockPaymentOrder, e *LockOrderFulfillment) {
				n.Edges.Fulfillments = append(n.Edges.Fulfillments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lpoq.withTransactions; query != nil {
		if err := lpoq.loadTransactions(ctx, query, nodes,
			func(n *LockPaymentOrder) { n.Edges.Transactions = []*TransactionLog{} },
			func(n *LockPaymentOrder, e *TransactionLog) { n.Edges.Transactions = append(n.Edges.Transactions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpoq *LockPaymentOrderQuery) loadToken(ctx context.Context, query *TokenQuery, nodes []*LockPaymentOrder, init func(*LockPaymentOrder), assign func(*LockPaymentOrder, *Token)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LockPaymentOrder)
	for i := range nodes {
		if nodes[i].token_lock_payment_orders == nil {
			continue
		}
		fk := *nodes[i].token_lock_payment_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(token.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "token_lock_payment_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpoq *LockPaymentOrderQuery) loadProvisionBucket(ctx context.Context, query *ProvisionBucketQuery, nodes []*LockPaymentOrder, init func(*LockPaymentOrder), assign func(*LockPaymentOrder, *ProvisionBucket)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LockPaymentOrder)
	for i := range nodes {
		if nodes[i].provision_bucket_lock_payment_orders == nil {
			continue
		}
		fk := *nodes[i].provision_bucket_lock_payment_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provisionbucket.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provision_bucket_lock_payment_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpoq *LockPaymentOrderQuery) loadProvider(ctx context.Context, query *ProviderProfileQuery, nodes []*LockPaymentOrder, init func(*LockPaymentOrder), assign func(*LockPaymentOrder, *ProviderProfile)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*LockPaymentOrder)
	for i := range nodes {
		if nodes[i].provider_profile_assigned_orders == nil {
			continue
		}
		fk := *nodes[i].provider_profile_assigned_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(providerprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_profile_assigned_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpoq *LockPaymentOrderQuery) loadFulfillments(ctx context.Context, query *LockOrderFulfillmentQuery, nodes []*LockPaymentOrder, init func(*LockPaymentOrder), assign func(*LockPaymentOrder, *LockOrderFulfillment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*LockPaymentOrder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.LockOrderFulfillment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lockpaymentorder.FulfillmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.lock_payment_order_fulfillments
		if fk == nil {
			return fmt.Errorf(`foreign-key "lock_payment_order_fulfillments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lock_payment_order_fulfillments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lpoq *LockPaymentOrderQuery) loadTransactions(ctx context.Context, query *TransactionLogQuery, nodes []*LockPaymentOrder, init func(*LockPaymentOrder), assign func(*LockPaymentOrder, *TransactionLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*LockPaymentOrder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TransactionLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lockpaymentorder.TransactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.lock_payment_order_transactions
		if fk == nil {
			return fmt.Errorf(`foreign-key "lock_payment_order_transactions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lock_payment_order_transactions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lpoq *LockPaymentOrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpoq.querySpec()
	_spec.Node.Columns = lpoq.ctx.Fields
	if len(lpoq.ctx.Fields) > 0 {
		_spec.Unique = lpoq.ctx.Unique != nil && *lpoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpoq.driver, _spec)
}

func (lpoq *LockPaymentOrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lockpaymentorder.Table, lockpaymentorder.Columns, sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID))
	_spec.From = lpoq.sql
	if unique := lpoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpoq.path != nil {
		_spec.Unique = true
	}
	if fields := lpoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lockpaymentorder.FieldID)
		for i := range fields {
			if fields[i] != lockpaymentorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lpoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpoq *LockPaymentOrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpoq.driver.Dialect())
	t1 := builder.Table(lockpaymentorder.Table)
	columns := lpoq.ctx.Fields
	if len(columns) == 0 {
		columns = lockpaymentorder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpoq.sql != nil {
		selector = lpoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpoq.ctx.Unique != nil && *lpoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lpoq.predicates {
		p(selector)
	}
	for _, p := range lpoq.order {
		p(selector)
	}
	if offset := lpoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LockPaymentOrderGroupBy is the group-by builder for LockPaymentOrder entities.
type LockPaymentOrderGroupBy struct {
	selector
	build *LockPaymentOrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpogb *LockPaymentOrderGroupBy) Aggregate(fns ...AggregateFunc) *LockPaymentOrderGroupBy {
	lpogb.fns = append(lpogb.fns, fns...)
	return lpogb
}

// Scan applies the selector query and scans the result into the given value.
func (lpogb *LockPaymentOrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpogb.build.ctx, ent.OpQueryGroupBy)
	if err := lpogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LockPaymentOrderQuery, *LockPaymentOrderGroupBy](ctx, lpogb.build, lpogb, lpogb.build.inters, v)
}

func (lpogb *LockPaymentOrderGroupBy) sqlScan(ctx context.Context, root *LockPaymentOrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpogb.fns))
	for _, fn := range lpogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpogb.flds)+len(lpogb.fns))
		for _, f := range *lpogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LockPaymentOrderSelect is the builder for selecting fields of LockPaymentOrder entities.
type LockPaymentOrderSelect struct {
	*LockPaymentOrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lpos *LockPaymentOrderSelect) Aggregate(fns ...AggregateFunc) *LockPaymentOrderSelect {
	lpos.fns = append(lpos.fns, fns...)
	return lpos
}

// Scan applies the selector query and scans the result into the given value.
func (lpos *LockPaymentOrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpos.ctx, ent.OpQuerySelect)
	if err := lpos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LockPaymentOrderQuery, *LockPaymentOrderSelect](ctx, lpos.LockPaymentOrderQuery, lpos, lpos.inters, v)
}

func (lpos *LockPaymentOrderSelect) sqlScan(ctx context.Context, root *LockPaymentOrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lpos.fns))
	for _, fn := range lpos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lpos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
