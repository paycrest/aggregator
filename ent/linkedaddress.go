// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/linkedaddress"
)

// LinkedAddress is the model entity for the LinkedAddress schema.
type LinkedAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// Institution holds the value of the "institution" field.
	Institution string `json:"institution,omitempty"`
	// AccountIdentifier holds the value of the "account_identifier" field.
	AccountIdentifier string `json:"account_identifier,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// OwnerAddress holds the value of the "owner_address" field.
	OwnerAddress string `json:"owner_address,omitempty"`
	// LastIndexedBlock holds the value of the "last_indexed_block" field.
	LastIndexedBlock int64 `json:"last_indexed_block,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinkedAddressQuery when eager-loading is set.
	Edges                         LinkedAddressEdges `json:"edges"`
	sender_profile_linked_address *uuid.UUID
	selectValues                  sql.SelectValues
}

// LinkedAddressEdges holds the relations/edges for other nodes in the graph.
type LinkedAddressEdges struct {
	// PaymentOrders holds the value of the payment_orders edge.
	PaymentOrders []*PaymentOrder `json:"payment_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentOrdersOrErr returns the PaymentOrders value or an error if the edge
// was not loaded in eager-loading.
func (e LinkedAddressEdges) PaymentOrdersOrErr() ([]*PaymentOrder, error) {
	if e.loadedTypes[0] {
		return e.PaymentOrders, nil
	}
	return nil, &NotLoadedError{edge: "payment_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinkedAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linkedaddress.FieldSalt:
			values[i] = new([]byte)
		case linkedaddress.FieldID, linkedaddress.FieldLastIndexedBlock:
			values[i] = new(sql.NullInt64)
		case linkedaddress.FieldAddress, linkedaddress.FieldInstitution, linkedaddress.FieldAccountIdentifier, linkedaddress.FieldAccountName, linkedaddress.FieldOwnerAddress, linkedaddress.FieldTxHash:
			values[i] = new(sql.NullString)
		case linkedaddress.FieldCreatedAt, linkedaddress.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case linkedaddress.ForeignKeys[0]: // sender_profile_linked_address
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinkedAddress fields.
func (la *LinkedAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linkedaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			la.ID = int(value.Int64)
		case linkedaddress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case linkedaddress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = value.Time
			}
		case linkedaddress.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				la.Address = value.String
			}
		case linkedaddress.FieldSalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value != nil {
				la.Salt = *value
			}
		case linkedaddress.FieldInstitution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution", values[i])
			} else if value.Valid {
				la.Institution = value.String
			}
		case linkedaddress.FieldAccountIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_identifier", values[i])
			} else if value.Valid {
				la.AccountIdentifier = value.String
			}
		case linkedaddress.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				la.AccountName = value.String
			}
		case linkedaddress.FieldOwnerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_address", values[i])
			} else if value.Valid {
				la.OwnerAddress = value.String
			}
		case linkedaddress.FieldLastIndexedBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_indexed_block", values[i])
			} else if value.Valid {
				la.LastIndexedBlock = value.Int64
			}
		case linkedaddress.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				la.TxHash = value.String
			}
		case linkedaddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sender_profile_linked_address", values[i])
			} else if value.Valid {
				la.sender_profile_linked_address = new(uuid.UUID)
				*la.sender_profile_linked_address = *value.S.(*uuid.UUID)
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LinkedAddress.
// This includes values selected through modifiers, order, etc.
func (la *LinkedAddress) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// QueryPaymentOrders queries the "payment_orders" edge of the LinkedAddress entity.
func (la *LinkedAddress) QueryPaymentOrders() *PaymentOrderQuery {
	return NewLinkedAddressClient(la.config).QueryPaymentOrders(la)
}

// Update returns a builder for updating this LinkedAddress.
// Note that you need to call LinkedAddress.Unwrap() before calling this method if this LinkedAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LinkedAddress) Update() *LinkedAddressUpdateOne {
	return NewLinkedAddressClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LinkedAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LinkedAddress) Unwrap() *LinkedAddress {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LinkedAddress is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LinkedAddress) String() string {
	var builder strings.Builder
	builder.WriteString("LinkedAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(la.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(la.Address)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(fmt.Sprintf("%v", la.Salt))
	builder.WriteString(", ")
	builder.WriteString("institution=")
	builder.WriteString(la.Institution)
	builder.WriteString(", ")
	builder.WriteString("account_identifier=")
	builder.WriteString(la.AccountIdentifier)
	builder.WriteString(", ")
	builder.WriteString("account_name=")
	builder.WriteString(la.AccountName)
	builder.WriteString(", ")
	builder.WriteString("owner_address=")
	builder.WriteString(la.OwnerAddress)
	builder.WriteString(", ")
	builder.WriteString("last_indexed_block=")
	builder.WriteString(fmt.Sprintf("%v", la.LastIndexedBlock))
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(la.TxHash)
	builder.WriteByte(')')
	return builder.String()
}

// LinkedAddresses is a parsable slice of LinkedAddress.
type LinkedAddresses []*LinkedAddress
