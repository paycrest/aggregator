// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
)

// LockPaymentOrderDelete is the builder for deleting a LockPaymentOrder entity.
type LockPaymentOrderDelete struct {
	config
	hooks    []Hook
	mutation *LockPaymentOrderMutation
}

// Where appends a list predicates to the LockPaymentOrderDelete builder.
func (lpod *LockPaymentOrderDelete) Where(ps ...predicate.LockPaymentOrder) *LockPaymentOrderDelete {
	lpod.mutation.Where(ps...)
	return lpod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpod *LockPaymentOrderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpod.sqlExec, lpod.mutation, lpod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpod *LockPaymentOrderDelete) ExecX(ctx context.Context) int {
	n, err := lpod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpod *LockPaymentOrderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lockpaymentorder.Table, sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID))
	if ps := lpod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpod.mutation.done = true
	return affected, err
}

// LockPaymentOrderDeleteOne is the builder for deleting a single LockPaymentOrder entity.
type LockPaymentOrderDeleteOne struct {
	lpod *LockPaymentOrderDelete
}

// Where appends a list predicates to the LockPaymentOrderDelete builder.
func (lpodo *LockPaymentOrderDeleteOne) Where(ps ...predicate.LockPaymentOrder) *LockPaymentOrderDeleteOne {
	lpodo.lpod.mutation.Where(ps...)
	return lpodo
}

// Exec executes the deletion query.
func (lpodo *LockPaymentOrderDeleteOne) Exec(ctx context.Context) error {
	n, err := lpodo.lpod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lockpaymentorder.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpodo *LockPaymentOrderDeleteOne) ExecX(ctx context.Context) {
	if err := lpodo.Exec(ctx); err != nil {
		panic(err)
	}
}
