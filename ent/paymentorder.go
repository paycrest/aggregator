// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/receiveaddress"
	"github.com/paycrest/aggregator/ent/senderprofile"
	"github.com/paycrest/aggregator/ent/token"
	"github.com/shopspring/decimal"
)

// PaymentOrder is the model entity for the PaymentOrder schema.
type PaymentOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// AmountPaid holds the value of the "amount_paid" field.
	AmountPaid decimal.Decimal `json:"amount_paid,omitempty"`
	// AmountReturned holds the value of the "amount_returned" field.
	AmountReturned decimal.Decimal `json:"amount_returned,omitempty"`
	// PercentSettled holds the value of the "percent_settled" field.
	PercentSettled decimal.Decimal `json:"percent_settled,omitempty"`
	// SenderFee holds the value of the "sender_fee" field.
	SenderFee decimal.Decimal `json:"sender_fee,omitempty"`
	// NetworkFee holds the value of the "network_fee" field.
	NetworkFee decimal.Decimal `json:"network_fee,omitempty"`
	// ProtocolFee holds the value of the "protocol_fee" field.
	ProtocolFee decimal.Decimal `json:"protocol_fee,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate decimal.Decimal `json:"rate,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber int64 `json:"block_number,omitempty"`
	// FromAddress holds the value of the "from_address" field.
	FromAddress string `json:"from_address,omitempty"`
	// ReturnAddress holds the value of the "return_address" field.
	ReturnAddress string `json:"return_address,omitempty"`
	// ReceiveAddressText holds the value of the "receive_address_text" field.
	ReceiveAddressText string `json:"receive_address_text,omitempty"`
	// FeePercent holds the value of the "fee_percent" field.
	FeePercent decimal.Decimal `json:"fee_percent,omitempty"`
	// FeeAddress holds the value of the "fee_address" field.
	FeeAddress string `json:"fee_address,omitempty"`
	// GatewayID holds the value of the "gateway_id" field.
	GatewayID string `json:"gateway_id,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// Status holds the value of the "status" field.
	Status paymentorder.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentOrderQuery when eager-loading is set.
	Edges                         PaymentOrderEdges `json:"edges"`
	api_key_payment_orders        *uuid.UUID
	linked_address_payment_orders *int
	sender_profile_payment_orders *uuid.UUID
	token_payment_orders          *int
	selectValues                  sql.SelectValues
}

// PaymentOrderEdges holds the relations/edges for other nodes in the graph.
type PaymentOrderEdges struct {
	// SenderProfile holds the value of the sender_profile edge.
	SenderProfile *SenderProfile `json:"sender_profile,omitempty"`
	// Token holds the value of the token edge.
	Token *Token `json:"token,omitempty"`
	// LinkedAddress holds the value of the linked_address edge.
	LinkedAddress *LinkedAddress `json:"linked_address,omitempty"`
	// ReceiveAddress holds the value of the receive_address edge.
	ReceiveAddress *ReceiveAddress `json:"receive_address,omitempty"`
	// Recipient holds the value of the recipient edge.
	Recipient *PaymentOrderRecipient `json:"recipient,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*TransactionLog `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SenderProfileOrErr returns the SenderProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderEdges) SenderProfileOrErr() (*SenderProfile, error) {
	if e.SenderProfile != nil {
		return e.SenderProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: senderprofile.Label}
	}
	return nil, &NotLoadedError{edge: "sender_profile"}
}

// TokenOrErr returns the Token value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderEdges) TokenOrErr() (*Token, error) {
	if e.Token != nil {
		return e.Token, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: token.Label}
	}
	return nil, &NotLoadedError{edge: "token"}
}

// LinkedAddressOrErr returns the LinkedAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderEdges) LinkedAddressOrErr() (*LinkedAddress, error) {
	if e.LinkedAddress != nil {
		return e.LinkedAddress, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: linkedaddress.Label}
	}
	return nil, &NotLoadedError{edge: "linked_address"}
}

// ReceiveAddressOrErr returns the ReceiveAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderEdges) ReceiveAddressOrErr() (*ReceiveAddress, error) {
	if e.ReceiveAddress != nil {
		return e.ReceiveAddress, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: receiveaddress.Label}
	}
	return nil, &NotLoadedError{edge: "receive_address"}
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentOrderEdges) RecipientOrErr() (*PaymentOrderRecipient, error) {
	if e.Recipient != nil {
		return e.Recipient, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: paymentorderrecipient.Label}
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentOrderEdges) TransactionsOrErr() ([]*TransactionLog, error) {
	if e.loadedTypes[5] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentorder.FieldAmount, paymentorder.FieldAmountPaid, paymentorder.FieldAmountReturned, paymentorder.FieldPercentSettled, paymentorder.FieldSenderFee, paymentorder.FieldNetworkFee, paymentorder.FieldProtocolFee, paymentorder.FieldRate, paymentorder.FieldFeePercent:
			values[i] = new(decimal.Decimal)
		case paymentorder.FieldBlockNumber:
			values[i] = new(sql.NullInt64)
		case paymentorder.FieldTxHash, paymentorder.FieldFromAddress, paymentorder.FieldReturnAddress, paymentorder.FieldReceiveAddressText, paymentorder.FieldFeeAddress, paymentorder.FieldGatewayID, paymentorder.FieldReference, paymentorder.FieldStatus:
			values[i] = new(sql.NullString)
		case paymentorder.FieldCreatedAt, paymentorder.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case paymentorder.FieldID:
			values[i] = new(uuid.UUID)
		case paymentorder.ForeignKeys[0]: // api_key_payment_orders
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case paymentorder.ForeignKeys[1]: // linked_address_payment_orders
			values[i] = new(sql.NullInt64)
		case paymentorder.ForeignKeys[2]: // sender_profile_payment_orders
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case paymentorder.ForeignKeys[3]: // token_payment_orders
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentOrder fields.
func (po *PaymentOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentorder.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case paymentorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case paymentorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case paymentorder.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				po.Amount = *value
			}
		case paymentorder.FieldAmountPaid:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_paid", values[i])
			} else if value != nil {
				po.AmountPaid = *value
			}
		case paymentorder.FieldAmountReturned:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_returned", values[i])
			} else if value != nil {
				po.AmountReturned = *value
			}
		case paymentorder.FieldPercentSettled:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field percent_settled", values[i])
			} else if value != nil {
				po.PercentSettled = *value
			}
		case paymentorder.FieldSenderFee:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field sender_fee", values[i])
			} else if value != nil {
				po.SenderFee = *value
			}
		case paymentorder.FieldNetworkFee:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field network_fee", values[i])
			} else if value != nil {
				po.NetworkFee = *value
			}
		case paymentorder.FieldProtocolFee:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field protocol_fee", values[i])
			} else if value != nil {
				po.ProtocolFee = *value
			}
		case paymentorder.FieldRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value != nil {
				po.Rate = *value
			}
		case paymentorder.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				po.TxHash = value.String
			}
		case paymentorder.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				po.BlockNumber = value.Int64
			}
		case paymentorder.FieldFromAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_address", values[i])
			} else if value.Valid {
				po.FromAddress = value.String
			}
		case paymentorder.FieldReturnAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field return_address", values[i])
			} else if value.Valid {
				po.ReturnAddress = value.String
			}
		case paymentorder.FieldReceiveAddressText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receive_address_text", values[i])
			} else if value.Valid {
				po.ReceiveAddressText = value.String
			}
		case paymentorder.FieldFeePercent:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field fee_percent", values[i])
			} else if value != nil {
				po.FeePercent = *value
			}
		case paymentorder.FieldFeeAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_address", values[i])
			} else if value.Valid {
				po.FeeAddress = value.String
			}
		case paymentorder.FieldGatewayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_id", values[i])
			} else if value.Valid {
				po.GatewayID = value.String
			}
		case paymentorder.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				po.Reference = value.String
			}
		case paymentorder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				po.Status = paymentorder.Status(value.String)
			}
		case paymentorder.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field api_key_payment_orders", values[i])
			} else if value.Valid {
				po.api_key_payment_orders = new(uuid.UUID)
				*po.api_key_payment_orders = *value.S.(*uuid.UUID)
			}
		case paymentorder.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field linked_address_payment_orders", value)
			} else if value.Valid {
				po.linked_address_payment_orders = new(int)
				*po.linked_address_payment_orders = int(value.Int64)
			}
		case paymentorder.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sender_profile_payment_orders", values[i])
			} else if value.Valid {
				po.sender_profile_payment_orders = new(uuid.UUID)
				*po.sender_profile_payment_orders = *value.S.(*uuid.UUID)
			}
		case paymentorder.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field token_payment_orders", value)
			} else if value.Valid {
				po.token_payment_orders = new(int)
				*po.token_payment_orders = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentOrder.
// This includes values selected through modifiers, order, etc.
func (po *PaymentOrder) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QuerySenderProfile queries the "sender_profile" edge of the PaymentOrder entity.
func (po *PaymentOrder) QuerySenderProfile() *SenderProfileQuery {
	return NewPaymentOrderClient(po.config).QuerySenderProfile(po)
}

// QueryToken queries the "token" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryToken() *TokenQuery {
	return NewPaymentOrderClient(po.config).QueryToken(po)
}

// QueryLinkedAddress queries the "linked_address" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryLinkedAddress() *LinkedAddressQuery {
	return NewPaymentOrderClient(po.config).QueryLinkedAddress(po)
}

// QueryReceiveAddress queries the "receive_address" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryReceiveAddress() *ReceiveAddressQuery {
	return NewPaymentOrderClient(po.config).QueryReceiveAddress(po)
}

// QueryRecipient queries the "recipient" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryRecipient() *PaymentOrderRecipientQuery {
	return NewPaymentOrderClient(po.config).QueryRecipient(po)
}

// QueryTransactions queries the "transactions" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryTransactions() *TransactionLogQuery {
	return NewPaymentOrderClient(po.config).QueryTransactions(po)
}

// Update returns a builder for updating this PaymentOrder.
// Note that you need to call PaymentOrder.Unwrap() before calling this method if this PaymentOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *PaymentOrder) Update() *PaymentOrderUpdateOne {
	return NewPaymentOrderClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the PaymentOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *PaymentOrder) Unwrap() *PaymentOrder {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentOrder is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *PaymentOrder) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", po.Amount))
	builder.WriteString(", ")
	builder.WriteString("amount_paid=")
	builder.WriteString(fmt.Sprintf("%v", po.AmountPaid))
	builder.WriteString(", ")
	builder.WriteString("amount_returned=")
	builder.WriteString(fmt.Sprintf("%v", po.AmountReturned))
	builder.WriteString(", ")
	builder.WriteString("percent_settled=")
	builder.WriteString(fmt.Sprintf("%v", po.PercentSettled))
	builder.WriteString(", ")
	builder.WriteString("sender_fee=")
	builder.WriteString(fmt.Sprintf("%v", po.SenderFee))
	builder.WriteString(", ")
	builder.WriteString("network_fee=")
	builder.WriteString(fmt.Sprintf("%v", po.NetworkFee))
	builder.WriteString(", ")
	builder.WriteString("protocol_fee=")
	builder.WriteString(fmt.Sprintf("%v", po.ProtocolFee))
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", po.Rate))
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(po.TxHash)
	builder.WriteString(", ")
	builder.WriteString("block_number=")
	builder.WriteString(fmt.Sprintf("%v", po.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("from_address=")
	builder.WriteString(po.FromAddress)
	builder.WriteString(", ")
	builder.WriteString("return_address=")
	builder.WriteString(po.ReturnAddress)
	builder.WriteString(", ")
	builder.WriteString("receive_address_text=")
	builder.WriteString(po.ReceiveAddressText)
	builder.WriteString(", ")
	builder.WriteString("fee_percent=")
	builder.WriteString(fmt.Sprintf("%v", po.FeePercent))
	builder.WriteString(", ")
	builder.WriteString("fee_address=")
	builder.WriteString(po.FeeAddress)
	builder.WriteString(", ")
	builder.WriteString("gateway_id=")
	builder.WriteString(po.GatewayID)
	builder.WriteString(", ")
	builder.WriteString("reference=")
	builder.WriteString(po.Reference)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", po.Status))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentOrders is a parsable slice of PaymentOrder.
type PaymentOrders []*PaymentOrder
