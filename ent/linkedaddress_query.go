// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/linkedaddress"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
)

// LinkedAddressQuery is the builder for querying LinkedAddress entities.
type LinkedAddressQuery struct {
	config
	ctx               *QueryContext
	order             []linkedaddress.OrderOption
	inters            []Interceptor
	predicates        []predicate.LinkedAddress
	withPaymentOrders *PaymentOrderQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LinkedAddressQuery builder.
func (laq *LinkedAddressQuery) Where(ps ...predicate.LinkedAddress) *LinkedAddressQuery {
	laq.predicates = append(laq.predicates, ps...)
	return laq
}

// Limit the number of records to be returned by this query.
func (laq *LinkedAddressQuery) Limit(limit int) *LinkedAddressQuery {
	laq.ctx.Limit = &limit
	return laq
}

// Offset to start from.
func (laq *LinkedAddressQuery) Offset(offset int) *LinkedAddressQuery {
	laq.ctx.Offset = &offset
	return laq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (laq *LinkedAddressQuery) Unique(unique bool) *LinkedAddressQuery {
	laq.ctx.Unique = &unique
	return laq
}

// Order specifies how the records should be ordered.
func (laq *LinkedAddressQuery) Order(o ...linkedaddress.OrderOption) *LinkedAddressQuery {
	laq.order = append(laq.order, o...)
	return laq
}

// QueryPaymentOrders chains the current query on the "payment_orders" edge.
func (laq *LinkedAddressQuery) QueryPaymentOrders() *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: laq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := laq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := laq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(linkedaddress.Table, linkedaddress.FieldID, selector),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, linkedaddress.PaymentOrdersTable, linkedaddress.PaymentOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(laq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LinkedAddress entity from the query.
// Returns a *NotFoundError when no LinkedAddress was found.
func (laq *LinkedAddressQuery) First(ctx context.Context) (*LinkedAddress, error) {
	nodes, err := laq.Limit(1).All(setContextOp(ctx, laq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{linkedaddress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (laq *LinkedAddressQuery) FirstX(ctx context.Context) *LinkedAddress {
	node, err := laq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LinkedAddress ID from the query.
// Returns a *NotFoundError when no LinkedAddress ID was found.
func (laq *LinkedAddressQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = laq.Limit(1).IDs(setContextOp(ctx, laq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{linkedaddress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (laq *LinkedAddressQuery) FirstIDX(ctx context.Context) int {
	id, err := laq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LinkedAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LinkedAddress entity is found.
// Returns a *NotFoundError when no LinkedAddress entities are found.
func (laq *LinkedAddressQuery) Only(ctx context.Context) (*LinkedAddress, error) {
	nodes, err := laq.Limit(2).All(setContextOp(ctx, laq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{linkedaddress.Label}
	default:
		return nil, &NotSingularError{linkedaddress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (laq *LinkedAddressQuery) OnlyX(ctx context.Context) *LinkedAddress {
	node, err := laq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LinkedAddress ID in the query.
// Returns a *NotSingularError when more than one LinkedAddress ID is found.
// Returns a *NotFoundError when no entities are found.
func (laq *LinkedAddressQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = laq.Limit(2).IDs(setContextOp(ctx, laq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{linkedaddress.Label}
	default:
		err = &NotSingularError{linkedaddress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (laq *LinkedAddressQuery) OnlyIDX(ctx context.Context) int {
	id, err := laq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LinkedAddresses.
func (laq *LinkedAddressQuery) All(ctx context.Context) ([]*LinkedAddress, error) {
	ctx = setContextOp(ctx, laq.ctx, ent.OpQueryAll)
	if err := laq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LinkedAddress, *LinkedAddressQuery]()
	return withInterceptors[[]*LinkedAddress](ctx, laq, qr, laq.inters)
}

// AllX is like All, but panics if an error occurs.
func (laq *LinkedAddressQuery) AllX(ctx context.Context) []*LinkedAddress {
	nodes, err := laq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LinkedAddress IDs.
func (laq *LinkedAddressQuery) IDs(ctx context.Context) (ids []int, err error) {
	if laq.ctx.Unique == nil && laq.path != nil {
		laq.Unique(true)
	}
	ctx = setContextOp(ctx, laq.ctx, ent.OpQueryIDs)
	if err = laq.Select(linkedaddress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (laq *LinkedAddressQuery) IDsX(ctx context.Context) []int {
	ids, err := laq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (laq *LinkedAddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, laq.ctx, ent.OpQueryCount)
	if err := laq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, laq, querierCount[*LinkedAddressQuery](), laq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (laq *LinkedAddressQuery) CountX(ctx context.Context) int {
	count, err := laq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (laq *LinkedAddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, laq.ctx, ent.OpQueryExist)
	switch _, err := laq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (laq *LinkedAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := laq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LinkedAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (laq *LinkedAddressQuery) Clone() *LinkedAddressQuery {
	if laq == nil {
		return nil
	}
	return &LinkedAddressQuery{
		config:            laq.config,
		ctx:               laq.ctx.Clone(),
		order:             append([]linkedaddress.OrderOption{}, laq.order...),
		inters:            append([]Interceptor{}, laq.inters...),
		predicates:        append([]predicate.LinkedAddress{}, laq.predicates...),
		withPaymentOrders: laq.withPaymentOrders.Clone(),
		// clone intermediate query.
		sql:  laq.sql.Clone(),
		path: laq.path,
	}
}

// WithPaymentOrders tells the query-builder to eager-load the nodes that are connected to
// the "payment_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (laq *LinkedAddressQuery) WithPaymentOrders(opts ...func(*PaymentOrderQuery)) *LinkedAddressQuery {
	query := (&PaymentOrderClient{config: laq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	laq.withPaymentOrders = query
	return laq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LinkedAddress.Query().
//		GroupBy(linkedaddress.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (laq *LinkedAddressQuery) GroupBy(field string, fields ...string) *LinkedAddressGroupBy {
	laq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LinkedAddressGroupBy{build: laq}
	grbuild.flds = &laq.ctx.Fields
	grbuild.label = linkedaddress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LinkedAddress.Query().
//		Select(linkedaddress.FieldCreatedAt).
//		Scan(ctx, &v)
func (laq *LinkedAddressQuery) Select(fields ...string) *LinkedAddressSelect {
	laq.ctx.Fields = append(laq.ctx.Fields, fields...)
	sbuild := &LinkedAddressSelect{LinkedAddressQuery: laq}
	sbuild.label = linkedaddress.Label
	sbuild.flds, sbuild.scan = &laq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LinkedAddressSelect configured with the given aggregations.
func (laq *LinkedAddressQuery) Aggregate(fns ...AggregateFunc) *LinkedAddressSelect {
	return laq.Select().Aggregate(fns...)
}

func (laq *LinkedAddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range laq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, laq); err != nil {
				return err
			}
		}
	}
	for _, f := range laq.ctx.Fields {
		if !linkedaddress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if laq.path != nil {
		prev, err := laq.path(ctx)
		if err != nil {
			return err
		}
		laq.sql = prev
	}
	return nil
}

func (laq *LinkedAddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LinkedAddress, error) {
	var (
		nodes       = []*LinkedAddress{}
		withFKs     = laq.withFKs
		_spec       = laq.querySpec()
		loadedTypes = [1]bool{
			laq.withPaymentOrders != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, linkedaddress.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LinkedAddress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LinkedAddress{config: laq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, laq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := laq.withPaymentOrders; query != nil {
		if err := laq.loadPaymentOrders(ctx, query, nodes,
			func(n *LinkedAddress) { n.Edges.PaymentOrders = []*PaymentOrder{} },
			func(n *LinkedAddress, e *PaymentOrder) { n.Edges.PaymentOrders = append(n.Edges.PaymentOrders, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (laq *LinkedAddressQuery) loadPaymentOrders(ctx context.Context, query *PaymentOrderQuery, nodes []*LinkedAddress, init func(*LinkedAddress), assign func(*LinkedAddress, *PaymentOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*LinkedAddress)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PaymentOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(linkedaddress.PaymentOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.linked_address_payment_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "linked_address_payment_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "linked_address_payment_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (laq *LinkedAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := laq.querySpec()
	_spec.Node.Columns = laq.ctx.Fields
	if len(laq.ctx.Fields) > 0 {
		_spec.Unique = laq.ctx.Unique != nil && *laq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, laq.driver, _spec)
}

func (laq *LinkedAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(linkedaddress.Table, linkedaddress.Columns, sqlgraph.NewFieldSpec(linkedaddress.FieldID, field.TypeInt))
	_spec.From = laq.sql
	if unique := laq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if laq.path != nil {
		_spec.Unique = true
	}
	if fields := laq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linkedaddress.FieldID)
		for i := range fields {
			if fields[i] != linkedaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := laq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := laq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := laq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := laq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (laq *LinkedAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(laq.driver.Dialect())
	t1 := builder.Table(linkedaddress.Table)
	columns := laq.ctx.Fields
	if len(columns) == 0 {
		columns = linkedaddress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if laq.sql != nil {
		selector = laq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if laq.ctx.Unique != nil && *laq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range laq.predicates {
		p(selector)
	}
	for _, p := range laq.order {
		p(selector)
	}
	if offset := laq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := laq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LinkedAddressGroupBy is the group-by builder for LinkedAddress entities.
type LinkedAddressGroupBy struct {
	selector
	build *LinkedAddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lagb *LinkedAddressGroupBy) Aggregate(fns ...AggregateFunc) *LinkedAddressGroupBy {
	lagb.fns = append(lagb.fns, fns...)
	return lagb
}

// Scan applies the selector query and scans the result into the given value.
func (lagb *LinkedAddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lagb.build.ctx, ent.OpQueryGroupBy)
	if err := lagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LinkedAddressQuery, *LinkedAddressGroupBy](ctx, lagb.build, lagb, lagb.build.inters, v)
}

func (lagb *LinkedAddressGroupBy) sqlScan(ctx context.Context, root *LinkedAddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lagb.fns))
	for _, fn := range lagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lagb.flds)+len(lagb.fns))
		for _, f := range *lagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LinkedAddressSelect is the builder for selecting fields of LinkedAddress entities.
type LinkedAddressSelect struct {
	*LinkedAddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (las *LinkedAddressSelect) Aggregate(fns ...AggregateFunc) *LinkedAddressSelect {
	las.fns = append(las.fns, fns...)
	return las
}

// Scan applies the selector query and scans the result into the given value.
func (las *LinkedAddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, las.ctx, ent.OpQuerySelect)
	if err := las.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LinkedAddressQuery, *LinkedAddressSelect](ctx, las.LinkedAddressQuery, las, las.inters, v)
}

func (las *LinkedAddressSelect) sqlScan(ctx context.Context, root *LinkedAddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(las.fns))
	for _, fn := range las.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*las.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := las.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
