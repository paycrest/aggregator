// Code generated by ent, DO NOT EDIT.

package paymentorderrecipient

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentorderrecipient type in the database.
	Label = "payment_order_recipient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInstitution holds the string denoting the institution field in the database.
	FieldInstitution = "institution"
	// FieldAccountIdentifier holds the string denoting the account_identifier field in the database.
	FieldAccountIdentifier = "account_identifier"
	// FieldAccountName holds the string denoting the account_name field in the database.
	FieldAccountName = "account_name"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgePaymentOrder holds the string denoting the payment_order edge name in mutations.
	EdgePaymentOrder = "payment_order"
	// Table holds the table name of the paymentorderrecipient in the database.
	Table = "payment_order_recipients"
	// PaymentOrderTable is the table that holds the payment_order relation/edge.
	PaymentOrderTable = "payment_order_recipients"
	// PaymentOrderInverseTable is the table name for the PaymentOrder entity.
	// It exists in this package in order to avoid circular dependency with the "paymentorder" package.
	PaymentOrderInverseTable = "payment_orders"
	// PaymentOrderColumn is the table column denoting the payment_order relation/edge.
	PaymentOrderColumn = "payment_order_recipient"
)

// Columns holds all SQL columns for paymentorderrecipient fields.
var Columns = []string{
	FieldID,
	FieldInstitution,
	FieldAccountIdentifier,
	FieldAccountName,
	FieldMemo,
	FieldProviderID,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payment_order_recipients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_order_recipient",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PaymentOrderRecipient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInstitution orders the results by the institution field.
func ByInstitution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitution, opts...).ToFunc()
}

// ByAccountIdentifier orders the results by the account_identifier field.
func ByAccountIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountIdentifier, opts...).ToFunc()
}

// ByAccountName orders the results by the account_name field.
func ByAccountName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountName, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByPaymentOrderField orders the results by payment_order field.
func ByPaymentOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaymentOrderTable, PaymentOrderColumn),
	)
}
