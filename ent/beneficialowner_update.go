// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybprofile"
	"github.com/paycrest/aggregator/ent/predicate"
)

// BeneficialOwnerUpdate is the builder for updating BeneficialOwner entities.
type BeneficialOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *BeneficialOwnerMutation
}

// Where appends a list predicates to the BeneficialOwnerUpdate builder.
func (bou *BeneficialOwnerUpdate) Where(ps ...predicate.BeneficialOwner) *BeneficialOwnerUpdate {
	bou.mutation.Where(ps...)
	return bou
}

// SetFullName sets the "full_name" field.
func (bou *BeneficialOwnerUpdate) SetFullName(s string) *BeneficialOwnerUpdate {
	bou.mutation.SetFullName(s)
	return bou
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableFullName(s *string) *BeneficialOwnerUpdate {
	if s != nil {
		bou.SetFullName(*s)
	}
	return bou
}

// SetResidentialAddress sets the "residential_address" field.
func (bou *BeneficialOwnerUpdate) SetResidentialAddress(s string) *BeneficialOwnerUpdate {
	bou.mutation.SetResidentialAddress(s)
	return bou
}

// SetNillableResidentialAddress sets the "residential_address" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableResidentialAddress(s *string) *BeneficialOwnerUpdate {
	if s != nil {
		bou.SetResidentialAddress(*s)
	}
	return bou
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (bou *BeneficialOwnerUpdate) SetProofOfResidentialAddressURL(s string) *BeneficialOwnerUpdate {
	bou.mutation.SetProofOfResidentialAddressURL(s)
	return bou
}

// SetNillableProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableProofOfResidentialAddressURL(s *string) *BeneficialOwnerUpdate {
	if s != nil {
		bou.SetProofOfResidentialAddressURL(*s)
	}
	return bou
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (bou *BeneficialOwnerUpdate) SetGovernmentIssuedIDURL(s string) *BeneficialOwnerUpdate {
	bou.mutation.SetGovernmentIssuedIDURL(s)
	return bou
}

// SetNillableGovernmentIssuedIDURL sets the "government_issued_id_url" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableGovernmentIssuedIDURL(s *string) *BeneficialOwnerUpdate {
	if s != nil {
		bou.SetGovernmentIssuedIDURL(*s)
	}
	return bou
}

// SetDateOfBirth sets the "date_of_birth" field.
func (bou *BeneficialOwnerUpdate) SetDateOfBirth(s string) *BeneficialOwnerUpdate {
	bou.mutation.SetDateOfBirth(s)
	return bou
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableDateOfBirth(s *string) *BeneficialOwnerUpdate {
	if s != nil {
		bou.SetDateOfBirth(*s)
	}
	return bou
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (bou *BeneficialOwnerUpdate) SetOwnershipPercentage(f float64) *BeneficialOwnerUpdate {
	bou.mutation.ResetOwnershipPercentage()
	bou.mutation.SetOwnershipPercentage(f)
	return bou
}

// SetNillableOwnershipPercentage sets the "ownership_percentage" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableOwnershipPercentage(f *float64) *BeneficialOwnerUpdate {
	if f != nil {
		bou.SetOwnershipPercentage(*f)
	}
	return bou
}

// AddOwnershipPercentage adds f to the "ownership_percentage" field.
func (bou *BeneficialOwnerUpdate) AddOwnershipPercentage(f float64) *BeneficialOwnerUpdate {
	bou.mutation.AddOwnershipPercentage(f)
	return bou
}

// SetGovernmentIssuedIDType sets the "government_issued_id_type" field.
func (bou *BeneficialOwnerUpdate) SetGovernmentIssuedIDType(biit beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerUpdate {
	bou.mutation.SetGovernmentIssuedIDType(biit)
	return bou
}

// SetNillableGovernmentIssuedIDType sets the "government_issued_id_type" field if the given value is not nil.
func (bou *BeneficialOwnerUpdate) SetNillableGovernmentIssuedIDType(biit *beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerUpdate {
	if biit != nil {
		bou.SetGovernmentIssuedIDType(*biit)
	}
	return bou
}

// ClearGovernmentIssuedIDType clears the value of the "government_issued_id_type" field.
func (bou *BeneficialOwnerUpdate) ClearGovernmentIssuedIDType() *BeneficialOwnerUpdate {
	bou.mutation.ClearGovernmentIssuedIDType()
	return bou
}

// SetKybProfileID sets the "kyb_profile" edge to the KYBProfile entity by ID.
func (bou *BeneficialOwnerUpdate) SetKybProfileID(id uuid.UUID) *BeneficialOwnerUpdate {
	bou.mutation.SetKybProfileID(id)
	return bou
}

// SetKybProfile sets the "kyb_profile" edge to the KYBProfile entity.
func (bou *BeneficialOwnerUpdate) SetKybProfile(k *KYBProfile) *BeneficialOwnerUpdate {
	return bou.SetKybProfileID(k.ID)
}

// Mutation returns the BeneficialOwnerMutation object of the builder.
func (bou *BeneficialOwnerUpdate) Mutation() *BeneficialOwnerMutation {
	return bou.mutation
}

// ClearKybProfile clears the "kyb_profile" edge to the KYBProfile entity.
func (bou *BeneficialOwnerUpdate) ClearKybProfile() *BeneficialOwnerUpdate {
	bou.mutation.ClearKybProfile()
	return bou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bou *BeneficialOwnerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bou.sqlSave, bou.mutation, bou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bou *BeneficialOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := bou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bou *BeneficialOwnerUpdate) Exec(ctx context.Context) error {
	_, err := bou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bou *BeneficialOwnerUpdate) ExecX(ctx context.Context) {
	if err := bou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bou *BeneficialOwnerUpdate) check() error {
	if v, ok := bou.mutation.FullName(); ok {
		if err := beneficialowner.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.full_name": %w`, err)}
		}
	}
	if v, ok := bou.mutation.GovernmentIssuedIDType(); ok {
		if err := beneficialowner.GovernmentIssuedIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "government_issued_id_type", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.government_issued_id_type": %w`, err)}
		}
	}
	if bou.mutation.KybProfileCleared() && len(bou.mutation.KybProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BeneficialOwner.kyb_profile"`)
	}
	return nil
}

func (bou *BeneficialOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(beneficialowner.Table, beneficialowner.Columns, sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID))
	if ps := bou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bou.mutation.FullName(); ok {
		_spec.SetField(beneficialowner.FieldFullName, field.TypeString, value)
	}
	if value, ok := bou.mutation.ResidentialAddress(); ok {
		_spec.SetField(beneficialowner.FieldResidentialAddress, field.TypeString, value)
	}
	if value, ok := bou.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(beneficialowner.FieldProofOfResidentialAddressURL, field.TypeString, value)
	}
	if value, ok := bou.mutation.GovernmentIssuedIDURL(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDURL, field.TypeString, value)
	}
	if value, ok := bou.mutation.DateOfBirth(); ok {
		_spec.SetField(beneficialowner.FieldDateOfBirth, field.TypeString, value)
	}
	if value, ok := bou.mutation.OwnershipPercentage(); ok {
		_spec.SetField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
	}
	if value, ok := bou.mutation.AddedOwnershipPercentage(); ok {
		_spec.AddField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
	}
	if value, ok := bou.mutation.GovernmentIssuedIDType(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDType, field.TypeEnum, value)
	}
	if bou.mutation.GovernmentIssuedIDTypeCleared() {
		_spec.ClearField(beneficialowner.FieldGovernmentIssuedIDType, field.TypeEnum)
	}
	if bou.mutation.KybProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybProfileTable,
			Columns: []string{beneficialowner.KybProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bou.mutation.KybProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybProfileTable,
			Columns: []string{beneficialowner.KybProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{beneficialowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bou.mutation.done = true
	return n, nil
}

// BeneficialOwnerUpdateOne is the builder for updating a single BeneficialOwner entity.
type BeneficialOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BeneficialOwnerMutation
}

// SetFullName sets the "full_name" field.
func (bouo *BeneficialOwnerUpdateOne) SetFullName(s string) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetFullName(s)
	return bouo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableFullName(s *string) *BeneficialOwnerUpdateOne {
	if s != nil {
		bouo.SetFullName(*s)
	}
	return bouo
}

// SetResidentialAddress sets the "residential_address" field.
func (bouo *BeneficialOwnerUpdateOne) SetResidentialAddress(s string) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetResidentialAddress(s)
	return bouo
}

// SetNillableResidentialAddress sets the "residential_address" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableResidentialAddress(s *string) *BeneficialOwnerUpdateOne {
	if s != nil {
		bouo.SetResidentialAddress(*s)
	}
	return bouo
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (bouo *BeneficialOwnerUpdateOne) SetProofOfResidentialAddressURL(s string) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetProofOfResidentialAddressURL(s)
	return bouo
}

// SetNillableProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableProofOfResidentialAddressURL(s *string) *BeneficialOwnerUpdateOne {
	if s != nil {
		bouo.SetProofOfResidentialAddressURL(*s)
	}
	return bouo
}

// SetGovernmentIssuedIDURL sets the "government_issued_id_url" field.
func (bouo *BeneficialOwnerUpdateOne) SetGovernmentIssuedIDURL(s string) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetGovernmentIssuedIDURL(s)
	return bouo
}

// SetNillableGovernmentIssuedIDURL sets the "government_issued_id_url" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableGovernmentIssuedIDURL(s *string) *BeneficialOwnerUpdateOne {
	if s != nil {
		bouo.SetGovernmentIssuedIDURL(*s)
	}
	return bouo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (bouo *BeneficialOwnerUpdateOne) SetDateOfBirth(s string) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetDateOfBirth(s)
	return bouo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableDateOfBirth(s *string) *BeneficialOwnerUpdateOne {
	if s != nil {
		bouo.SetDateOfBirth(*s)
	}
	return bouo
}

// SetOwnershipPercentage sets the "ownership_percentage" field.
func (bouo *BeneficialOwnerUpdateOne) SetOwnershipPercentage(f float64) *BeneficialOwnerUpdateOne {
	bouo.mutation.ResetOwnershipPercentage()
	bouo.mutation.SetOwnershipPercentage(f)
	return bouo
}

// SetNillableOwnershipPercentage sets the "ownership_percentage" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableOwnershipPercentage(f *float64) *BeneficialOwnerUpdateOne {
	if f != nil {
		bouo.SetOwnershipPercentage(*f)
	}
	return bouo
}

// AddOwnershipPercentage adds f to the "ownership_percentage" field.
func (bouo *BeneficialOwnerUpdateOne) AddOwnershipPercentage(f float64) *BeneficialOwnerUpdateOne {
	bouo.mutation.AddOwnershipPercentage(f)
	return bouo
}

// SetGovernmentIssuedIDType sets the "government_issued_id_type" field.
func (bouo *BeneficialOwnerUpdateOne) SetGovernmentIssuedIDType(biit beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetGovernmentIssuedIDType(biit)
	return bouo
}

// SetNillableGovernmentIssuedIDType sets the "government_issued_id_type" field if the given value is not nil.
func (bouo *BeneficialOwnerUpdateOne) SetNillableGovernmentIssuedIDType(biit *beneficialowner.GovernmentIssuedIDType) *BeneficialOwnerUpdateOne {
	if biit != nil {
		bouo.SetGovernmentIssuedIDType(*biit)
	}
	return bouo
}

// ClearGovernmentIssuedIDType clears the value of the "government_issued_id_type" field.
func (bouo *BeneficialOwnerUpdateOne) ClearGovernmentIssuedIDType() *BeneficialOwnerUpdateOne {
	bouo.mutation.ClearGovernmentIssuedIDType()
	return bouo
}

// SetKybProfileID sets the "kyb_profile" edge to the KYBProfile entity by ID.
func (bouo *BeneficialOwnerUpdateOne) SetKybProfileID(id uuid.UUID) *BeneficialOwnerUpdateOne {
	bouo.mutation.SetKybProfileID(id)
	return bouo
}

// SetKybProfile sets the "kyb_profile" edge to the KYBProfile entity.
func (bouo *BeneficialOwnerUpdateOne) SetKybProfile(k *KYBProfile) *BeneficialOwnerUpdateOne {
	return bouo.SetKybProfileID(k.ID)
}

// Mutation returns the BeneficialOwnerMutation object of the builder.
func (bouo *BeneficialOwnerUpdateOne) Mutation() *BeneficialOwnerMutation {
	return bouo.mutation
}

// ClearKybProfile clears the "kyb_profile" edge to the KYBProfile entity.
func (bouo *BeneficialOwnerUpdateOne) ClearKybProfile() *BeneficialOwnerUpdateOne {
	bouo.mutation.ClearKybProfile()
	return bouo
}

// Where appends a list predicates to the BeneficialOwnerUpdate builder.
func (bouo *BeneficialOwnerUpdateOne) Where(ps ...predicate.BeneficialOwner) *BeneficialOwnerUpdateOne {
	bouo.mutation.Where(ps...)
	return bouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bouo *BeneficialOwnerUpdateOne) Select(field string, fields ...string) *BeneficialOwnerUpdateOne {
	bouo.fields = append([]string{field}, fields...)
	return bouo
}

// Save executes the query and returns the updated BeneficialOwner entity.
func (bouo *BeneficialOwnerUpdateOne) Save(ctx context.Context) (*BeneficialOwner, error) {
	return withHooks(ctx, bouo.sqlSave, bouo.mutation, bouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bouo *BeneficialOwnerUpdateOne) SaveX(ctx context.Context) *BeneficialOwner {
	node, err := bouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bouo *BeneficialOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := bouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bouo *BeneficialOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := bouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bouo *BeneficialOwnerUpdateOne) check() error {
	if v, ok := bouo.mutation.FullName(); ok {
		if err := beneficialowner.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.full_name": %w`, err)}
		}
	}
	if v, ok := bouo.mutation.GovernmentIssuedIDType(); ok {
		if err := beneficialowner.GovernmentIssuedIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "government_issued_id_type", err: fmt.Errorf(`ent: validator failed for field "BeneficialOwner.government_issued_id_type": %w`, err)}
		}
	}
	if bouo.mutation.KybProfileCleared() && len(bouo.mutation.KybProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BeneficialOwner.kyb_profile"`)
	}
	return nil
}

func (bouo *BeneficialOwnerUpdateOne) sqlSave(ctx context.Context) (_node *BeneficialOwner, err error) {
	if err := bouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(beneficialowner.Table, beneficialowner.Columns, sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID))
	id, ok := bouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BeneficialOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, beneficialowner.FieldID)
		for _, f := range fields {
			if !beneficialowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != beneficialowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bouo.mutation.FullName(); ok {
		_spec.SetField(beneficialowner.FieldFullName, field.TypeString, value)
	}
	if value, ok := bouo.mutation.ResidentialAddress(); ok {
		_spec.SetField(beneficialowner.FieldResidentialAddress, field.TypeString, value)
	}
	if value, ok := bouo.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(beneficialowner.FieldProofOfResidentialAddressURL, field.TypeString, value)
	}
	if value, ok := bouo.mutation.GovernmentIssuedIDURL(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDURL, field.TypeString, value)
	}
	if value, ok := bouo.mutation.DateOfBirth(); ok {
		_spec.SetField(beneficialowner.FieldDateOfBirth, field.TypeString, value)
	}
	if value, ok := bouo.mutation.OwnershipPercentage(); ok {
		_spec.SetField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
	}
	if value, ok := bouo.mutation.AddedOwnershipPercentage(); ok {
		_spec.AddField(beneficialowner.FieldOwnershipPercentage, field.TypeFloat64, value)
	}
	if value, ok := bouo.mutation.GovernmentIssuedIDType(); ok {
		_spec.SetField(beneficialowner.FieldGovernmentIssuedIDType, field.TypeEnum, value)
	}
	if bouo.mutation.GovernmentIssuedIDTypeCleared() {
		_spec.ClearField(beneficialowner.FieldGovernmentIssuedIDType, field.TypeEnum)
	}
	if bouo.mutation.KybProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybProfileTable,
			Columns: []string{beneficialowner.KybProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bouo.mutation.KybProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   beneficialowner.KybProfileTable,
			Columns: []string{beneficialowner.KybProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kybprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BeneficialOwner{config: bouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{beneficialowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bouo.mutation.done = true
	return _node, nil
}
