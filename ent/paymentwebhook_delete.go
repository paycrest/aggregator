// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/paymentwebhook"
	"github.com/paycrest/aggregator/ent/predicate"
)

// PaymentWebhookDelete is the builder for deleting a PaymentWebhook entity.
type PaymentWebhookDelete struct {
	config
	hooks    []Hook
	mutation *PaymentWebhookMutation
}

// Where appends a list predicates to the PaymentWebhookDelete builder.
func (pwd *PaymentWebhookDelete) Where(ps ...predicate.PaymentWebhook) *PaymentWebhookDelete {
	pwd.mutation.Where(ps...)
	return pwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pwd *PaymentWebhookDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pwd.sqlExec, pwd.mutation, pwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pwd *PaymentWebhookDelete) ExecX(ctx context.Context) int {
	n, err := pwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pwd *PaymentWebhookDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(paymentwebhook.Table, sqlgraph.NewFieldSpec(paymentwebhook.FieldID, field.TypeUUID))
	if ps := pwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pwd.mutation.done = true
	return affected, err
}

// PaymentWebhookDeleteOne is the builder for deleting a single PaymentWebhook entity.
type PaymentWebhookDeleteOne struct {
	pwd *PaymentWebhookDelete
}

// Where appends a list predicates to the PaymentWebhookDelete builder.
func (pwdo *PaymentWebhookDeleteOne) Where(ps ...predicate.PaymentWebhook) *PaymentWebhookDeleteOne {
	pwdo.pwd.mutation.Where(ps...)
	return pwdo
}

// Exec executes the deletion query.
func (pwdo *PaymentWebhookDeleteOne) Exec(ctx context.Context) error {
	n, err := pwdo.pwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{paymentwebhook.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pwdo *PaymentWebhookDeleteOne) ExecX(ctx context.Context) {
	if err := pwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
