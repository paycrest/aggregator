// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/user"
	"github.com/paycrest/aggregator/ent/verificationtoken"
)

// VerificationTokenQuery is the builder for querying VerificationToken entities.
type VerificationTokenQuery struct {
	config
	ctx        *QueryContext
	order      []verificationtoken.OrderOption
	inters     []Interceptor
	predicates []predicate.VerificationToken
	withOwner  *UserQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VerificationTokenQuery builder.
func (vtq *VerificationTokenQuery) Where(ps ...predicate.VerificationToken) *VerificationTokenQuery {
	vtq.predicates = append(vtq.predicates, ps...)
	return vtq
}

// Limit the number of records to be returned by this query.
func (vtq *VerificationTokenQuery) Limit(limit int) *VerificationTokenQuery {
	vtq.ctx.Limit = &limit
	return vtq
}

// Offset to start from.
func (vtq *VerificationTokenQuery) Offset(offset int) *VerificationTokenQuery {
	vtq.ctx.Offset = &offset
	return vtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vtq *VerificationTokenQuery) Unique(unique bool) *VerificationTokenQuery {
	vtq.ctx.Unique = &unique
	return vtq
}

// Order specifies how the records should be ordered.
func (vtq *VerificationTokenQuery) Order(o ...verificationtoken.OrderOption) *VerificationTokenQuery {
	vtq.order = append(vtq.order, o...)
	return vtq
}

// QueryOwner chains the current query on the "owner" edge.
func (vtq *VerificationTokenQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: vtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(verificationtoken.Table, verificationtoken.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, verificationtoken.OwnerTable, verificationtoken.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(vtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VerificationToken entity from the query.
// Returns a *NotFoundError when no VerificationToken was found.
func (vtq *VerificationTokenQuery) First(ctx context.Context) (*VerificationToken, error) {
	nodes, err := vtq.Limit(1).All(setContextOp(ctx, vtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{verificationtoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vtq *VerificationTokenQuery) FirstX(ctx context.Context) *VerificationToken {
	node, err := vtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VerificationToken ID from the query.
// Returns a *NotFoundError when no VerificationToken ID was found.
func (vtq *VerificationTokenQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vtq.Limit(1).IDs(setContextOp(ctx, vtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{verificationtoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vtq *VerificationTokenQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := vtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VerificationToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VerificationToken entity is found.
// Returns a *NotFoundError when no VerificationToken entities are found.
func (vtq *VerificationTokenQuery) Only(ctx context.Context) (*VerificationToken, error) {
	nodes, err := vtq.Limit(2).All(setContextOp(ctx, vtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{verificationtoken.Label}
	default:
		return nil, &NotSingularError{verificationtoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vtq *VerificationTokenQuery) OnlyX(ctx context.Context) *VerificationToken {
	node, err := vtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VerificationToken ID in the query.
// Returns a *NotSingularError when more than one VerificationToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (vtq *VerificationTokenQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vtq.Limit(2).IDs(setContextOp(ctx, vtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{verificationtoken.Label}
	default:
		err = &NotSingularError{verificationtoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vtq *VerificationTokenQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := vtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VerificationTokens.
func (vtq *VerificationTokenQuery) All(ctx context.Context) ([]*VerificationToken, error) {
	ctx = setContextOp(ctx, vtq.ctx, ent.OpQueryAll)
	if err := vtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VerificationToken, *VerificationTokenQuery]()
	return withInterceptors[[]*VerificationToken](ctx, vtq, qr, vtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vtq *VerificationTokenQuery) AllX(ctx context.Context) []*VerificationToken {
	nodes, err := vtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VerificationToken IDs.
func (vtq *VerificationTokenQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if vtq.ctx.Unique == nil && vtq.path != nil {
		vtq.Unique(true)
	}
	ctx = setContextOp(ctx, vtq.ctx, ent.OpQueryIDs)
	if err = vtq.Select(verificationtoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vtq *VerificationTokenQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := vtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vtq *VerificationTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vtq.ctx, ent.OpQueryCount)
	if err := vtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vtq, querierCount[*VerificationTokenQuery](), vtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vtq *VerificationTokenQuery) CountX(ctx context.Context) int {
	count, err := vtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vtq *VerificationTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vtq.ctx, ent.OpQueryExist)
	switch _, err := vtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vtq *VerificationTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := vtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VerificationTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vtq *VerificationTokenQuery) Clone() *VerificationTokenQuery {
	if vtq == nil {
		return nil
	}
	return &VerificationTokenQuery{
		config:     vtq.config,
		ctx:        vtq.ctx.Clone(),
		order:      append([]verificationtoken.OrderOption{}, vtq.order...),
		inters:     append([]Interceptor{}, vtq.inters...),
		predicates: append([]predicate.VerificationToken{}, vtq.predicates...),
		withOwner:  vtq.withOwner.Clone(),
		// clone intermediate query.
		sql:  vtq.sql.Clone(),
		path: vtq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (vtq *VerificationTokenQuery) WithOwner(opts ...func(*UserQuery)) *VerificationTokenQuery {
	query := (&UserClient{config: vtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vtq.withOwner = query
	return vtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VerificationToken.Query().
//		GroupBy(verificationtoken.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vtq *VerificationTokenQuery) GroupBy(field string, fields ...string) *VerificationTokenGroupBy {
	vtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VerificationTokenGroupBy{build: vtq}
	grbuild.flds = &vtq.ctx.Fields
	grbuild.label = verificationtoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VerificationToken.Query().
//		Select(verificationtoken.FieldCreatedAt).
//		Scan(ctx, &v)
func (vtq *VerificationTokenQuery) Select(fields ...string) *VerificationTokenSelect {
	vtq.ctx.Fields = append(vtq.ctx.Fields, fields...)
	sbuild := &VerificationTokenSelect{VerificationTokenQuery: vtq}
	sbuild.label = verificationtoken.Label
	sbuild.flds, sbuild.scan = &vtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VerificationTokenSelect configured with the given aggregations.
func (vtq *VerificationTokenQuery) Aggregate(fns ...AggregateFunc) *VerificationTokenSelect {
	return vtq.Select().Aggregate(fns...)
}

func (vtq *VerificationTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vtq); err != nil {
				return err
			}
		}
	}
	for _, f := range vtq.ctx.Fields {
		if !verificationtoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vtq.path != nil {
		prev, err := vtq.path(ctx)
		if err != nil {
			return err
		}
		vtq.sql = prev
	}
	return nil
}

func (vtq *VerificationTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VerificationToken, error) {
	var (
		nodes       = []*VerificationToken{}
		withFKs     = vtq.withFKs
		_spec       = vtq.querySpec()
		loadedTypes = [1]bool{
			vtq.withOwner != nil,
		}
	)
	if vtq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, verificationtoken.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VerificationToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VerificationToken{config: vtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vtq.withOwner; query != nil {
		if err := vtq.loadOwner(ctx, query, nodes, nil,
			func(n *VerificationToken, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vtq *VerificationTokenQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*VerificationToken, init func(*VerificationToken), assign func(*VerificationToken, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*VerificationToken)
	for i := range nodes {
		if nodes[i].user_verification_token == nil {
			continue
		}
		fk := *nodes[i].user_verification_token
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_verification_token" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vtq *VerificationTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vtq.querySpec()
	_spec.Node.Columns = vtq.ctx.Fields
	if len(vtq.ctx.Fields) > 0 {
		_spec.Unique = vtq.ctx.Unique != nil && *vtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vtq.driver, _spec)
}

func (vtq *VerificationTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(verificationtoken.Table, verificationtoken.Columns, sqlgraph.NewFieldSpec(verificationtoken.FieldID, field.TypeUUID))
	_spec.From = vtq.sql
	if unique := vtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vtq.path != nil {
		_spec.Unique = true
	}
	if fields := vtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verificationtoken.FieldID)
		for i := range fields {
			if fields[i] != verificationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vtq *VerificationTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vtq.driver.Dialect())
	t1 := builder.Table(verificationtoken.Table)
	columns := vtq.ctx.Fields
	if len(columns) == 0 {
		columns = verificationtoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vtq.sql != nil {
		selector = vtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vtq.ctx.Unique != nil && *vtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vtq.predicates {
		p(selector)
	}
	for _, p := range vtq.order {
		p(selector)
	}
	if offset := vtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VerificationTokenGroupBy is the group-by builder for VerificationToken entities.
type VerificationTokenGroupBy struct {
	selector
	build *VerificationTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vtgb *VerificationTokenGroupBy) Aggregate(fns ...AggregateFunc) *VerificationTokenGroupBy {
	vtgb.fns = append(vtgb.fns, fns...)
	return vtgb
}

// Scan applies the selector query and scans the result into the given value.
func (vtgb *VerificationTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vtgb.build.ctx, ent.OpQueryGroupBy)
	if err := vtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VerificationTokenQuery, *VerificationTokenGroupBy](ctx, vtgb.build, vtgb, vtgb.build.inters, v)
}

func (vtgb *VerificationTokenGroupBy) sqlScan(ctx context.Context, root *VerificationTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vtgb.fns))
	for _, fn := range vtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vtgb.flds)+len(vtgb.fns))
		for _, f := range *vtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VerificationTokenSelect is the builder for selecting fields of VerificationToken entities.
type VerificationTokenSelect struct {
	*VerificationTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vts *VerificationTokenSelect) Aggregate(fns ...AggregateFunc) *VerificationTokenSelect {
	vts.fns = append(vts.fns, fns...)
	return vts
}

// Scan applies the selector query and scans the result into the given value.
func (vts *VerificationTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vts.ctx, ent.OpQuerySelect)
	if err := vts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VerificationTokenQuery, *VerificationTokenSelect](ctx, vts.VerificationTokenQuery, vts, vts.inters, v)
}

func (vts *VerificationTokenSelect) sqlScan(ctx context.Context, root *VerificationTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vts.fns))
	for _, fn := range vts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
