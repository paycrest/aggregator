// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/senderordertoken"
)

// SenderOrderTokenDelete is the builder for deleting a SenderOrderToken entity.
type SenderOrderTokenDelete struct {
	config
	hooks    []Hook
	mutation *SenderOrderTokenMutation
}

// Where appends a list predicates to the SenderOrderTokenDelete builder.
func (sotd *SenderOrderTokenDelete) Where(ps ...predicate.SenderOrderToken) *SenderOrderTokenDelete {
	sotd.mutation.Where(ps...)
	return sotd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sotd *SenderOrderTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sotd.sqlExec, sotd.mutation, sotd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sotd *SenderOrderTokenDelete) ExecX(ctx context.Context) int {
	n, err := sotd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sotd *SenderOrderTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(senderordertoken.Table, sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt))
	if ps := sotd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sotd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sotd.mutation.done = true
	return affected, err
}

// SenderOrderTokenDeleteOne is the builder for deleting a single SenderOrderToken entity.
type SenderOrderTokenDeleteOne struct {
	sotd *SenderOrderTokenDelete
}

// Where appends a list predicates to the SenderOrderTokenDelete builder.
func (sotdo *SenderOrderTokenDeleteOne) Where(ps ...predicate.SenderOrderToken) *SenderOrderTokenDeleteOne {
	sotdo.sotd.mutation.Where(ps...)
	return sotdo
}

// Exec executes the deletion query.
func (sotdo *SenderOrderTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := sotdo.sotd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{senderordertoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sotdo *SenderOrderTokenDeleteOne) ExecX(ctx context.Context) {
	if err := sotdo.Exec(ctx); err != nil {
		panic(err)
	}
}
