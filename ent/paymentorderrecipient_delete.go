// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/paymentorderrecipient"
	"github.com/paycrest/aggregator/ent/predicate"
)

// PaymentOrderRecipientDelete is the builder for deleting a PaymentOrderRecipient entity.
type PaymentOrderRecipientDelete struct {
	config
	hooks    []Hook
	mutation *PaymentOrderRecipientMutation
}

// Where appends a list predicates to the PaymentOrderRecipientDelete builder.
func (pord *PaymentOrderRecipientDelete) Where(ps ...predicate.PaymentOrderRecipient) *PaymentOrderRecipientDelete {
	pord.mutation.Where(ps...)
	return pord
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pord *PaymentOrderRecipientDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pord.sqlExec, pord.mutation, pord.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pord *PaymentOrderRecipientDelete) ExecX(ctx context.Context) int {
	n, err := pord.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pord *PaymentOrderRecipientDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(paymentorderrecipient.Table, sqlgraph.NewFieldSpec(paymentorderrecipient.FieldID, field.TypeInt))
	if ps := pord.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pord.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pord.mutation.done = true
	return affected, err
}

// PaymentOrderRecipientDeleteOne is the builder for deleting a single PaymentOrderRecipient entity.
type PaymentOrderRecipientDeleteOne struct {
	pord *PaymentOrderRecipientDelete
}

// Where appends a list predicates to the PaymentOrderRecipientDelete builder.
func (pordo *PaymentOrderRecipientDeleteOne) Where(ps ...predicate.PaymentOrderRecipient) *PaymentOrderRecipientDeleteOne {
	pordo.pord.mutation.Where(ps...)
	return pordo
}

// Exec executes the deletion query.
func (pordo *PaymentOrderRecipientDeleteOne) Exec(ctx context.Context) error {
	n, err := pordo.pord.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{paymentorderrecipient.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pordo *PaymentOrderRecipientDeleteOne) ExecX(ctx context.Context) {
	if err := pordo.Exec(ctx); err != nil {
		panic(err)
	}
}
