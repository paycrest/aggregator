// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/identityverificationrequest"
	"github.com/paycrest/aggregator/ent/predicate"
)

// IdentityVerificationRequestUpdate is the builder for updating IdentityVerificationRequest entities.
type IdentityVerificationRequestUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityVerificationRequestMutation
}

// Where appends a list predicates to the IdentityVerificationRequestUpdate builder.
func (ivru *IdentityVerificationRequestUpdate) Where(ps ...predicate.IdentityVerificationRequest) *IdentityVerificationRequestUpdate {
	ivru.mutation.Where(ps...)
	return ivru
}

// SetWalletAddress sets the "wallet_address" field.
func (ivru *IdentityVerificationRequestUpdate) SetWalletAddress(s string) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetWalletAddress(s)
	return ivru
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableWalletAddress(s *string) *IdentityVerificationRequestUpdate {
	if s != nil {
		ivru.SetWalletAddress(*s)
	}
	return ivru
}

// SetWalletSignature sets the "wallet_signature" field.
func (ivru *IdentityVerificationRequestUpdate) SetWalletSignature(s string) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetWalletSignature(s)
	return ivru
}

// SetNillableWalletSignature sets the "wallet_signature" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableWalletSignature(s *string) *IdentityVerificationRequestUpdate {
	if s != nil {
		ivru.SetWalletSignature(*s)
	}
	return ivru
}

// SetPlatform sets the "platform" field.
func (ivru *IdentityVerificationRequestUpdate) SetPlatform(i identityverificationrequest.Platform) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetPlatform(i)
	return ivru
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillablePlatform(i *identityverificationrequest.Platform) *IdentityVerificationRequestUpdate {
	if i != nil {
		ivru.SetPlatform(*i)
	}
	return ivru
}

// SetPlatformRef sets the "platform_ref" field.
func (ivru *IdentityVerificationRequestUpdate) SetPlatformRef(s string) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetPlatformRef(s)
	return ivru
}

// SetNillablePlatformRef sets the "platform_ref" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillablePlatformRef(s *string) *IdentityVerificationRequestUpdate {
	if s != nil {
		ivru.SetPlatformRef(*s)
	}
	return ivru
}

// SetVerificationURL sets the "verification_url" field.
func (ivru *IdentityVerificationRequestUpdate) SetVerificationURL(s string) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetVerificationURL(s)
	return ivru
}

// SetNillableVerificationURL sets the "verification_url" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableVerificationURL(s *string) *IdentityVerificationRequestUpdate {
	if s != nil {
		ivru.SetVerificationURL(*s)
	}
	return ivru
}

// SetStatus sets the "status" field.
func (ivru *IdentityVerificationRequestUpdate) SetStatus(i identityverificationrequest.Status) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetStatus(i)
	return ivru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableStatus(i *identityverificationrequest.Status) *IdentityVerificationRequestUpdate {
	if i != nil {
		ivru.SetStatus(*i)
	}
	return ivru
}

// SetFeeReclaimed sets the "fee_reclaimed" field.
func (ivru *IdentityVerificationRequestUpdate) SetFeeReclaimed(b bool) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetFeeReclaimed(b)
	return ivru
}

// SetNillableFeeReclaimed sets the "fee_reclaimed" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableFeeReclaimed(b *bool) *IdentityVerificationRequestUpdate {
	if b != nil {
		ivru.SetFeeReclaimed(*b)
	}
	return ivru
}

// SetUpdatedAt sets the "updated_at" field.
func (ivru *IdentityVerificationRequestUpdate) SetUpdatedAt(t time.Time) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetUpdatedAt(t)
	return ivru
}

// SetLastURLCreatedAt sets the "last_url_created_at" field.
func (ivru *IdentityVerificationRequestUpdate) SetLastURLCreatedAt(t time.Time) *IdentityVerificationRequestUpdate {
	ivru.mutation.SetLastURLCreatedAt(t)
	return ivru
}

// SetNillableLastURLCreatedAt sets the "last_url_created_at" field if the given value is not nil.
func (ivru *IdentityVerificationRequestUpdate) SetNillableLastURLCreatedAt(t *time.Time) *IdentityVerificationRequestUpdate {
	if t != nil {
		ivru.SetLastURLCreatedAt(*t)
	}
	return ivru
}

// Mutation returns the IdentityVerificationRequestMutation object of the builder.
func (ivru *IdentityVerificationRequestUpdate) Mutation() *IdentityVerificationRequestMutation {
	return ivru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ivru *IdentityVerificationRequestUpdate) Save(ctx context.Context) (int, error) {
	ivru.defaults()
	return withHooks(ctx, ivru.sqlSave, ivru.mutation, ivru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivru *IdentityVerificationRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ivru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ivru *IdentityVerificationRequestUpdate) Exec(ctx context.Context) error {
	_, err := ivru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivru *IdentityVerificationRequestUpdate) ExecX(ctx context.Context) {
	if err := ivru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ivru *IdentityVerificationRequestUpdate) defaults() {
	if _, ok := ivru.mutation.UpdatedAt(); !ok {
		v := identityverificationrequest.UpdateDefaultUpdatedAt()
		ivru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivru *IdentityVerificationRequestUpdate) check() error {
	if v, ok := ivru.mutation.Platform(); ok {
		if err := identityverificationrequest.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.platform": %w`, err)}
		}
	}
	if v, ok := ivru.mutation.Status(); ok {
		if err := identityverificationrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.status": %w`, err)}
		}
	}
	return nil
}

func (ivru *IdentityVerificationRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ivru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identityverificationrequest.Table, identityverificationrequest.Columns, sqlgraph.NewFieldSpec(identityverificationrequest.FieldID, field.TypeUUID))
	if ps := ivru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivru.mutation.WalletAddress(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := ivru.mutation.WalletSignature(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletSignature, field.TypeString, value)
	}
	if value, ok := ivru.mutation.Platform(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := ivru.mutation.PlatformRef(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatformRef, field.TypeString, value)
	}
	if value, ok := ivru.mutation.VerificationURL(); ok {
		_spec.SetField(identityverificationrequest.FieldVerificationURL, field.TypeString, value)
	}
	if value, ok := ivru.mutation.Status(); ok {
		_spec.SetField(identityverificationrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ivru.mutation.FeeReclaimed(); ok {
		_spec.SetField(identityverificationrequest.FieldFeeReclaimed, field.TypeBool, value)
	}
	if value, ok := ivru.mutation.UpdatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ivru.mutation.LastURLCreatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldLastURLCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ivru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identityverificationrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ivru.mutation.done = true
	return n, nil
}

// IdentityVerificationRequestUpdateOne is the builder for updating a single IdentityVerificationRequest entity.
type IdentityVerificationRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityVerificationRequestMutation
}

// SetWalletAddress sets the "wallet_address" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetWalletAddress(s string) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetWalletAddress(s)
	return ivruo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableWalletAddress(s *string) *IdentityVerificationRequestUpdateOne {
	if s != nil {
		ivruo.SetWalletAddress(*s)
	}
	return ivruo
}

// SetWalletSignature sets the "wallet_signature" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetWalletSignature(s string) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetWalletSignature(s)
	return ivruo
}

// SetNillableWalletSignature sets the "wallet_signature" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableWalletSignature(s *string) *IdentityVerificationRequestUpdateOne {
	if s != nil {
		ivruo.SetWalletSignature(*s)
	}
	return ivruo
}

// SetPlatform sets the "platform" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetPlatform(i identityverificationrequest.Platform) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetPlatform(i)
	return ivruo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillablePlatform(i *identityverificationrequest.Platform) *IdentityVerificationRequestUpdateOne {
	if i != nil {
		ivruo.SetPlatform(*i)
	}
	return ivruo
}

// SetPlatformRef sets the "platform_ref" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetPlatformRef(s string) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetPlatformRef(s)
	return ivruo
}

// SetNillablePlatformRef sets the "platform_ref" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillablePlatformRef(s *string) *IdentityVerificationRequestUpdateOne {
	if s != nil {
		ivruo.SetPlatformRef(*s)
	}
	return ivruo
}

// SetVerificationURL sets the "verification_url" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetVerificationURL(s string) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetVerificationURL(s)
	return ivruo
}

// SetNillableVerificationURL sets the "verification_url" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableVerificationURL(s *string) *IdentityVerificationRequestUpdateOne {
	if s != nil {
		ivruo.SetVerificationURL(*s)
	}
	return ivruo
}

// SetStatus sets the "status" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetStatus(i identityverificationrequest.Status) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetStatus(i)
	return ivruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableStatus(i *identityverificationrequest.Status) *IdentityVerificationRequestUpdateOne {
	if i != nil {
		ivruo.SetStatus(*i)
	}
	return ivruo
}

// SetFeeReclaimed sets the "fee_reclaimed" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetFeeReclaimed(b bool) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetFeeReclaimed(b)
	return ivruo
}

// SetNillableFeeReclaimed sets the "fee_reclaimed" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableFeeReclaimed(b *bool) *IdentityVerificationRequestUpdateOne {
	if b != nil {
		ivruo.SetFeeReclaimed(*b)
	}
	return ivruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetUpdatedAt(t time.Time) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetUpdatedAt(t)
	return ivruo
}

// SetLastURLCreatedAt sets the "last_url_created_at" field.
func (ivruo *IdentityVerificationRequestUpdateOne) SetLastURLCreatedAt(t time.Time) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.SetLastURLCreatedAt(t)
	return ivruo
}

// SetNillableLastURLCreatedAt sets the "last_url_created_at" field if the given value is not nil.
func (ivruo *IdentityVerificationRequestUpdateOne) SetNillableLastURLCreatedAt(t *time.Time) *IdentityVerificationRequestUpdateOne {
	if t != nil {
		ivruo.SetLastURLCreatedAt(*t)
	}
	return ivruo
}

// Mutation returns the IdentityVerificationRequestMutation object of the builder.
func (ivruo *IdentityVerificationRequestUpdateOne) Mutation() *IdentityVerificationRequestMutation {
	return ivruo.mutation
}

// Where appends a list predicates to the IdentityVerificationRequestUpdate builder.
func (ivruo *IdentityVerificationRequestUpdateOne) Where(ps ...predicate.IdentityVerificationRequest) *IdentityVerificationRequestUpdateOne {
	ivruo.mutation.Where(ps...)
	return ivruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ivruo *IdentityVerificationRequestUpdateOne) Select(field string, fields ...string) *IdentityVerificationRequestUpdateOne {
	ivruo.fields = append([]string{field}, fields...)
	return ivruo
}

// Save executes the query and returns the updated IdentityVerificationRequest entity.
func (ivruo *IdentityVerificationRequestUpdateOne) Save(ctx context.Context) (*IdentityVerificationRequest, error) {
	ivruo.defaults()
	return withHooks(ctx, ivruo.sqlSave, ivruo.mutation, ivruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivruo *IdentityVerificationRequestUpdateOne) SaveX(ctx context.Context) *IdentityVerificationRequest {
	node, err := ivruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ivruo *IdentityVerificationRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ivruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivruo *IdentityVerificationRequestUpdateOne) ExecX(ctx context.Context) {
	if err := ivruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ivruo *IdentityVerificationRequestUpdateOne) defaults() {
	if _, ok := ivruo.mutation.UpdatedAt(); !ok {
		v := identityverificationrequest.UpdateDefaultUpdatedAt()
		ivruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivruo *IdentityVerificationRequestUpdateOne) check() error {
	if v, ok := ivruo.mutation.Platform(); ok {
		if err := identityverificationrequest.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.platform": %w`, err)}
		}
	}
	if v, ok := ivruo.mutation.Status(); ok {
		if err := identityverificationrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IdentityVerificationRequest.status": %w`, err)}
		}
	}
	return nil
}

func (ivruo *IdentityVerificationRequestUpdateOne) sqlSave(ctx context.Context) (_node *IdentityVerificationRequest, err error) {
	if err := ivruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identityverificationrequest.Table, identityverificationrequest.Columns, sqlgraph.NewFieldSpec(identityverificationrequest.FieldID, field.TypeUUID))
	id, ok := ivruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdentityVerificationRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ivruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identityverificationrequest.FieldID)
		for _, f := range fields {
			if !identityverificationrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identityverificationrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ivruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivruo.mutation.WalletAddress(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := ivruo.mutation.WalletSignature(); ok {
		_spec.SetField(identityverificationrequest.FieldWalletSignature, field.TypeString, value)
	}
	if value, ok := ivruo.mutation.Platform(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := ivruo.mutation.PlatformRef(); ok {
		_spec.SetField(identityverificationrequest.FieldPlatformRef, field.TypeString, value)
	}
	if value, ok := ivruo.mutation.VerificationURL(); ok {
		_spec.SetField(identityverificationrequest.FieldVerificationURL, field.TypeString, value)
	}
	if value, ok := ivruo.mutation.Status(); ok {
		_spec.SetField(identityverificationrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ivruo.mutation.FeeReclaimed(); ok {
		_spec.SetField(identityverificationrequest.FieldFeeReclaimed, field.TypeBool, value)
	}
	if value, ok := ivruo.mutation.UpdatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ivruo.mutation.LastURLCreatedAt(); ok {
		_spec.SetField(identityverificationrequest.FieldLastURLCreatedAt, field.TypeTime, value)
	}
	_node = &IdentityVerificationRequest{config: ivruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ivruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identityverificationrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ivruo.mutation.done = true
	return _node, nil
}
