// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/apikey"
	"github.com/paycrest/paycrest-protocol/ent/lockorderfulfillment"
	"github.com/paycrest/paycrest-protocol/ent/lockpaymentorder"
	"github.com/paycrest/paycrest-protocol/ent/network"
	"github.com/paycrest/paycrest-protocol/ent/paymentorder"
	"github.com/paycrest/paycrest-protocol/ent/paymentorderrecipient"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/provideravailability"
	"github.com/paycrest/paycrest-protocol/ent/providerordertoken"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
	"github.com/paycrest/paycrest-protocol/ent/providerprofile"
	"github.com/paycrest/paycrest-protocol/ent/providerrating"
	"github.com/paycrest/paycrest-protocol/ent/provisionbucket"
	"github.com/paycrest/paycrest-protocol/ent/receiveaddress"
	"github.com/paycrest/paycrest-protocol/ent/token"
	"github.com/paycrest/paycrest-protocol/ent/user"
	"github.com/paycrest/paycrest-protocol/ent/verificationtoken"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPIKey                    = "APIKey"
	TypeLockOrderFulfillment      = "LockOrderFulfillment"
	TypeLockPaymentOrder          = "LockPaymentOrder"
	TypeNetwork                   = "Network"
	TypePaymentOrder              = "PaymentOrder"
	TypePaymentOrderRecipient     = "PaymentOrderRecipient"
	TypeProviderAvailability      = "ProviderAvailability"
	TypeProviderOrderToken        = "ProviderOrderToken"
	TypeProviderOrderTokenAddress = "ProviderOrderTokenAddress"
	TypeProviderProfile           = "ProviderProfile"
	TypeProviderRating            = "ProviderRating"
	TypeProvisionBucket           = "ProvisionBucket"
	TypeReceiveAddress            = "ReceiveAddress"
	TypeToken                     = "Token"
	TypeUser                      = "User"
	TypeVerificationToken         = "VerificationToken"
)

// APIKeyMutation represents an operation that mutates the APIKey nodes in the graph.
type APIKeyMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	name                    *string
	scope                   *apikey.Scope
	secret                  *string
	is_active               *bool
	created_at              *time.Time
	clearedFields           map[string]struct{}
	owner                   *uuid.UUID
	clearedowner            bool
	provider_profile        *string
	clearedprovider_profile bool
	payment_orders          map[uuid.UUID]struct{}
	removedpayment_orders   map[uuid.UUID]struct{}
	clearedpayment_orders   bool
	done                    bool
	oldValue                func(context.Context) (*APIKey, error)
	predicates              []predicate.APIKey
}

var _ ent.Mutation = (*APIKeyMutation)(nil)

// apikeyOption allows management of the mutation configuration using functional options.
type apikeyOption func(*APIKeyMutation)

// newAPIKeyMutation creates new mutation for the APIKey entity.
func newAPIKeyMutation(c config, op Op, opts ...apikeyOption) *APIKeyMutation {
	m := &APIKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeAPIKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIKeyID sets the ID field of the mutation.
func withAPIKeyID(id uuid.UUID) apikeyOption {
	return func(m *APIKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *APIKey
		)
		m.oldValue = func(ctx context.Context) (*APIKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().APIKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPIKey sets the old APIKey of the mutation.
func withAPIKey(node *APIKey) apikeyOption {
	return func(m *APIKeyMutation) {
		m.oldValue = func(context.Context) (*APIKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of APIKey entities.
func (m *APIKeyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *APIKeyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *APIKeyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().APIKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *APIKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *APIKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *APIKeyMutation) ResetName() {
	m.name = nil
}

// SetScope sets the "scope" field.
func (m *APIKeyMutation) SetScope(a apikey.Scope) {
	m.scope = &a
}

// Scope returns the value of the "scope" field in the mutation.
func (m *APIKeyMutation) Scope() (r apikey.Scope, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldScope(ctx context.Context) (v apikey.Scope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *APIKeyMutation) ResetScope() {
	m.scope = nil
}

// SetSecret sets the "secret" field.
func (m *APIKeyMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *APIKeyMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *APIKeyMutation) ResetSecret() {
	m.secret = nil
}

// SetIsActive sets the "is_active" field.
func (m *APIKeyMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *APIKeyMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *APIKeyMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *APIKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *APIKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *APIKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *APIKeyMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *APIKeyMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *APIKeyMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *APIKeyMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *APIKeyMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetProviderProfileID sets the "provider_profile" edge to the ProviderProfile entity by id.
func (m *APIKeyMutation) SetProviderProfileID(id string) {
	m.provider_profile = &id
}

// ClearProviderProfile clears the "provider_profile" edge to the ProviderProfile entity.
func (m *APIKeyMutation) ClearProviderProfile() {
	m.clearedprovider_profile = true
}

// ProviderProfileCleared reports if the "provider_profile" edge to the ProviderProfile entity was cleared.
func (m *APIKeyMutation) ProviderProfileCleared() bool {
	return m.clearedprovider_profile
}

// ProviderProfileID returns the "provider_profile" edge ID in the mutation.
func (m *APIKeyMutation) ProviderProfileID() (id string, exists bool) {
	if m.provider_profile != nil {
		return *m.provider_profile, true
	}
	return
}

// ProviderProfileIDs returns the "provider_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderProfileID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) ProviderProfileIDs() (ids []string) {
	if id := m.provider_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderProfile resets all changes to the "provider_profile" edge.
func (m *APIKeyMutation) ResetProviderProfile() {
	m.provider_profile = nil
	m.clearedprovider_profile = false
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *APIKeyMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *APIKeyMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *APIKeyMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *APIKeyMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *APIKeyMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *APIKeyMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *APIKeyMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// Where appends a list predicates to the APIKeyMutation builder.
func (m *APIKeyMutation) Where(ps ...predicate.APIKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the APIKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *APIKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.APIKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *APIKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *APIKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (APIKey).
func (m *APIKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIKeyMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, apikey.FieldName)
	}
	if m.scope != nil {
		fields = append(fields, apikey.FieldScope)
	}
	if m.secret != nil {
		fields = append(fields, apikey.FieldSecret)
	}
	if m.is_active != nil {
		fields = append(fields, apikey.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, apikey.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apikey.FieldName:
		return m.Name()
	case apikey.FieldScope:
		return m.Scope()
	case apikey.FieldSecret:
		return m.Secret()
	case apikey.FieldIsActive:
		return m.IsActive()
	case apikey.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apikey.FieldName:
		return m.OldName(ctx)
	case apikey.FieldScope:
		return m.OldScope(ctx)
	case apikey.FieldSecret:
		return m.OldSecret(ctx)
	case apikey.FieldIsActive:
		return m.OldIsActive(ctx)
	case apikey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown APIKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apikey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apikey.FieldScope:
		v, ok := value.(apikey.Scope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case apikey.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case apikey.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case apikey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown APIKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown APIKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIKeyMutation) ResetField(name string) error {
	switch name {
	case apikey.FieldName:
		m.ResetName()
		return nil
	case apikey.FieldScope:
		m.ResetScope()
		return nil
	case apikey.FieldSecret:
		m.ResetSecret()
		return nil
	case apikey.FieldIsActive:
		m.ResetIsActive()
		return nil
	case apikey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, apikey.EdgeOwner)
	}
	if m.provider_profile != nil {
		edges = append(edges, apikey.EdgeProviderProfile)
	}
	if m.payment_orders != nil {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apikey.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgeProviderProfile:
		if id := m.provider_profile; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpayment_orders != nil {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case apikey.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, apikey.EdgeOwner)
	}
	if m.clearedprovider_profile {
		edges = append(edges, apikey.EdgeProviderProfile)
	}
	if m.clearedpayment_orders {
		edges = append(edges, apikey.EdgePaymentOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case apikey.EdgeOwner:
		return m.clearedowner
	case apikey.EdgeProviderProfile:
		return m.clearedprovider_profile
	case apikey.EdgePaymentOrders:
		return m.clearedpayment_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIKeyMutation) ClearEdge(name string) error {
	switch name {
	case apikey.EdgeOwner:
		m.ClearOwner()
		return nil
	case apikey.EdgeProviderProfile:
		m.ClearProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown APIKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIKeyMutation) ResetEdge(name string) error {
	switch name {
	case apikey.EdgeOwner:
		m.ResetOwner()
		return nil
	case apikey.EdgeProviderProfile:
		m.ResetProviderProfile()
		return nil
	case apikey.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	}
	return fmt.Errorf("unknown APIKey edge %s", name)
}

// LockOrderFulfillmentMutation represents an operation that mutates the LockOrderFulfillment nodes in the graph.
type LockOrderFulfillmentMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	updated_at       *time.Time
	tx_id            *string
	tx_receipt_image *string
	confirmations    *int
	addconfirmations *int
	clearedFields    map[string]struct{}
	_order           *uuid.UUID
	cleared_order    bool
	done             bool
	oldValue         func(context.Context) (*LockOrderFulfillment, error)
	predicates       []predicate.LockOrderFulfillment
}

var _ ent.Mutation = (*LockOrderFulfillmentMutation)(nil)

// lockorderfulfillmentOption allows management of the mutation configuration using functional options.
type lockorderfulfillmentOption func(*LockOrderFulfillmentMutation)

// newLockOrderFulfillmentMutation creates new mutation for the LockOrderFulfillment entity.
func newLockOrderFulfillmentMutation(c config, op Op, opts ...lockorderfulfillmentOption) *LockOrderFulfillmentMutation {
	m := &LockOrderFulfillmentMutation{
		config:        c,
		op:            op,
		typ:           TypeLockOrderFulfillment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLockOrderFulfillmentID sets the ID field of the mutation.
func withLockOrderFulfillmentID(id int) lockorderfulfillmentOption {
	return func(m *LockOrderFulfillmentMutation) {
		var (
			err   error
			once  sync.Once
			value *LockOrderFulfillment
		)
		m.oldValue = func(ctx context.Context) (*LockOrderFulfillment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LockOrderFulfillment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLockOrderFulfillment sets the old LockOrderFulfillment of the mutation.
func withLockOrderFulfillment(node *LockOrderFulfillment) lockorderfulfillmentOption {
	return func(m *LockOrderFulfillmentMutation) {
		m.oldValue = func(context.Context) (*LockOrderFulfillment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LockOrderFulfillmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LockOrderFulfillmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LockOrderFulfillmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LockOrderFulfillmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LockOrderFulfillment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LockOrderFulfillmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LockOrderFulfillmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LockOrderFulfillmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LockOrderFulfillmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LockOrderFulfillmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LockOrderFulfillmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTxID sets the "tx_id" field.
func (m *LockOrderFulfillmentMutation) SetTxID(s string) {
	m.tx_id = &s
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *LockOrderFulfillmentMutation) TxID() (r string, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldTxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *LockOrderFulfillmentMutation) ResetTxID() {
	m.tx_id = nil
}

// SetTxReceiptImage sets the "tx_receipt_image" field.
func (m *LockOrderFulfillmentMutation) SetTxReceiptImage(s string) {
	m.tx_receipt_image = &s
}

// TxReceiptImage returns the value of the "tx_receipt_image" field in the mutation.
func (m *LockOrderFulfillmentMutation) TxReceiptImage() (r string, exists bool) {
	v := m.tx_receipt_image
	if v == nil {
		return
	}
	return *v, true
}

// OldTxReceiptImage returns the old "tx_receipt_image" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldTxReceiptImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxReceiptImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxReceiptImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxReceiptImage: %w", err)
	}
	return oldValue.TxReceiptImage, nil
}

// ResetTxReceiptImage resets all changes to the "tx_receipt_image" field.
func (m *LockOrderFulfillmentMutation) ResetTxReceiptImage() {
	m.tx_receipt_image = nil
}

// SetConfirmations sets the "confirmations" field.
func (m *LockOrderFulfillmentMutation) SetConfirmations(i int) {
	m.confirmations = &i
	m.addconfirmations = nil
}

// Confirmations returns the value of the "confirmations" field in the mutation.
func (m *LockOrderFulfillmentMutation) Confirmations() (r int, exists bool) {
	v := m.confirmations
	if v == nil {
		return
	}
	return *v, true
}

// OldConfirmations returns the old "confirmations" field's value of the LockOrderFulfillment entity.
// If the LockOrderFulfillment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockOrderFulfillmentMutation) OldConfirmations(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfirmations is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfirmations requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfirmations: %w", err)
	}
	return oldValue.Confirmations, nil
}

// AddConfirmations adds i to the "confirmations" field.
func (m *LockOrderFulfillmentMutation) AddConfirmations(i int) {
	if m.addconfirmations != nil {
		*m.addconfirmations += i
	} else {
		m.addconfirmations = &i
	}
}

// AddedConfirmations returns the value that was added to the "confirmations" field in this mutation.
func (m *LockOrderFulfillmentMutation) AddedConfirmations() (r int, exists bool) {
	v := m.addconfirmations
	if v == nil {
		return
	}
	return *v, true
}

// ResetConfirmations resets all changes to the "confirmations" field.
func (m *LockOrderFulfillmentMutation) ResetConfirmations() {
	m.confirmations = nil
	m.addconfirmations = nil
}

// SetOrderID sets the "order" edge to the LockPaymentOrder entity by id.
func (m *LockOrderFulfillmentMutation) SetOrderID(id uuid.UUID) {
	m._order = &id
}

// ClearOrder clears the "order" edge to the LockPaymentOrder entity.
func (m *LockOrderFulfillmentMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the LockPaymentOrder entity was cleared.
func (m *LockOrderFulfillmentMutation) OrderCleared() bool {
	return m.cleared_order
}

// OrderID returns the "order" edge ID in the mutation.
func (m *LockOrderFulfillmentMutation) OrderID() (id uuid.UUID, exists bool) {
	if m._order != nil {
		return *m._order, true
	}
	return
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *LockOrderFulfillmentMutation) OrderIDs() (ids []uuid.UUID) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *LockOrderFulfillmentMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the LockOrderFulfillmentMutation builder.
func (m *LockOrderFulfillmentMutation) Where(ps ...predicate.LockOrderFulfillment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LockOrderFulfillmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LockOrderFulfillmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LockOrderFulfillment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LockOrderFulfillmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LockOrderFulfillmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LockOrderFulfillment).
func (m *LockOrderFulfillmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LockOrderFulfillmentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, lockorderfulfillment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lockorderfulfillment.FieldUpdatedAt)
	}
	if m.tx_id != nil {
		fields = append(fields, lockorderfulfillment.FieldTxID)
	}
	if m.tx_receipt_image != nil {
		fields = append(fields, lockorderfulfillment.FieldTxReceiptImage)
	}
	if m.confirmations != nil {
		fields = append(fields, lockorderfulfillment.FieldConfirmations)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LockOrderFulfillmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		return m.CreatedAt()
	case lockorderfulfillment.FieldUpdatedAt:
		return m.UpdatedAt()
	case lockorderfulfillment.FieldTxID:
		return m.TxID()
	case lockorderfulfillment.FieldTxReceiptImage:
		return m.TxReceiptImage()
	case lockorderfulfillment.FieldConfirmations:
		return m.Confirmations()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LockOrderFulfillmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lockorderfulfillment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lockorderfulfillment.FieldTxID:
		return m.OldTxID(ctx)
	case lockorderfulfillment.FieldTxReceiptImage:
		return m.OldTxReceiptImage(ctx)
	case lockorderfulfillment.FieldConfirmations:
		return m.OldConfirmations(ctx)
	}
	return nil, fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockOrderFulfillmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lockorderfulfillment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lockorderfulfillment.FieldTxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case lockorderfulfillment.FieldTxReceiptImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxReceiptImage(v)
		return nil
	case lockorderfulfillment.FieldConfirmations:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfirmations(v)
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LockOrderFulfillmentMutation) AddedFields() []string {
	var fields []string
	if m.addconfirmations != nil {
		fields = append(fields, lockorderfulfillment.FieldConfirmations)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LockOrderFulfillmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lockorderfulfillment.FieldConfirmations:
		return m.AddedConfirmations()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockOrderFulfillmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lockorderfulfillment.FieldConfirmations:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConfirmations(v)
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LockOrderFulfillmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LockOrderFulfillmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LockOrderFulfillment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ResetField(name string) error {
	switch name {
	case lockorderfulfillment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lockorderfulfillment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lockorderfulfillment.FieldTxID:
		m.ResetTxID()
		return nil
	case lockorderfulfillment.FieldTxReceiptImage:
		m.ResetTxReceiptImage()
		return nil
	case lockorderfulfillment.FieldConfirmations:
		m.ResetConfirmations()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LockOrderFulfillmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._order != nil {
		edges = append(edges, lockorderfulfillment.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LockOrderFulfillmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LockOrderFulfillmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LockOrderFulfillmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LockOrderFulfillmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_order {
		edges = append(edges, lockorderfulfillment.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LockOrderFulfillmentMutation) EdgeCleared(name string) bool {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ClearEdge(name string) error {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LockOrderFulfillmentMutation) ResetEdge(name string) error {
	switch name {
	case lockorderfulfillment.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown LockOrderFulfillment edge %s", name)
}

// LockPaymentOrderMutation represents an operation that mutates the LockPaymentOrder nodes in the graph.
type LockPaymentOrderMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	created_at                 *time.Time
	updated_at                 *time.Time
	order_id                   *string
	amount                     *decimal.Decimal
	addamount                  *decimal.Decimal
	rate                       *decimal.Decimal
	addrate                    *decimal.Decimal
	tx_hash                    *string
	status                     *lockpaymentorder.Status
	block_number               *int64
	addblock_number            *int64
	institution                *string
	account_identifier         *string
	account_name               *string
	cancellation_count         *int
	addcancellation_count      *int
	cancellation_reasons       *[]string
	appendcancellation_reasons []string
	clearedFields              map[string]struct{}
	token                      *int
	clearedtoken               bool
	provision_bucket           *int
	clearedprovision_bucket    bool
	provider                   *string
	clearedprovider            bool
	fulfillment                *int
	clearedfulfillment         bool
	done                       bool
	oldValue                   func(context.Context) (*LockPaymentOrder, error)
	predicates                 []predicate.LockPaymentOrder
}

var _ ent.Mutation = (*LockPaymentOrderMutation)(nil)

// lockpaymentorderOption allows management of the mutation configuration using functional options.
type lockpaymentorderOption func(*LockPaymentOrderMutation)

// newLockPaymentOrderMutation creates new mutation for the LockPaymentOrder entity.
func newLockPaymentOrderMutation(c config, op Op, opts ...lockpaymentorderOption) *LockPaymentOrderMutation {
	m := &LockPaymentOrderMutation{
		config:        c,
		op:            op,
		typ:           TypeLockPaymentOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLockPaymentOrderID sets the ID field of the mutation.
func withLockPaymentOrderID(id uuid.UUID) lockpaymentorderOption {
	return func(m *LockPaymentOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *LockPaymentOrder
		)
		m.oldValue = func(ctx context.Context) (*LockPaymentOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LockPaymentOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLockPaymentOrder sets the old LockPaymentOrder of the mutation.
func withLockPaymentOrder(node *LockPaymentOrder) lockpaymentorderOption {
	return func(m *LockPaymentOrderMutation) {
		m.oldValue = func(context.Context) (*LockPaymentOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LockPaymentOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LockPaymentOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LockPaymentOrder entities.
func (m *LockPaymentOrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LockPaymentOrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LockPaymentOrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LockPaymentOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LockPaymentOrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LockPaymentOrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LockPaymentOrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LockPaymentOrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LockPaymentOrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LockPaymentOrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *LockPaymentOrderMutation) SetOrderID(s string) {
	m.order_id = &s
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *LockPaymentOrderMutation) OrderID() (r string, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldOrderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *LockPaymentOrderMutation) ResetOrderID() {
	m.order_id = nil
}

// SetAmount sets the "amount" field.
func (m *LockPaymentOrderMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *LockPaymentOrderMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *LockPaymentOrderMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *LockPaymentOrderMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *LockPaymentOrderMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetRate sets the "rate" field.
func (m *LockPaymentOrderMutation) SetRate(d decimal.Decimal) {
	m.rate = &d
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *LockPaymentOrderMutation) Rate() (r decimal.Decimal, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds d to the "rate" field.
func (m *LockPaymentOrderMutation) AddRate(d decimal.Decimal) {
	if m.addrate != nil {
		*m.addrate = m.addrate.Add(d)
	} else {
		m.addrate = &d
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *LockPaymentOrderMutation) AddedRate() (r decimal.Decimal, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate resets all changes to the "rate" field.
func (m *LockPaymentOrderMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *LockPaymentOrderMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *LockPaymentOrderMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *LockPaymentOrderMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[lockpaymentorder.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *LockPaymentOrderMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[lockpaymentorder.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *LockPaymentOrderMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, lockpaymentorder.FieldTxHash)
}

// SetStatus sets the "status" field.
func (m *LockPaymentOrderMutation) SetStatus(l lockpaymentorder.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LockPaymentOrderMutation) Status() (r lockpaymentorder.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldStatus(ctx context.Context) (v lockpaymentorder.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LockPaymentOrderMutation) ResetStatus() {
	m.status = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *LockPaymentOrderMutation) SetBlockNumber(i int64) {
	m.block_number = &i
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *LockPaymentOrderMutation) BlockNumber() (r int64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldBlockNumber(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds i to the "block_number" field.
func (m *LockPaymentOrderMutation) AddBlockNumber(i int64) {
	if m.addblock_number != nil {
		*m.addblock_number += i
	} else {
		m.addblock_number = &i
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *LockPaymentOrderMutation) AddedBlockNumber() (r int64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *LockPaymentOrderMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetInstitution sets the "institution" field.
func (m *LockPaymentOrderMutation) SetInstitution(s string) {
	m.institution = &s
}

// Institution returns the value of the "institution" field in the mutation.
func (m *LockPaymentOrderMutation) Institution() (r string, exists bool) {
	v := m.institution
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitution returns the old "institution" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldInstitution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitution: %w", err)
	}
	return oldValue.Institution, nil
}

// ResetInstitution resets all changes to the "institution" field.
func (m *LockPaymentOrderMutation) ResetInstitution() {
	m.institution = nil
}

// SetAccountIdentifier sets the "account_identifier" field.
func (m *LockPaymentOrderMutation) SetAccountIdentifier(s string) {
	m.account_identifier = &s
}

// AccountIdentifier returns the value of the "account_identifier" field in the mutation.
func (m *LockPaymentOrderMutation) AccountIdentifier() (r string, exists bool) {
	v := m.account_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountIdentifier returns the old "account_identifier" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAccountIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountIdentifier: %w", err)
	}
	return oldValue.AccountIdentifier, nil
}

// ResetAccountIdentifier resets all changes to the "account_identifier" field.
func (m *LockPaymentOrderMutation) ResetAccountIdentifier() {
	m.account_identifier = nil
}

// SetAccountName sets the "account_name" field.
func (m *LockPaymentOrderMutation) SetAccountName(s string) {
	m.account_name = &s
}

// AccountName returns the value of the "account_name" field in the mutation.
func (m *LockPaymentOrderMutation) AccountName() (r string, exists bool) {
	v := m.account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountName returns the old "account_name" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldAccountName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountName: %w", err)
	}
	return oldValue.AccountName, nil
}

// ResetAccountName resets all changes to the "account_name" field.
func (m *LockPaymentOrderMutation) ResetAccountName() {
	m.account_name = nil
}

// SetCancellationCount sets the "cancellation_count" field.
func (m *LockPaymentOrderMutation) SetCancellationCount(i int) {
	m.cancellation_count = &i
	m.addcancellation_count = nil
}

// CancellationCount returns the value of the "cancellation_count" field in the mutation.
func (m *LockPaymentOrderMutation) CancellationCount() (r int, exists bool) {
	v := m.cancellation_count
	if v == nil {
		return
	}
	return *v, true
}

// OldCancellationCount returns the old "cancellation_count" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCancellationCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancellationCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancellationCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancellationCount: %w", err)
	}
	return oldValue.CancellationCount, nil
}

// AddCancellationCount adds i to the "cancellation_count" field.
func (m *LockPaymentOrderMutation) AddCancellationCount(i int) {
	if m.addcancellation_count != nil {
		*m.addcancellation_count += i
	} else {
		m.addcancellation_count = &i
	}
}

// AddedCancellationCount returns the value that was added to the "cancellation_count" field in this mutation.
func (m *LockPaymentOrderMutation) AddedCancellationCount() (r int, exists bool) {
	v := m.addcancellation_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetCancellationCount resets all changes to the "cancellation_count" field.
func (m *LockPaymentOrderMutation) ResetCancellationCount() {
	m.cancellation_count = nil
	m.addcancellation_count = nil
}

// SetCancellationReasons sets the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) SetCancellationReasons(s []string) {
	m.cancellation_reasons = &s
	m.appendcancellation_reasons = nil
}

// CancellationReasons returns the value of the "cancellation_reasons" field in the mutation.
func (m *LockPaymentOrderMutation) CancellationReasons() (r []string, exists bool) {
	v := m.cancellation_reasons
	if v == nil {
		return
	}
	return *v, true
}

// OldCancellationReasons returns the old "cancellation_reasons" field's value of the LockPaymentOrder entity.
// If the LockPaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LockPaymentOrderMutation) OldCancellationReasons(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancellationReasons is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancellationReasons requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancellationReasons: %w", err)
	}
	return oldValue.CancellationReasons, nil
}

// AppendCancellationReasons adds s to the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) AppendCancellationReasons(s []string) {
	m.appendcancellation_reasons = append(m.appendcancellation_reasons, s...)
}

// AppendedCancellationReasons returns the list of values that were appended to the "cancellation_reasons" field in this mutation.
func (m *LockPaymentOrderMutation) AppendedCancellationReasons() ([]string, bool) {
	if len(m.appendcancellation_reasons) == 0 {
		return nil, false
	}
	return m.appendcancellation_reasons, true
}

// ResetCancellationReasons resets all changes to the "cancellation_reasons" field.
func (m *LockPaymentOrderMutation) ResetCancellationReasons() {
	m.cancellation_reasons = nil
	m.appendcancellation_reasons = nil
}

// SetTokenID sets the "token" edge to the Token entity by id.
func (m *LockPaymentOrderMutation) SetTokenID(id int) {
	m.token = &id
}

// ClearToken clears the "token" edge to the Token entity.
func (m *LockPaymentOrderMutation) ClearToken() {
	m.clearedtoken = true
}

// TokenCleared reports if the "token" edge to the Token entity was cleared.
func (m *LockPaymentOrderMutation) TokenCleared() bool {
	return m.clearedtoken
}

// TokenID returns the "token" edge ID in the mutation.
func (m *LockPaymentOrderMutation) TokenID() (id int, exists bool) {
	if m.token != nil {
		return *m.token, true
	}
	return
}

// TokenIDs returns the "token" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) TokenIDs() (ids []int) {
	if id := m.token; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToken resets all changes to the "token" edge.
func (m *LockPaymentOrderMutation) ResetToken() {
	m.token = nil
	m.clearedtoken = false
}

// SetProvisionBucketID sets the "provision_bucket" edge to the ProvisionBucket entity by id.
func (m *LockPaymentOrderMutation) SetProvisionBucketID(id int) {
	m.provision_bucket = &id
}

// ClearProvisionBucket clears the "provision_bucket" edge to the ProvisionBucket entity.
func (m *LockPaymentOrderMutation) ClearProvisionBucket() {
	m.clearedprovision_bucket = true
}

// ProvisionBucketCleared reports if the "provision_bucket" edge to the ProvisionBucket entity was cleared.
func (m *LockPaymentOrderMutation) ProvisionBucketCleared() bool {
	return m.clearedprovision_bucket
}

// ProvisionBucketID returns the "provision_bucket" edge ID in the mutation.
func (m *LockPaymentOrderMutation) ProvisionBucketID() (id int, exists bool) {
	if m.provision_bucket != nil {
		return *m.provision_bucket, true
	}
	return
}

// ProvisionBucketIDs returns the "provision_bucket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProvisionBucketID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) ProvisionBucketIDs() (ids []int) {
	if id := m.provision_bucket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvisionBucket resets all changes to the "provision_bucket" edge.
func (m *LockPaymentOrderMutation) ResetProvisionBucket() {
	m.provision_bucket = nil
	m.clearedprovision_bucket = false
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by id.
func (m *LockPaymentOrderMutation) SetProviderID(id string) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (m *LockPaymentOrderMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderProfile entity was cleared.
func (m *LockPaymentOrderMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *LockPaymentOrderMutation) ProviderID() (id string, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) ProviderIDs() (ids []string) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *LockPaymentOrderMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// SetFulfillmentID sets the "fulfillment" edge to the LockOrderFulfillment entity by id.
func (m *LockPaymentOrderMutation) SetFulfillmentID(id int) {
	m.fulfillment = &id
}

// ClearFulfillment clears the "fulfillment" edge to the LockOrderFulfillment entity.
func (m *LockPaymentOrderMutation) ClearFulfillment() {
	m.clearedfulfillment = true
}

// FulfillmentCleared reports if the "fulfillment" edge to the LockOrderFulfillment entity was cleared.
func (m *LockPaymentOrderMutation) FulfillmentCleared() bool {
	return m.clearedfulfillment
}

// FulfillmentID returns the "fulfillment" edge ID in the mutation.
func (m *LockPaymentOrderMutation) FulfillmentID() (id int, exists bool) {
	if m.fulfillment != nil {
		return *m.fulfillment, true
	}
	return
}

// FulfillmentIDs returns the "fulfillment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FulfillmentID instead. It exists only for internal usage by the builders.
func (m *LockPaymentOrderMutation) FulfillmentIDs() (ids []int) {
	if id := m.fulfillment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFulfillment resets all changes to the "fulfillment" edge.
func (m *LockPaymentOrderMutation) ResetFulfillment() {
	m.fulfillment = nil
	m.clearedfulfillment = false
}

// Where appends a list predicates to the LockPaymentOrderMutation builder.
func (m *LockPaymentOrderMutation) Where(ps ...predicate.LockPaymentOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LockPaymentOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LockPaymentOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LockPaymentOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LockPaymentOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LockPaymentOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LockPaymentOrder).
func (m *LockPaymentOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LockPaymentOrderMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, lockpaymentorder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lockpaymentorder.FieldUpdatedAt)
	}
	if m.order_id != nil {
		fields = append(fields, lockpaymentorder.FieldOrderID)
	}
	if m.amount != nil {
		fields = append(fields, lockpaymentorder.FieldAmount)
	}
	if m.rate != nil {
		fields = append(fields, lockpaymentorder.FieldRate)
	}
	if m.tx_hash != nil {
		fields = append(fields, lockpaymentorder.FieldTxHash)
	}
	if m.status != nil {
		fields = append(fields, lockpaymentorder.FieldStatus)
	}
	if m.block_number != nil {
		fields = append(fields, lockpaymentorder.FieldBlockNumber)
	}
	if m.institution != nil {
		fields = append(fields, lockpaymentorder.FieldInstitution)
	}
	if m.account_identifier != nil {
		fields = append(fields, lockpaymentorder.FieldAccountIdentifier)
	}
	if m.account_name != nil {
		fields = append(fields, lockpaymentorder.FieldAccountName)
	}
	if m.cancellation_count != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationCount)
	}
	if m.cancellation_reasons != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationReasons)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LockPaymentOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		return m.CreatedAt()
	case lockpaymentorder.FieldUpdatedAt:
		return m.UpdatedAt()
	case lockpaymentorder.FieldOrderID:
		return m.OrderID()
	case lockpaymentorder.FieldAmount:
		return m.Amount()
	case lockpaymentorder.FieldRate:
		return m.Rate()
	case lockpaymentorder.FieldTxHash:
		return m.TxHash()
	case lockpaymentorder.FieldStatus:
		return m.Status()
	case lockpaymentorder.FieldBlockNumber:
		return m.BlockNumber()
	case lockpaymentorder.FieldInstitution:
		return m.Institution()
	case lockpaymentorder.FieldAccountIdentifier:
		return m.AccountIdentifier()
	case lockpaymentorder.FieldAccountName:
		return m.AccountName()
	case lockpaymentorder.FieldCancellationCount:
		return m.CancellationCount()
	case lockpaymentorder.FieldCancellationReasons:
		return m.CancellationReasons()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LockPaymentOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lockpaymentorder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lockpaymentorder.FieldOrderID:
		return m.OldOrderID(ctx)
	case lockpaymentorder.FieldAmount:
		return m.OldAmount(ctx)
	case lockpaymentorder.FieldRate:
		return m.OldRate(ctx)
	case lockpaymentorder.FieldTxHash:
		return m.OldTxHash(ctx)
	case lockpaymentorder.FieldStatus:
		return m.OldStatus(ctx)
	case lockpaymentorder.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case lockpaymentorder.FieldInstitution:
		return m.OldInstitution(ctx)
	case lockpaymentorder.FieldAccountIdentifier:
		return m.OldAccountIdentifier(ctx)
	case lockpaymentorder.FieldAccountName:
		return m.OldAccountName(ctx)
	case lockpaymentorder.FieldCancellationCount:
		return m.OldCancellationCount(ctx)
	case lockpaymentorder.FieldCancellationReasons:
		return m.OldCancellationReasons(ctx)
	}
	return nil, fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockPaymentOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lockpaymentorder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lockpaymentorder.FieldOrderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case lockpaymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case lockpaymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	case lockpaymentorder.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case lockpaymentorder.FieldStatus:
		v, ok := value.(lockpaymentorder.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case lockpaymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case lockpaymentorder.FieldInstitution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitution(v)
		return nil
	case lockpaymentorder.FieldAccountIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountIdentifier(v)
		return nil
	case lockpaymentorder.FieldAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountName(v)
		return nil
	case lockpaymentorder.FieldCancellationCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancellationCount(v)
		return nil
	case lockpaymentorder.FieldCancellationReasons:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancellationReasons(v)
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LockPaymentOrderMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, lockpaymentorder.FieldAmount)
	}
	if m.addrate != nil {
		fields = append(fields, lockpaymentorder.FieldRate)
	}
	if m.addblock_number != nil {
		fields = append(fields, lockpaymentorder.FieldBlockNumber)
	}
	if m.addcancellation_count != nil {
		fields = append(fields, lockpaymentorder.FieldCancellationCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LockPaymentOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lockpaymentorder.FieldAmount:
		return m.AddedAmount()
	case lockpaymentorder.FieldRate:
		return m.AddedRate()
	case lockpaymentorder.FieldBlockNumber:
		return m.AddedBlockNumber()
	case lockpaymentorder.FieldCancellationCount:
		return m.AddedCancellationCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LockPaymentOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lockpaymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case lockpaymentorder.FieldRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	case lockpaymentorder.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	case lockpaymentorder.FieldCancellationCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCancellationCount(v)
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LockPaymentOrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lockpaymentorder.FieldTxHash) {
		fields = append(fields, lockpaymentorder.FieldTxHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LockPaymentOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LockPaymentOrderMutation) ClearField(name string) error {
	switch name {
	case lockpaymentorder.FieldTxHash:
		m.ClearTxHash()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LockPaymentOrderMutation) ResetField(name string) error {
	switch name {
	case lockpaymentorder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lockpaymentorder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lockpaymentorder.FieldOrderID:
		m.ResetOrderID()
		return nil
	case lockpaymentorder.FieldAmount:
		m.ResetAmount()
		return nil
	case lockpaymentorder.FieldRate:
		m.ResetRate()
		return nil
	case lockpaymentorder.FieldTxHash:
		m.ResetTxHash()
		return nil
	case lockpaymentorder.FieldStatus:
		m.ResetStatus()
		return nil
	case lockpaymentorder.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case lockpaymentorder.FieldInstitution:
		m.ResetInstitution()
		return nil
	case lockpaymentorder.FieldAccountIdentifier:
		m.ResetAccountIdentifier()
		return nil
	case lockpaymentorder.FieldAccountName:
		m.ResetAccountName()
		return nil
	case lockpaymentorder.FieldCancellationCount:
		m.ResetCancellationCount()
		return nil
	case lockpaymentorder.FieldCancellationReasons:
		m.ResetCancellationReasons()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LockPaymentOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.token != nil {
		edges = append(edges, lockpaymentorder.EdgeToken)
	}
	if m.provision_bucket != nil {
		edges = append(edges, lockpaymentorder.EdgeProvisionBucket)
	}
	if m.provider != nil {
		edges = append(edges, lockpaymentorder.EdgeProvider)
	}
	if m.fulfillment != nil {
		edges = append(edges, lockpaymentorder.EdgeFulfillment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LockPaymentOrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lockpaymentorder.EdgeToken:
		if id := m.token; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeProvisionBucket:
		if id := m.provision_bucket; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case lockpaymentorder.EdgeFulfillment:
		if id := m.fulfillment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LockPaymentOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LockPaymentOrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LockPaymentOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtoken {
		edges = append(edges, lockpaymentorder.EdgeToken)
	}
	if m.clearedprovision_bucket {
		edges = append(edges, lockpaymentorder.EdgeProvisionBucket)
	}
	if m.clearedprovider {
		edges = append(edges, lockpaymentorder.EdgeProvider)
	}
	if m.clearedfulfillment {
		edges = append(edges, lockpaymentorder.EdgeFulfillment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LockPaymentOrderMutation) EdgeCleared(name string) bool {
	switch name {
	case lockpaymentorder.EdgeToken:
		return m.clearedtoken
	case lockpaymentorder.EdgeProvisionBucket:
		return m.clearedprovision_bucket
	case lockpaymentorder.EdgeProvider:
		return m.clearedprovider
	case lockpaymentorder.EdgeFulfillment:
		return m.clearedfulfillment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LockPaymentOrderMutation) ClearEdge(name string) error {
	switch name {
	case lockpaymentorder.EdgeToken:
		m.ClearToken()
		return nil
	case lockpaymentorder.EdgeProvisionBucket:
		m.ClearProvisionBucket()
		return nil
	case lockpaymentorder.EdgeProvider:
		m.ClearProvider()
		return nil
	case lockpaymentorder.EdgeFulfillment:
		m.ClearFulfillment()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LockPaymentOrderMutation) ResetEdge(name string) error {
	switch name {
	case lockpaymentorder.EdgeToken:
		m.ResetToken()
		return nil
	case lockpaymentorder.EdgeProvisionBucket:
		m.ResetProvisionBucket()
		return nil
	case lockpaymentorder.EdgeProvider:
		m.ResetProvider()
		return nil
	case lockpaymentorder.EdgeFulfillment:
		m.ResetFulfillment()
		return nil
	}
	return fmt.Errorf("unknown LockPaymentOrder edge %s", name)
}

// NetworkMutation represents an operation that mutates the Network nodes in the graph.
type NetworkMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	chain_id      *int64
	addchain_id   *int64
	identifier    *network.Identifier
	rpc_endpoint  *string
	is_testnet    *bool
	clearedFields map[string]struct{}
	tokens        map[int]struct{}
	removedtokens map[int]struct{}
	clearedtokens bool
	done          bool
	oldValue      func(context.Context) (*Network, error)
	predicates    []predicate.Network
}

var _ ent.Mutation = (*NetworkMutation)(nil)

// networkOption allows management of the mutation configuration using functional options.
type networkOption func(*NetworkMutation)

// newNetworkMutation creates new mutation for the Network entity.
func newNetworkMutation(c config, op Op, opts ...networkOption) *NetworkMutation {
	m := &NetworkMutation{
		config:        c,
		op:            op,
		typ:           TypeNetwork,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetworkID sets the ID field of the mutation.
func withNetworkID(id int) networkOption {
	return func(m *NetworkMutation) {
		var (
			err   error
			once  sync.Once
			value *Network
		)
		m.oldValue = func(ctx context.Context) (*Network, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Network.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetwork sets the old Network of the mutation.
func withNetwork(node *Network) networkOption {
	return func(m *NetworkMutation) {
		m.oldValue = func(context.Context) (*Network, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetworkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetworkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetworkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetworkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Network.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NetworkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NetworkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NetworkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NetworkMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NetworkMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NetworkMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChainID sets the "chain_id" field.
func (m *NetworkMutation) SetChainID(i int64) {
	m.chain_id = &i
	m.addchain_id = nil
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *NetworkMutation) ChainID() (r int64, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldChainID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// AddChainID adds i to the "chain_id" field.
func (m *NetworkMutation) AddChainID(i int64) {
	if m.addchain_id != nil {
		*m.addchain_id += i
	} else {
		m.addchain_id = &i
	}
}

// AddedChainID returns the value that was added to the "chain_id" field in this mutation.
func (m *NetworkMutation) AddedChainID() (r int64, exists bool) {
	v := m.addchain_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *NetworkMutation) ResetChainID() {
	m.chain_id = nil
	m.addchain_id = nil
}

// SetIdentifier sets the "identifier" field.
func (m *NetworkMutation) SetIdentifier(n network.Identifier) {
	m.identifier = &n
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *NetworkMutation) Identifier() (r network.Identifier, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldIdentifier(ctx context.Context) (v network.Identifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *NetworkMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (m *NetworkMutation) SetRPCEndpoint(s string) {
	m.rpc_endpoint = &s
}

// RPCEndpoint returns the value of the "rpc_endpoint" field in the mutation.
func (m *NetworkMutation) RPCEndpoint() (r string, exists bool) {
	v := m.rpc_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldRPCEndpoint returns the old "rpc_endpoint" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldRPCEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRPCEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRPCEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRPCEndpoint: %w", err)
	}
	return oldValue.RPCEndpoint, nil
}

// ResetRPCEndpoint resets all changes to the "rpc_endpoint" field.
func (m *NetworkMutation) ResetRPCEndpoint() {
	m.rpc_endpoint = nil
}

// SetIsTestnet sets the "is_testnet" field.
func (m *NetworkMutation) SetIsTestnet(b bool) {
	m.is_testnet = &b
}

// IsTestnet returns the value of the "is_testnet" field in the mutation.
func (m *NetworkMutation) IsTestnet() (r bool, exists bool) {
	v := m.is_testnet
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTestnet returns the old "is_testnet" field's value of the Network entity.
// If the Network object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMutation) OldIsTestnet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTestnet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTestnet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTestnet: %w", err)
	}
	return oldValue.IsTestnet, nil
}

// ResetIsTestnet resets all changes to the "is_testnet" field.
func (m *NetworkMutation) ResetIsTestnet() {
	m.is_testnet = nil
}

// AddTokenIDs adds the "tokens" edge to the Token entity by ids.
func (m *NetworkMutation) AddTokenIDs(ids ...int) {
	if m.tokens == nil {
		m.tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.tokens[ids[i]] = struct{}{}
	}
}

// ClearTokens clears the "tokens" edge to the Token entity.
func (m *NetworkMutation) ClearTokens() {
	m.clearedtokens = true
}

// TokensCleared reports if the "tokens" edge to the Token entity was cleared.
func (m *NetworkMutation) TokensCleared() bool {
	return m.clearedtokens
}

// RemoveTokenIDs removes the "tokens" edge to the Token entity by IDs.
func (m *NetworkMutation) RemoveTokenIDs(ids ...int) {
	if m.removedtokens == nil {
		m.removedtokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tokens, ids[i])
		m.removedtokens[ids[i]] = struct{}{}
	}
}

// RemovedTokens returns the removed IDs of the "tokens" edge to the Token entity.
func (m *NetworkMutation) RemovedTokensIDs() (ids []int) {
	for id := range m.removedtokens {
		ids = append(ids, id)
	}
	return
}

// TokensIDs returns the "tokens" edge IDs in the mutation.
func (m *NetworkMutation) TokensIDs() (ids []int) {
	for id := range m.tokens {
		ids = append(ids, id)
	}
	return
}

// ResetTokens resets all changes to the "tokens" edge.
func (m *NetworkMutation) ResetTokens() {
	m.tokens = nil
	m.clearedtokens = false
	m.removedtokens = nil
}

// Where appends a list predicates to the NetworkMutation builder.
func (m *NetworkMutation) Where(ps ...predicate.Network) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetworkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetworkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Network, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetworkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetworkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Network).
func (m *NetworkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetworkMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, network.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, network.FieldUpdatedAt)
	}
	if m.chain_id != nil {
		fields = append(fields, network.FieldChainID)
	}
	if m.identifier != nil {
		fields = append(fields, network.FieldIdentifier)
	}
	if m.rpc_endpoint != nil {
		fields = append(fields, network.FieldRPCEndpoint)
	}
	if m.is_testnet != nil {
		fields = append(fields, network.FieldIsTestnet)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetworkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case network.FieldCreatedAt:
		return m.CreatedAt()
	case network.FieldUpdatedAt:
		return m.UpdatedAt()
	case network.FieldChainID:
		return m.ChainID()
	case network.FieldIdentifier:
		return m.Identifier()
	case network.FieldRPCEndpoint:
		return m.RPCEndpoint()
	case network.FieldIsTestnet:
		return m.IsTestnet()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetworkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case network.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case network.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case network.FieldChainID:
		return m.OldChainID(ctx)
	case network.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case network.FieldRPCEndpoint:
		return m.OldRPCEndpoint(ctx)
	case network.FieldIsTestnet:
		return m.OldIsTestnet(ctx)
	}
	return nil, fmt.Errorf("unknown Network field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case network.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case network.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case network.FieldChainID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case network.FieldIdentifier:
		v, ok := value.(network.Identifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case network.FieldRPCEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRPCEndpoint(v)
		return nil
	case network.FieldIsTestnet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTestnet(v)
		return nil
	}
	return fmt.Errorf("unknown Network field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetworkMutation) AddedFields() []string {
	var fields []string
	if m.addchain_id != nil {
		fields = append(fields, network.FieldChainID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetworkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case network.FieldChainID:
		return m.AddedChainID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case network.FieldChainID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChainID(v)
		return nil
	}
	return fmt.Errorf("unknown Network numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetworkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetworkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetworkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Network nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetworkMutation) ResetField(name string) error {
	switch name {
	case network.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case network.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case network.FieldChainID:
		m.ResetChainID()
		return nil
	case network.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case network.FieldRPCEndpoint:
		m.ResetRPCEndpoint()
		return nil
	case network.FieldIsTestnet:
		m.ResetIsTestnet()
		return nil
	}
	return fmt.Errorf("unknown Network field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetworkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tokens != nil {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetworkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case network.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.tokens))
		for id := range m.tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetworkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtokens != nil {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetworkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case network.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.removedtokens))
		for id := range m.removedtokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetworkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtokens {
		edges = append(edges, network.EdgeTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetworkMutation) EdgeCleared(name string) bool {
	switch name {
	case network.EdgeTokens:
		return m.clearedtokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetworkMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Network unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetworkMutation) ResetEdge(name string) error {
	switch name {
	case network.EdgeTokens:
		m.ResetTokens()
		return nil
	}
	return fmt.Errorf("unknown Network edge %s", name)
}

// PaymentOrderMutation represents an operation that mutates the PaymentOrder nodes in the graph.
type PaymentOrderMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	amount                 *decimal.Decimal
	addamount              *decimal.Decimal
	amount_paid            *decimal.Decimal
	addamount_paid         *decimal.Decimal
	tx_hash                *string
	receive_address_text   *string
	status                 *paymentorder.Status
	last_used              *time.Time
	clearedFields          map[string]struct{}
	api_key                *uuid.UUID
	clearedapi_key         bool
	token                  *int
	clearedtoken           bool
	receive_address        *int
	clearedreceive_address bool
	recipient              *int
	clearedrecipient       bool
	done                   bool
	oldValue               func(context.Context) (*PaymentOrder, error)
	predicates             []predicate.PaymentOrder
}

var _ ent.Mutation = (*PaymentOrderMutation)(nil)

// paymentorderOption allows management of the mutation configuration using functional options.
type paymentorderOption func(*PaymentOrderMutation)

// newPaymentOrderMutation creates new mutation for the PaymentOrder entity.
func newPaymentOrderMutation(c config, op Op, opts ...paymentorderOption) *PaymentOrderMutation {
	m := &PaymentOrderMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentOrderID sets the ID field of the mutation.
func withPaymentOrderID(id uuid.UUID) paymentorderOption {
	return func(m *PaymentOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentOrder
		)
		m.oldValue = func(ctx context.Context) (*PaymentOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentOrder sets the old PaymentOrder of the mutation.
func withPaymentOrder(node *PaymentOrder) paymentorderOption {
	return func(m *PaymentOrderMutation) {
		m.oldValue = func(context.Context) (*PaymentOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentOrder entities.
func (m *PaymentOrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentOrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentOrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentOrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentOrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentOrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentOrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentOrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentOrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentOrderMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentOrderMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *PaymentOrderMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentOrderMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentOrderMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetAmountPaid sets the "amount_paid" field.
func (m *PaymentOrderMutation) SetAmountPaid(d decimal.Decimal) {
	m.amount_paid = &d
	m.addamount_paid = nil
}

// AmountPaid returns the value of the "amount_paid" field in the mutation.
func (m *PaymentOrderMutation) AmountPaid() (r decimal.Decimal, exists bool) {
	v := m.amount_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountPaid returns the old "amount_paid" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldAmountPaid(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountPaid: %w", err)
	}
	return oldValue.AmountPaid, nil
}

// AddAmountPaid adds d to the "amount_paid" field.
func (m *PaymentOrderMutation) AddAmountPaid(d decimal.Decimal) {
	if m.addamount_paid != nil {
		*m.addamount_paid = m.addamount_paid.Add(d)
	} else {
		m.addamount_paid = &d
	}
}

// AddedAmountPaid returns the value that was added to the "amount_paid" field in this mutation.
func (m *PaymentOrderMutation) AddedAmountPaid() (r decimal.Decimal, exists bool) {
	v := m.addamount_paid
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountPaid resets all changes to the "amount_paid" field.
func (m *PaymentOrderMutation) ResetAmountPaid() {
	m.amount_paid = nil
	m.addamount_paid = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *PaymentOrderMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *PaymentOrderMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *PaymentOrderMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[paymentorder.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *PaymentOrderMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *PaymentOrderMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, paymentorder.FieldTxHash)
}

// SetReceiveAddressText sets the "receive_address_text" field.
func (m *PaymentOrderMutation) SetReceiveAddressText(s string) {
	m.receive_address_text = &s
}

// ReceiveAddressText returns the value of the "receive_address_text" field in the mutation.
func (m *PaymentOrderMutation) ReceiveAddressText() (r string, exists bool) {
	v := m.receive_address_text
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiveAddressText returns the old "receive_address_text" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldReceiveAddressText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiveAddressText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiveAddressText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiveAddressText: %w", err)
	}
	return oldValue.ReceiveAddressText, nil
}

// ResetReceiveAddressText resets all changes to the "receive_address_text" field.
func (m *PaymentOrderMutation) ResetReceiveAddressText() {
	m.receive_address_text = nil
}

// SetStatus sets the "status" field.
func (m *PaymentOrderMutation) SetStatus(pa paymentorder.Status) {
	m.status = &pa
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentOrderMutation) Status() (r paymentorder.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldStatus(ctx context.Context) (v paymentorder.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentOrderMutation) ResetStatus() {
	m.status = nil
}

// SetLastUsed sets the "last_used" field.
func (m *PaymentOrderMutation) SetLastUsed(t time.Time) {
	m.last_used = &t
}

// LastUsed returns the value of the "last_used" field in the mutation.
func (m *PaymentOrderMutation) LastUsed() (r time.Time, exists bool) {
	v := m.last_used
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsed returns the old "last_used" field's value of the PaymentOrder entity.
// If the PaymentOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderMutation) OldLastUsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsed: %w", err)
	}
	return oldValue.LastUsed, nil
}

// ClearLastUsed clears the value of the "last_used" field.
func (m *PaymentOrderMutation) ClearLastUsed() {
	m.last_used = nil
	m.clearedFields[paymentorder.FieldLastUsed] = struct{}{}
}

// LastUsedCleared returns if the "last_used" field was cleared in this mutation.
func (m *PaymentOrderMutation) LastUsedCleared() bool {
	_, ok := m.clearedFields[paymentorder.FieldLastUsed]
	return ok
}

// ResetLastUsed resets all changes to the "last_used" field.
func (m *PaymentOrderMutation) ResetLastUsed() {
	m.last_used = nil
	delete(m.clearedFields, paymentorder.FieldLastUsed)
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by id.
func (m *PaymentOrderMutation) SetAPIKeyID(id uuid.UUID) {
	m.api_key = &id
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (m *PaymentOrderMutation) ClearAPIKey() {
	m.clearedapi_key = true
}

// APIKeyCleared reports if the "api_key" edge to the APIKey entity was cleared.
func (m *PaymentOrderMutation) APIKeyCleared() bool {
	return m.clearedapi_key
}

// APIKeyID returns the "api_key" edge ID in the mutation.
func (m *PaymentOrderMutation) APIKeyID() (id uuid.UUID, exists bool) {
	if m.api_key != nil {
		return *m.api_key, true
	}
	return
}

// APIKeyIDs returns the "api_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// APIKeyID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) APIKeyIDs() (ids []uuid.UUID) {
	if id := m.api_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAPIKey resets all changes to the "api_key" edge.
func (m *PaymentOrderMutation) ResetAPIKey() {
	m.api_key = nil
	m.clearedapi_key = false
}

// SetTokenID sets the "token" edge to the Token entity by id.
func (m *PaymentOrderMutation) SetTokenID(id int) {
	m.token = &id
}

// ClearToken clears the "token" edge to the Token entity.
func (m *PaymentOrderMutation) ClearToken() {
	m.clearedtoken = true
}

// TokenCleared reports if the "token" edge to the Token entity was cleared.
func (m *PaymentOrderMutation) TokenCleared() bool {
	return m.clearedtoken
}

// TokenID returns the "token" edge ID in the mutation.
func (m *PaymentOrderMutation) TokenID() (id int, exists bool) {
	if m.token != nil {
		return *m.token, true
	}
	return
}

// TokenIDs returns the "token" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) TokenIDs() (ids []int) {
	if id := m.token; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToken resets all changes to the "token" edge.
func (m *PaymentOrderMutation) ResetToken() {
	m.token = nil
	m.clearedtoken = false
}

// SetReceiveAddressID sets the "receive_address" edge to the ReceiveAddress entity by id.
func (m *PaymentOrderMutation) SetReceiveAddressID(id int) {
	m.receive_address = &id
}

// ClearReceiveAddress clears the "receive_address" edge to the ReceiveAddress entity.
func (m *PaymentOrderMutation) ClearReceiveAddress() {
	m.clearedreceive_address = true
}

// ReceiveAddressCleared reports if the "receive_address" edge to the ReceiveAddress entity was cleared.
func (m *PaymentOrderMutation) ReceiveAddressCleared() bool {
	return m.clearedreceive_address
}

// ReceiveAddressID returns the "receive_address" edge ID in the mutation.
func (m *PaymentOrderMutation) ReceiveAddressID() (id int, exists bool) {
	if m.receive_address != nil {
		return *m.receive_address, true
	}
	return
}

// ReceiveAddressIDs returns the "receive_address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiveAddressID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) ReceiveAddressIDs() (ids []int) {
	if id := m.receive_address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiveAddress resets all changes to the "receive_address" edge.
func (m *PaymentOrderMutation) ResetReceiveAddress() {
	m.receive_address = nil
	m.clearedreceive_address = false
}

// SetRecipientID sets the "recipient" edge to the PaymentOrderRecipient entity by id.
func (m *PaymentOrderMutation) SetRecipientID(id int) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the PaymentOrderRecipient entity.
func (m *PaymentOrderMutation) ClearRecipient() {
	m.clearedrecipient = true
}

// RecipientCleared reports if the "recipient" edge to the PaymentOrderRecipient entity was cleared.
func (m *PaymentOrderMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *PaymentOrderMutation) RecipientID() (id int, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderMutation) RecipientIDs() (ids []int) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *PaymentOrderMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// Where appends a list predicates to the PaymentOrderMutation builder.
func (m *PaymentOrderMutation) Where(ps ...predicate.PaymentOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentOrder).
func (m *PaymentOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentOrderMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, paymentorder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, paymentorder.FieldUpdatedAt)
	}
	if m.amount != nil {
		fields = append(fields, paymentorder.FieldAmount)
	}
	if m.amount_paid != nil {
		fields = append(fields, paymentorder.FieldAmountPaid)
	}
	if m.tx_hash != nil {
		fields = append(fields, paymentorder.FieldTxHash)
	}
	if m.receive_address_text != nil {
		fields = append(fields, paymentorder.FieldReceiveAddressText)
	}
	if m.status != nil {
		fields = append(fields, paymentorder.FieldStatus)
	}
	if m.last_used != nil {
		fields = append(fields, paymentorder.FieldLastUsed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentorder.FieldCreatedAt:
		return m.CreatedAt()
	case paymentorder.FieldUpdatedAt:
		return m.UpdatedAt()
	case paymentorder.FieldAmount:
		return m.Amount()
	case paymentorder.FieldAmountPaid:
		return m.AmountPaid()
	case paymentorder.FieldTxHash:
		return m.TxHash()
	case paymentorder.FieldReceiveAddressText:
		return m.ReceiveAddressText()
	case paymentorder.FieldStatus:
		return m.Status()
	case paymentorder.FieldLastUsed:
		return m.LastUsed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentorder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case paymentorder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case paymentorder.FieldAmount:
		return m.OldAmount(ctx)
	case paymentorder.FieldAmountPaid:
		return m.OldAmountPaid(ctx)
	case paymentorder.FieldTxHash:
		return m.OldTxHash(ctx)
	case paymentorder.FieldReceiveAddressText:
		return m.OldReceiveAddressText(ctx)
	case paymentorder.FieldStatus:
		return m.OldStatus(ctx)
	case paymentorder.FieldLastUsed:
		return m.OldLastUsed(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentorder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case paymentorder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case paymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case paymentorder.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountPaid(v)
		return nil
	case paymentorder.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case paymentorder.FieldReceiveAddressText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiveAddressText(v)
		return nil
	case paymentorder.FieldStatus:
		v, ok := value.(paymentorder.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case paymentorder.FieldLastUsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsed(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentOrderMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, paymentorder.FieldAmount)
	}
	if m.addamount_paid != nil {
		fields = append(fields, paymentorder.FieldAmountPaid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentorder.FieldAmount:
		return m.AddedAmount()
	case paymentorder.FieldAmountPaid:
		return m.AddedAmountPaid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentorder.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case paymentorder.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountPaid(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentOrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentorder.FieldTxHash) {
		fields = append(fields, paymentorder.FieldTxHash)
	}
	if m.FieldCleared(paymentorder.FieldLastUsed) {
		fields = append(fields, paymentorder.FieldLastUsed)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentOrderMutation) ClearField(name string) error {
	switch name {
	case paymentorder.FieldTxHash:
		m.ClearTxHash()
		return nil
	case paymentorder.FieldLastUsed:
		m.ClearLastUsed()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentOrderMutation) ResetField(name string) error {
	switch name {
	case paymentorder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case paymentorder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case paymentorder.FieldAmount:
		m.ResetAmount()
		return nil
	case paymentorder.FieldAmountPaid:
		m.ResetAmountPaid()
		return nil
	case paymentorder.FieldTxHash:
		m.ResetTxHash()
		return nil
	case paymentorder.FieldReceiveAddressText:
		m.ResetReceiveAddressText()
		return nil
	case paymentorder.FieldStatus:
		m.ResetStatus()
		return nil
	case paymentorder.FieldLastUsed:
		m.ResetLastUsed()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.api_key != nil {
		edges = append(edges, paymentorder.EdgeAPIKey)
	}
	if m.token != nil {
		edges = append(edges, paymentorder.EdgeToken)
	}
	if m.receive_address != nil {
		edges = append(edges, paymentorder.EdgeReceiveAddress)
	}
	if m.recipient != nil {
		edges = append(edges, paymentorder.EdgeRecipient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentOrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentorder.EdgeAPIKey:
		if id := m.api_key; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeToken:
		if id := m.token; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeReceiveAddress:
		if id := m.receive_address; id != nil {
			return []ent.Value{*id}
		}
	case paymentorder.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentOrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedapi_key {
		edges = append(edges, paymentorder.EdgeAPIKey)
	}
	if m.clearedtoken {
		edges = append(edges, paymentorder.EdgeToken)
	}
	if m.clearedreceive_address {
		edges = append(edges, paymentorder.EdgeReceiveAddress)
	}
	if m.clearedrecipient {
		edges = append(edges, paymentorder.EdgeRecipient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentOrderMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentorder.EdgeAPIKey:
		return m.clearedapi_key
	case paymentorder.EdgeToken:
		return m.clearedtoken
	case paymentorder.EdgeReceiveAddress:
		return m.clearedreceive_address
	case paymentorder.EdgeRecipient:
		return m.clearedrecipient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentOrderMutation) ClearEdge(name string) error {
	switch name {
	case paymentorder.EdgeAPIKey:
		m.ClearAPIKey()
		return nil
	case paymentorder.EdgeToken:
		m.ClearToken()
		return nil
	case paymentorder.EdgeReceiveAddress:
		m.ClearReceiveAddress()
		return nil
	case paymentorder.EdgeRecipient:
		m.ClearRecipient()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentOrderMutation) ResetEdge(name string) error {
	switch name {
	case paymentorder.EdgeAPIKey:
		m.ResetAPIKey()
		return nil
	case paymentorder.EdgeToken:
		m.ResetToken()
		return nil
	case paymentorder.EdgeReceiveAddress:
		m.ResetReceiveAddress()
		return nil
	case paymentorder.EdgeRecipient:
		m.ResetRecipient()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrder edge %s", name)
}

// PaymentOrderRecipientMutation represents an operation that mutates the PaymentOrderRecipient nodes in the graph.
type PaymentOrderRecipientMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	institution          *string
	account_identifier   *string
	account_name         *string
	provider_id          *string
	clearedFields        map[string]struct{}
	payment_order        *uuid.UUID
	clearedpayment_order bool
	done                 bool
	oldValue             func(context.Context) (*PaymentOrderRecipient, error)
	predicates           []predicate.PaymentOrderRecipient
}

var _ ent.Mutation = (*PaymentOrderRecipientMutation)(nil)

// paymentorderrecipientOption allows management of the mutation configuration using functional options.
type paymentorderrecipientOption func(*PaymentOrderRecipientMutation)

// newPaymentOrderRecipientMutation creates new mutation for the PaymentOrderRecipient entity.
func newPaymentOrderRecipientMutation(c config, op Op, opts ...paymentorderrecipientOption) *PaymentOrderRecipientMutation {
	m := &PaymentOrderRecipientMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentOrderRecipient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentOrderRecipientID sets the ID field of the mutation.
func withPaymentOrderRecipientID(id int) paymentorderrecipientOption {
	return func(m *PaymentOrderRecipientMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentOrderRecipient
		)
		m.oldValue = func(ctx context.Context) (*PaymentOrderRecipient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentOrderRecipient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentOrderRecipient sets the old PaymentOrderRecipient of the mutation.
func withPaymentOrderRecipient(node *PaymentOrderRecipient) paymentorderrecipientOption {
	return func(m *PaymentOrderRecipientMutation) {
		m.oldValue = func(context.Context) (*PaymentOrderRecipient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentOrderRecipientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentOrderRecipientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentOrderRecipientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentOrderRecipientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentOrderRecipient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInstitution sets the "institution" field.
func (m *PaymentOrderRecipientMutation) SetInstitution(s string) {
	m.institution = &s
}

// Institution returns the value of the "institution" field in the mutation.
func (m *PaymentOrderRecipientMutation) Institution() (r string, exists bool) {
	v := m.institution
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitution returns the old "institution" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldInstitution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitution: %w", err)
	}
	return oldValue.Institution, nil
}

// ResetInstitution resets all changes to the "institution" field.
func (m *PaymentOrderRecipientMutation) ResetInstitution() {
	m.institution = nil
}

// SetAccountIdentifier sets the "account_identifier" field.
func (m *PaymentOrderRecipientMutation) SetAccountIdentifier(s string) {
	m.account_identifier = &s
}

// AccountIdentifier returns the value of the "account_identifier" field in the mutation.
func (m *PaymentOrderRecipientMutation) AccountIdentifier() (r string, exists bool) {
	v := m.account_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountIdentifier returns the old "account_identifier" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldAccountIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountIdentifier: %w", err)
	}
	return oldValue.AccountIdentifier, nil
}

// ResetAccountIdentifier resets all changes to the "account_identifier" field.
func (m *PaymentOrderRecipientMutation) ResetAccountIdentifier() {
	m.account_identifier = nil
}

// SetAccountName sets the "account_name" field.
func (m *PaymentOrderRecipientMutation) SetAccountName(s string) {
	m.account_name = &s
}

// AccountName returns the value of the "account_name" field in the mutation.
func (m *PaymentOrderRecipientMutation) AccountName() (r string, exists bool) {
	v := m.account_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountName returns the old "account_name" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldAccountName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountName: %w", err)
	}
	return oldValue.AccountName, nil
}

// ResetAccountName resets all changes to the "account_name" field.
func (m *PaymentOrderRecipientMutation) ResetAccountName() {
	m.account_name = nil
}

// SetProviderID sets the "provider_id" field.
func (m *PaymentOrderRecipientMutation) SetProviderID(s string) {
	m.provider_id = &s
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *PaymentOrderRecipientMutation) ProviderID() (r string, exists bool) {
	v := m.provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the PaymentOrderRecipient entity.
// If the PaymentOrderRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentOrderRecipientMutation) OldProviderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ClearProviderID clears the value of the "provider_id" field.
func (m *PaymentOrderRecipientMutation) ClearProviderID() {
	m.provider_id = nil
	m.clearedFields[paymentorderrecipient.FieldProviderID] = struct{}{}
}

// ProviderIDCleared returns if the "provider_id" field was cleared in this mutation.
func (m *PaymentOrderRecipientMutation) ProviderIDCleared() bool {
	_, ok := m.clearedFields[paymentorderrecipient.FieldProviderID]
	return ok
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *PaymentOrderRecipientMutation) ResetProviderID() {
	m.provider_id = nil
	delete(m.clearedFields, paymentorderrecipient.FieldProviderID)
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by id.
func (m *PaymentOrderRecipientMutation) SetPaymentOrderID(id uuid.UUID) {
	m.payment_order = &id
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (m *PaymentOrderRecipientMutation) ClearPaymentOrder() {
	m.clearedpayment_order = true
}

// PaymentOrderCleared reports if the "payment_order" edge to the PaymentOrder entity was cleared.
func (m *PaymentOrderRecipientMutation) PaymentOrderCleared() bool {
	return m.clearedpayment_order
}

// PaymentOrderID returns the "payment_order" edge ID in the mutation.
func (m *PaymentOrderRecipientMutation) PaymentOrderID() (id uuid.UUID, exists bool) {
	if m.payment_order != nil {
		return *m.payment_order, true
	}
	return
}

// PaymentOrderIDs returns the "payment_order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentOrderID instead. It exists only for internal usage by the builders.
func (m *PaymentOrderRecipientMutation) PaymentOrderIDs() (ids []uuid.UUID) {
	if id := m.payment_order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymentOrder resets all changes to the "payment_order" edge.
func (m *PaymentOrderRecipientMutation) ResetPaymentOrder() {
	m.payment_order = nil
	m.clearedpayment_order = false
}

// Where appends a list predicates to the PaymentOrderRecipientMutation builder.
func (m *PaymentOrderRecipientMutation) Where(ps ...predicate.PaymentOrderRecipient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentOrderRecipientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentOrderRecipientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentOrderRecipient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentOrderRecipientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentOrderRecipientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentOrderRecipient).
func (m *PaymentOrderRecipientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentOrderRecipientMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.institution != nil {
		fields = append(fields, paymentorderrecipient.FieldInstitution)
	}
	if m.account_identifier != nil {
		fields = append(fields, paymentorderrecipient.FieldAccountIdentifier)
	}
	if m.account_name != nil {
		fields = append(fields, paymentorderrecipient.FieldAccountName)
	}
	if m.provider_id != nil {
		fields = append(fields, paymentorderrecipient.FieldProviderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentOrderRecipientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		return m.Institution()
	case paymentorderrecipient.FieldAccountIdentifier:
		return m.AccountIdentifier()
	case paymentorderrecipient.FieldAccountName:
		return m.AccountName()
	case paymentorderrecipient.FieldProviderID:
		return m.ProviderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentOrderRecipientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		return m.OldInstitution(ctx)
	case paymentorderrecipient.FieldAccountIdentifier:
		return m.OldAccountIdentifier(ctx)
	case paymentorderrecipient.FieldAccountName:
		return m.OldAccountName(ctx)
	case paymentorderrecipient.FieldProviderID:
		return m.OldProviderID(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderRecipientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitution(v)
		return nil
	case paymentorderrecipient.FieldAccountIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountIdentifier(v)
		return nil
	case paymentorderrecipient.FieldAccountName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountName(v)
		return nil
	case paymentorderrecipient.FieldProviderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentOrderRecipientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentOrderRecipientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentOrderRecipientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PaymentOrderRecipient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentOrderRecipientMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentorderrecipient.FieldProviderID) {
		fields = append(fields, paymentorderrecipient.FieldProviderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentOrderRecipientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ClearField(name string) error {
	switch name {
	case paymentorderrecipient.FieldProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ResetField(name string) error {
	switch name {
	case paymentorderrecipient.FieldInstitution:
		m.ResetInstitution()
		return nil
	case paymentorderrecipient.FieldAccountIdentifier:
		m.ResetAccountIdentifier()
		return nil
	case paymentorderrecipient.FieldAccountName:
		m.ResetAccountName()
		return nil
	case paymentorderrecipient.FieldProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentOrderRecipientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_order != nil {
		edges = append(edges, paymentorderrecipient.EdgePaymentOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentOrderRecipientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		if id := m.payment_order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentOrderRecipientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentOrderRecipientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentOrderRecipientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_order {
		edges = append(edges, paymentorderrecipient.EdgePaymentOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentOrderRecipientMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		return m.clearedpayment_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ClearEdge(name string) error {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		m.ClearPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentOrderRecipientMutation) ResetEdge(name string) error {
	switch name {
	case paymentorderrecipient.EdgePaymentOrder:
		m.ResetPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown PaymentOrderRecipient edge %s", name)
}

// ProviderAvailabilityMutation represents an operation that mutates the ProviderAvailability nodes in the graph.
type ProviderAvailabilityMutation struct {
	config
	op              Op
	typ             string
	id              *int
	cadence         *provideravailability.Cadence
	start_time      *time.Time
	end_time        *time.Time
	clearedFields   map[string]struct{}
	provider        *string
	clearedprovider bool
	done            bool
	oldValue        func(context.Context) (*ProviderAvailability, error)
	predicates      []predicate.ProviderAvailability
}

var _ ent.Mutation = (*ProviderAvailabilityMutation)(nil)

// provideravailabilityOption allows management of the mutation configuration using functional options.
type provideravailabilityOption func(*ProviderAvailabilityMutation)

// newProviderAvailabilityMutation creates new mutation for the ProviderAvailability entity.
func newProviderAvailabilityMutation(c config, op Op, opts ...provideravailabilityOption) *ProviderAvailabilityMutation {
	m := &ProviderAvailabilityMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderAvailability,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderAvailabilityID sets the ID field of the mutation.
func withProviderAvailabilityID(id int) provideravailabilityOption {
	return func(m *ProviderAvailabilityMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderAvailability
		)
		m.oldValue = func(ctx context.Context) (*ProviderAvailability, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderAvailability.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderAvailability sets the old ProviderAvailability of the mutation.
func withProviderAvailability(node *ProviderAvailability) provideravailabilityOption {
	return func(m *ProviderAvailabilityMutation) {
		m.oldValue = func(context.Context) (*ProviderAvailability, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderAvailabilityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderAvailabilityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderAvailabilityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderAvailabilityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderAvailability.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCadence sets the "cadence" field.
func (m *ProviderAvailabilityMutation) SetCadence(pr provideravailability.Cadence) {
	m.cadence = &pr
}

// Cadence returns the value of the "cadence" field in the mutation.
func (m *ProviderAvailabilityMutation) Cadence() (r provideravailability.Cadence, exists bool) {
	v := m.cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldCadence returns the old "cadence" field's value of the ProviderAvailability entity.
// If the ProviderAvailability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderAvailabilityMutation) OldCadence(ctx context.Context) (v provideravailability.Cadence, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCadence: %w", err)
	}
	return oldValue.Cadence, nil
}

// ResetCadence resets all changes to the "cadence" field.
func (m *ProviderAvailabilityMutation) ResetCadence() {
	m.cadence = nil
}

// SetStartTime sets the "start_time" field.
func (m *ProviderAvailabilityMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ProviderAvailabilityMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the ProviderAvailability entity.
// If the ProviderAvailability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderAvailabilityMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ProviderAvailabilityMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *ProviderAvailabilityMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *ProviderAvailabilityMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the ProviderAvailability entity.
// If the ProviderAvailability object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderAvailabilityMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *ProviderAvailabilityMutation) ResetEndTime() {
	m.end_time = nil
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by id.
func (m *ProviderAvailabilityMutation) SetProviderID(id string) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (m *ProviderAvailabilityMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderProfile entity was cleared.
func (m *ProviderAvailabilityMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *ProviderAvailabilityMutation) ProviderID() (id string, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *ProviderAvailabilityMutation) ProviderIDs() (ids []string) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *ProviderAvailabilityMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// Where appends a list predicates to the ProviderAvailabilityMutation builder.
func (m *ProviderAvailabilityMutation) Where(ps ...predicate.ProviderAvailability) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderAvailabilityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderAvailabilityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderAvailability, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderAvailabilityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderAvailabilityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderAvailability).
func (m *ProviderAvailabilityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderAvailabilityMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.cadence != nil {
		fields = append(fields, provideravailability.FieldCadence)
	}
	if m.start_time != nil {
		fields = append(fields, provideravailability.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, provideravailability.FieldEndTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderAvailabilityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provideravailability.FieldCadence:
		return m.Cadence()
	case provideravailability.FieldStartTime:
		return m.StartTime()
	case provideravailability.FieldEndTime:
		return m.EndTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderAvailabilityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provideravailability.FieldCadence:
		return m.OldCadence(ctx)
	case provideravailability.FieldStartTime:
		return m.OldStartTime(ctx)
	case provideravailability.FieldEndTime:
		return m.OldEndTime(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderAvailability field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderAvailabilityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provideravailability.FieldCadence:
		v, ok := value.(provideravailability.Cadence)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCadence(v)
		return nil
	case provideravailability.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case provideravailability.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderAvailability field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderAvailabilityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderAvailabilityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderAvailabilityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderAvailability numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderAvailabilityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderAvailabilityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderAvailabilityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderAvailability nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderAvailabilityMutation) ResetField(name string) error {
	switch name {
	case provideravailability.FieldCadence:
		m.ResetCadence()
		return nil
	case provideravailability.FieldStartTime:
		m.ResetStartTime()
		return nil
	case provideravailability.FieldEndTime:
		m.ResetEndTime()
		return nil
	}
	return fmt.Errorf("unknown ProviderAvailability field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderAvailabilityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.provider != nil {
		edges = append(edges, provideravailability.EdgeProvider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderAvailabilityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provideravailability.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderAvailabilityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderAvailabilityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderAvailabilityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprovider {
		edges = append(edges, provideravailability.EdgeProvider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderAvailabilityMutation) EdgeCleared(name string) bool {
	switch name {
	case provideravailability.EdgeProvider:
		return m.clearedprovider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderAvailabilityMutation) ClearEdge(name string) error {
	switch name {
	case provideravailability.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown ProviderAvailability unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderAvailabilityMutation) ResetEdge(name string) error {
	switch name {
	case provideravailability.EdgeProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown ProviderAvailability edge %s", name)
}

// ProviderOrderTokenMutation represents an operation that mutates the ProviderOrderToken nodes in the graph.
type ProviderOrderTokenMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	created_at                  *time.Time
	updated_at                  *time.Time
	name                        *providerordertoken.Name
	fixed_conversion_rate       *decimal.Decimal
	addfixed_conversion_rate    *decimal.Decimal
	floating_conversion_rate    *decimal.Decimal
	addfloating_conversion_rate *decimal.Decimal
	conversion_rate_type        *providerordertoken.ConversionRateType
	max_order_amount            *decimal.Decimal
	addmax_order_amount         *decimal.Decimal
	min_order_amount            *decimal.Decimal
	addmin_order_amount         *decimal.Decimal
	clearedFields               map[string]struct{}
	provider                    *string
	clearedprovider             bool
	addresses                   map[int]struct{}
	removedaddresses            map[int]struct{}
	clearedaddresses            bool
	done                        bool
	oldValue                    func(context.Context) (*ProviderOrderToken, error)
	predicates                  []predicate.ProviderOrderToken
}

var _ ent.Mutation = (*ProviderOrderTokenMutation)(nil)

// providerordertokenOption allows management of the mutation configuration using functional options.
type providerordertokenOption func(*ProviderOrderTokenMutation)

// newProviderOrderTokenMutation creates new mutation for the ProviderOrderToken entity.
func newProviderOrderTokenMutation(c config, op Op, opts ...providerordertokenOption) *ProviderOrderTokenMutation {
	m := &ProviderOrderTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderOrderToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderOrderTokenID sets the ID field of the mutation.
func withProviderOrderTokenID(id int) providerordertokenOption {
	return func(m *ProviderOrderTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderOrderToken
		)
		m.oldValue = func(ctx context.Context) (*ProviderOrderToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderOrderToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderOrderToken sets the old ProviderOrderToken of the mutation.
func withProviderOrderToken(node *ProviderOrderToken) providerordertokenOption {
	return func(m *ProviderOrderTokenMutation) {
		m.oldValue = func(context.Context) (*ProviderOrderToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderOrderTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderOrderTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderOrderTokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderOrderTokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderOrderToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderOrderTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderOrderTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderOrderTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderOrderTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderOrderTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderOrderTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ProviderOrderTokenMutation) SetName(pr providerordertoken.Name) {
	m.name = &pr
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderOrderTokenMutation) Name() (r providerordertoken.Name, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldName(ctx context.Context) (v providerordertoken.Name, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderOrderTokenMutation) ResetName() {
	m.name = nil
}

// SetFixedConversionRate sets the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) SetFixedConversionRate(d decimal.Decimal) {
	m.fixed_conversion_rate = &d
	m.addfixed_conversion_rate = nil
}

// FixedConversionRate returns the value of the "fixed_conversion_rate" field in the mutation.
func (m *ProviderOrderTokenMutation) FixedConversionRate() (r decimal.Decimal, exists bool) {
	v := m.fixed_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFixedConversionRate returns the old "fixed_conversion_rate" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldFixedConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFixedConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFixedConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixedConversionRate: %w", err)
	}
	return oldValue.FixedConversionRate, nil
}

// AddFixedConversionRate adds d to the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) AddFixedConversionRate(d decimal.Decimal) {
	if m.addfixed_conversion_rate != nil {
		*m.addfixed_conversion_rate = m.addfixed_conversion_rate.Add(d)
	} else {
		m.addfixed_conversion_rate = &d
	}
}

// AddedFixedConversionRate returns the value that was added to the "fixed_conversion_rate" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedFixedConversionRate() (r decimal.Decimal, exists bool) {
	v := m.addfixed_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFixedConversionRate resets all changes to the "fixed_conversion_rate" field.
func (m *ProviderOrderTokenMutation) ResetFixedConversionRate() {
	m.fixed_conversion_rate = nil
	m.addfixed_conversion_rate = nil
}

// SetFloatingConversionRate sets the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) SetFloatingConversionRate(d decimal.Decimal) {
	m.floating_conversion_rate = &d
	m.addfloating_conversion_rate = nil
}

// FloatingConversionRate returns the value of the "floating_conversion_rate" field in the mutation.
func (m *ProviderOrderTokenMutation) FloatingConversionRate() (r decimal.Decimal, exists bool) {
	v := m.floating_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFloatingConversionRate returns the old "floating_conversion_rate" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldFloatingConversionRate(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloatingConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloatingConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloatingConversionRate: %w", err)
	}
	return oldValue.FloatingConversionRate, nil
}

// AddFloatingConversionRate adds d to the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) AddFloatingConversionRate(d decimal.Decimal) {
	if m.addfloating_conversion_rate != nil {
		*m.addfloating_conversion_rate = m.addfloating_conversion_rate.Add(d)
	} else {
		m.addfloating_conversion_rate = &d
	}
}

// AddedFloatingConversionRate returns the value that was added to the "floating_conversion_rate" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedFloatingConversionRate() (r decimal.Decimal, exists bool) {
	v := m.addfloating_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloatingConversionRate resets all changes to the "floating_conversion_rate" field.
func (m *ProviderOrderTokenMutation) ResetFloatingConversionRate() {
	m.floating_conversion_rate = nil
	m.addfloating_conversion_rate = nil
}

// SetConversionRateType sets the "conversion_rate_type" field.
func (m *ProviderOrderTokenMutation) SetConversionRateType(prt providerordertoken.ConversionRateType) {
	m.conversion_rate_type = &prt
}

// ConversionRateType returns the value of the "conversion_rate_type" field in the mutation.
func (m *ProviderOrderTokenMutation) ConversionRateType() (r providerordertoken.ConversionRateType, exists bool) {
	v := m.conversion_rate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRateType returns the old "conversion_rate_type" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldConversionRateType(ctx context.Context) (v providerordertoken.ConversionRateType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRateType: %w", err)
	}
	return oldValue.ConversionRateType, nil
}

// ResetConversionRateType resets all changes to the "conversion_rate_type" field.
func (m *ProviderOrderTokenMutation) ResetConversionRateType() {
	m.conversion_rate_type = nil
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) SetMaxOrderAmount(d decimal.Decimal) {
	m.max_order_amount = &d
	m.addmax_order_amount = nil
}

// MaxOrderAmount returns the value of the "max_order_amount" field in the mutation.
func (m *ProviderOrderTokenMutation) MaxOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.max_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxOrderAmount returns the old "max_order_amount" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldMaxOrderAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxOrderAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxOrderAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxOrderAmount: %w", err)
	}
	return oldValue.MaxOrderAmount, nil
}

// AddMaxOrderAmount adds d to the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) AddMaxOrderAmount(d decimal.Decimal) {
	if m.addmax_order_amount != nil {
		*m.addmax_order_amount = m.addmax_order_amount.Add(d)
	} else {
		m.addmax_order_amount = &d
	}
}

// AddedMaxOrderAmount returns the value that was added to the "max_order_amount" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedMaxOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.addmax_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxOrderAmount resets all changes to the "max_order_amount" field.
func (m *ProviderOrderTokenMutation) ResetMaxOrderAmount() {
	m.max_order_amount = nil
	m.addmax_order_amount = nil
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) SetMinOrderAmount(d decimal.Decimal) {
	m.min_order_amount = &d
	m.addmin_order_amount = nil
}

// MinOrderAmount returns the value of the "min_order_amount" field in the mutation.
func (m *ProviderOrderTokenMutation) MinOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.min_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMinOrderAmount returns the old "min_order_amount" field's value of the ProviderOrderToken entity.
// If the ProviderOrderToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenMutation) OldMinOrderAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinOrderAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinOrderAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinOrderAmount: %w", err)
	}
	return oldValue.MinOrderAmount, nil
}

// AddMinOrderAmount adds d to the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) AddMinOrderAmount(d decimal.Decimal) {
	if m.addmin_order_amount != nil {
		*m.addmin_order_amount = m.addmin_order_amount.Add(d)
	} else {
		m.addmin_order_amount = &d
	}
}

// AddedMinOrderAmount returns the value that was added to the "min_order_amount" field in this mutation.
func (m *ProviderOrderTokenMutation) AddedMinOrderAmount() (r decimal.Decimal, exists bool) {
	v := m.addmin_order_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinOrderAmount resets all changes to the "min_order_amount" field.
func (m *ProviderOrderTokenMutation) ResetMinOrderAmount() {
	m.min_order_amount = nil
	m.addmin_order_amount = nil
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by id.
func (m *ProviderOrderTokenMutation) SetProviderID(id string) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (m *ProviderOrderTokenMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderProfile entity was cleared.
func (m *ProviderOrderTokenMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *ProviderOrderTokenMutation) ProviderID() (id string, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *ProviderOrderTokenMutation) ProviderIDs() (ids []string) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *ProviderOrderTokenMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// AddAddressIDs adds the "addresses" edge to the ProviderOrderTokenAddress entity by ids.
func (m *ProviderOrderTokenMutation) AddAddressIDs(ids ...int) {
	if m.addresses == nil {
		m.addresses = make(map[int]struct{})
	}
	for i := range ids {
		m.addresses[ids[i]] = struct{}{}
	}
}

// ClearAddresses clears the "addresses" edge to the ProviderOrderTokenAddress entity.
func (m *ProviderOrderTokenMutation) ClearAddresses() {
	m.clearedaddresses = true
}

// AddressesCleared reports if the "addresses" edge to the ProviderOrderTokenAddress entity was cleared.
func (m *ProviderOrderTokenMutation) AddressesCleared() bool {
	return m.clearedaddresses
}

// RemoveAddressIDs removes the "addresses" edge to the ProviderOrderTokenAddress entity by IDs.
func (m *ProviderOrderTokenMutation) RemoveAddressIDs(ids ...int) {
	if m.removedaddresses == nil {
		m.removedaddresses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.addresses, ids[i])
		m.removedaddresses[ids[i]] = struct{}{}
	}
}

// RemovedAddresses returns the removed IDs of the "addresses" edge to the ProviderOrderTokenAddress entity.
func (m *ProviderOrderTokenMutation) RemovedAddressesIDs() (ids []int) {
	for id := range m.removedaddresses {
		ids = append(ids, id)
	}
	return
}

// AddressesIDs returns the "addresses" edge IDs in the mutation.
func (m *ProviderOrderTokenMutation) AddressesIDs() (ids []int) {
	for id := range m.addresses {
		ids = append(ids, id)
	}
	return
}

// ResetAddresses resets all changes to the "addresses" edge.
func (m *ProviderOrderTokenMutation) ResetAddresses() {
	m.addresses = nil
	m.clearedaddresses = false
	m.removedaddresses = nil
}

// Where appends a list predicates to the ProviderOrderTokenMutation builder.
func (m *ProviderOrderTokenMutation) Where(ps ...predicate.ProviderOrderToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderOrderTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderOrderTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderOrderToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderOrderTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderOrderTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderOrderToken).
func (m *ProviderOrderTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderOrderTokenMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, providerordertoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, providerordertoken.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, providerordertoken.FieldName)
	}
	if m.fixed_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFixedConversionRate)
	}
	if m.floating_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFloatingConversionRate)
	}
	if m.conversion_rate_type != nil {
		fields = append(fields, providerordertoken.FieldConversionRateType)
	}
	if m.max_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMaxOrderAmount)
	}
	if m.min_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMinOrderAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderOrderTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerordertoken.FieldCreatedAt:
		return m.CreatedAt()
	case providerordertoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerordertoken.FieldName:
		return m.Name()
	case providerordertoken.FieldFixedConversionRate:
		return m.FixedConversionRate()
	case providerordertoken.FieldFloatingConversionRate:
		return m.FloatingConversionRate()
	case providerordertoken.FieldConversionRateType:
		return m.ConversionRateType()
	case providerordertoken.FieldMaxOrderAmount:
		return m.MaxOrderAmount()
	case providerordertoken.FieldMinOrderAmount:
		return m.MinOrderAmount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderOrderTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerordertoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case providerordertoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerordertoken.FieldName:
		return m.OldName(ctx)
	case providerordertoken.FieldFixedConversionRate:
		return m.OldFixedConversionRate(ctx)
	case providerordertoken.FieldFloatingConversionRate:
		return m.OldFloatingConversionRate(ctx)
	case providerordertoken.FieldConversionRateType:
		return m.OldConversionRateType(ctx)
	case providerordertoken.FieldMaxOrderAmount:
		return m.OldMaxOrderAmount(ctx)
	case providerordertoken.FieldMinOrderAmount:
		return m.OldMinOrderAmount(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerordertoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case providerordertoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerordertoken.FieldName:
		v, ok := value.(providerordertoken.Name)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case providerordertoken.FieldFixedConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixedConversionRate(v)
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloatingConversionRate(v)
		return nil
	case providerordertoken.FieldConversionRateType:
		v, ok := value.(providerordertoken.ConversionRateType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRateType(v)
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxOrderAmount(v)
		return nil
	case providerordertoken.FieldMinOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinOrderAmount(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderOrderTokenMutation) AddedFields() []string {
	var fields []string
	if m.addfixed_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFixedConversionRate)
	}
	if m.addfloating_conversion_rate != nil {
		fields = append(fields, providerordertoken.FieldFloatingConversionRate)
	}
	if m.addmax_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMaxOrderAmount)
	}
	if m.addmin_order_amount != nil {
		fields = append(fields, providerordertoken.FieldMinOrderAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderOrderTokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case providerordertoken.FieldFixedConversionRate:
		return m.AddedFixedConversionRate()
	case providerordertoken.FieldFloatingConversionRate:
		return m.AddedFloatingConversionRate()
	case providerordertoken.FieldMaxOrderAmount:
		return m.AddedMaxOrderAmount()
	case providerordertoken.FieldMinOrderAmount:
		return m.AddedMinOrderAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case providerordertoken.FieldFixedConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFixedConversionRate(v)
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloatingConversionRate(v)
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxOrderAmount(v)
		return nil
	case providerordertoken.FieldMinOrderAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinOrderAmount(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderOrderTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderOrderTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderOrderTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderOrderToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderOrderTokenMutation) ResetField(name string) error {
	switch name {
	case providerordertoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case providerordertoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerordertoken.FieldName:
		m.ResetName()
		return nil
	case providerordertoken.FieldFixedConversionRate:
		m.ResetFixedConversionRate()
		return nil
	case providerordertoken.FieldFloatingConversionRate:
		m.ResetFloatingConversionRate()
		return nil
	case providerordertoken.FieldConversionRateType:
		m.ResetConversionRateType()
		return nil
	case providerordertoken.FieldMaxOrderAmount:
		m.ResetMaxOrderAmount()
		return nil
	case providerordertoken.FieldMinOrderAmount:
		m.ResetMinOrderAmount()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderOrderTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.provider != nil {
		edges = append(edges, providerordertoken.EdgeProvider)
	}
	if m.addresses != nil {
		edges = append(edges, providerordertoken.EdgeAddresses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderOrderTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerordertoken.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case providerordertoken.EdgeAddresses:
		ids := make([]ent.Value, 0, len(m.addresses))
		for id := range m.addresses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderOrderTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedaddresses != nil {
		edges = append(edges, providerordertoken.EdgeAddresses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderOrderTokenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case providerordertoken.EdgeAddresses:
		ids := make([]ent.Value, 0, len(m.removedaddresses))
		for id := range m.removedaddresses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderOrderTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprovider {
		edges = append(edges, providerordertoken.EdgeProvider)
	}
	if m.clearedaddresses {
		edges = append(edges, providerordertoken.EdgeAddresses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderOrderTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case providerordertoken.EdgeProvider:
		return m.clearedprovider
	case providerordertoken.EdgeAddresses:
		return m.clearedaddresses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderOrderTokenMutation) ClearEdge(name string) error {
	switch name {
	case providerordertoken.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderOrderTokenMutation) ResetEdge(name string) error {
	switch name {
	case providerordertoken.EdgeProvider:
		m.ResetProvider()
		return nil
	case providerordertoken.EdgeAddresses:
		m.ResetAddresses()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderToken edge %s", name)
}

// ProviderOrderTokenAddressMutation represents an operation that mutates the ProviderOrderTokenAddress nodes in the graph.
type ProviderOrderTokenAddressMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	network                   *providerordertokenaddress.Network
	address                   *string
	clearedFields             map[string]struct{}
	providerordertoken        *int
	clearedproviderordertoken bool
	done                      bool
	oldValue                  func(context.Context) (*ProviderOrderTokenAddress, error)
	predicates                []predicate.ProviderOrderTokenAddress
}

var _ ent.Mutation = (*ProviderOrderTokenAddressMutation)(nil)

// providerordertokenaddressOption allows management of the mutation configuration using functional options.
type providerordertokenaddressOption func(*ProviderOrderTokenAddressMutation)

// newProviderOrderTokenAddressMutation creates new mutation for the ProviderOrderTokenAddress entity.
func newProviderOrderTokenAddressMutation(c config, op Op, opts ...providerordertokenaddressOption) *ProviderOrderTokenAddressMutation {
	m := &ProviderOrderTokenAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderOrderTokenAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderOrderTokenAddressID sets the ID field of the mutation.
func withProviderOrderTokenAddressID(id int) providerordertokenaddressOption {
	return func(m *ProviderOrderTokenAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderOrderTokenAddress
		)
		m.oldValue = func(ctx context.Context) (*ProviderOrderTokenAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderOrderTokenAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderOrderTokenAddress sets the old ProviderOrderTokenAddress of the mutation.
func withProviderOrderTokenAddress(node *ProviderOrderTokenAddress) providerordertokenaddressOption {
	return func(m *ProviderOrderTokenAddressMutation) {
		m.oldValue = func(context.Context) (*ProviderOrderTokenAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderOrderTokenAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderOrderTokenAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderOrderTokenAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderOrderTokenAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderOrderTokenAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNetwork sets the "network" field.
func (m *ProviderOrderTokenAddressMutation) SetNetwork(pr providerordertokenaddress.Network) {
	m.network = &pr
}

// Network returns the value of the "network" field in the mutation.
func (m *ProviderOrderTokenAddressMutation) Network() (r providerordertokenaddress.Network, exists bool) {
	v := m.network
	if v == nil {
		return
	}
	return *v, true
}

// OldNetwork returns the old "network" field's value of the ProviderOrderTokenAddress entity.
// If the ProviderOrderTokenAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenAddressMutation) OldNetwork(ctx context.Context) (v providerordertokenaddress.Network, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetwork is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetwork requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetwork: %w", err)
	}
	return oldValue.Network, nil
}

// ResetNetwork resets all changes to the "network" field.
func (m *ProviderOrderTokenAddressMutation) ResetNetwork() {
	m.network = nil
}

// SetAddress sets the "address" field.
func (m *ProviderOrderTokenAddressMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ProviderOrderTokenAddressMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ProviderOrderTokenAddress entity.
// If the ProviderOrderTokenAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderOrderTokenAddressMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ProviderOrderTokenAddressMutation) ResetAddress() {
	m.address = nil
}

// SetProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by id.
func (m *ProviderOrderTokenAddressMutation) SetProviderordertokenID(id int) {
	m.providerordertoken = &id
}

// ClearProviderordertoken clears the "providerordertoken" edge to the ProviderOrderToken entity.
func (m *ProviderOrderTokenAddressMutation) ClearProviderordertoken() {
	m.clearedproviderordertoken = true
}

// ProviderordertokenCleared reports if the "providerordertoken" edge to the ProviderOrderToken entity was cleared.
func (m *ProviderOrderTokenAddressMutation) ProviderordertokenCleared() bool {
	return m.clearedproviderordertoken
}

// ProviderordertokenID returns the "providerordertoken" edge ID in the mutation.
func (m *ProviderOrderTokenAddressMutation) ProviderordertokenID() (id int, exists bool) {
	if m.providerordertoken != nil {
		return *m.providerordertoken, true
	}
	return
}

// ProviderordertokenIDs returns the "providerordertoken" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderordertokenID instead. It exists only for internal usage by the builders.
func (m *ProviderOrderTokenAddressMutation) ProviderordertokenIDs() (ids []int) {
	if id := m.providerordertoken; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderordertoken resets all changes to the "providerordertoken" edge.
func (m *ProviderOrderTokenAddressMutation) ResetProviderordertoken() {
	m.providerordertoken = nil
	m.clearedproviderordertoken = false
}

// Where appends a list predicates to the ProviderOrderTokenAddressMutation builder.
func (m *ProviderOrderTokenAddressMutation) Where(ps ...predicate.ProviderOrderTokenAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderOrderTokenAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderOrderTokenAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderOrderTokenAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderOrderTokenAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderOrderTokenAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderOrderTokenAddress).
func (m *ProviderOrderTokenAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderOrderTokenAddressMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.network != nil {
		fields = append(fields, providerordertokenaddress.FieldNetwork)
	}
	if m.address != nil {
		fields = append(fields, providerordertokenaddress.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderOrderTokenAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerordertokenaddress.FieldNetwork:
		return m.Network()
	case providerordertokenaddress.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderOrderTokenAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerordertokenaddress.FieldNetwork:
		return m.OldNetwork(ctx)
	case providerordertokenaddress.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderOrderTokenAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerordertokenaddress.FieldNetwork:
		v, ok := value.(providerordertokenaddress.Network)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetwork(v)
		return nil
	case providerordertokenaddress.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderTokenAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderOrderTokenAddressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderOrderTokenAddressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderOrderTokenAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderOrderTokenAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderOrderTokenAddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderOrderTokenAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderOrderTokenAddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderOrderTokenAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderOrderTokenAddressMutation) ResetField(name string) error {
	switch name {
	case providerordertokenaddress.FieldNetwork:
		m.ResetNetwork()
		return nil
	case providerordertokenaddress.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderTokenAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderOrderTokenAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.providerordertoken != nil {
		edges = append(edges, providerordertokenaddress.EdgeProviderordertoken)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderOrderTokenAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerordertokenaddress.EdgeProviderordertoken:
		if id := m.providerordertoken; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderOrderTokenAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderOrderTokenAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderOrderTokenAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproviderordertoken {
		edges = append(edges, providerordertokenaddress.EdgeProviderordertoken)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderOrderTokenAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case providerordertokenaddress.EdgeProviderordertoken:
		return m.clearedproviderordertoken
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderOrderTokenAddressMutation) ClearEdge(name string) error {
	switch name {
	case providerordertokenaddress.EdgeProviderordertoken:
		m.ClearProviderordertoken()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderTokenAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderOrderTokenAddressMutation) ResetEdge(name string) error {
	switch name {
	case providerordertokenaddress.EdgeProviderordertoken:
		m.ResetProviderordertoken()
		return nil
	}
	return fmt.Errorf("unknown ProviderOrderTokenAddress edge %s", name)
}

// ProviderProfileMutation represents an operation that mutates the ProviderProfile nodes in the graph.
type ProviderProfileMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	created_at               *time.Time
	updated_at               *time.Time
	trading_name             *string
	country                  *string
	clearedFields            map[string]struct{}
	api_key                  *uuid.UUID
	clearedapi_key           bool
	provision_buckets        map[int]struct{}
	removedprovision_buckets map[int]struct{}
	clearedprovision_buckets bool
	order_tokens             map[int]struct{}
	removedorder_tokens      map[int]struct{}
	clearedorder_tokens      bool
	availability             *int
	clearedavailability      bool
	provider_rating          *int
	clearedprovider_rating   bool
	assigned_orders          map[uuid.UUID]struct{}
	removedassigned_orders   map[uuid.UUID]struct{}
	clearedassigned_orders   bool
	done                     bool
	oldValue                 func(context.Context) (*ProviderProfile, error)
	predicates               []predicate.ProviderProfile
}

var _ ent.Mutation = (*ProviderProfileMutation)(nil)

// providerprofileOption allows management of the mutation configuration using functional options.
type providerprofileOption func(*ProviderProfileMutation)

// newProviderProfileMutation creates new mutation for the ProviderProfile entity.
func newProviderProfileMutation(c config, op Op, opts ...providerprofileOption) *ProviderProfileMutation {
	m := &ProviderProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderProfileID sets the ID field of the mutation.
func withProviderProfileID(id string) providerprofileOption {
	return func(m *ProviderProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderProfile
		)
		m.oldValue = func(ctx context.Context) (*ProviderProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderProfile sets the old ProviderProfile of the mutation.
func withProviderProfile(node *ProviderProfile) providerprofileOption {
	return func(m *ProviderProfileMutation) {
		m.oldValue = func(context.Context) (*ProviderProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProviderProfile entities.
func (m *ProviderProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderProfileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderProfileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderProfileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTradingName sets the "trading_name" field.
func (m *ProviderProfileMutation) SetTradingName(s string) {
	m.trading_name = &s
}

// TradingName returns the value of the "trading_name" field in the mutation.
func (m *ProviderProfileMutation) TradingName() (r string, exists bool) {
	v := m.trading_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTradingName returns the old "trading_name" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldTradingName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradingName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradingName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradingName: %w", err)
	}
	return oldValue.TradingName, nil
}

// ResetTradingName resets all changes to the "trading_name" field.
func (m *ProviderProfileMutation) ResetTradingName() {
	m.trading_name = nil
}

// SetCountry sets the "country" field.
func (m *ProviderProfileMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *ProviderProfileMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the ProviderProfile entity.
// If the ProviderProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderProfileMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *ProviderProfileMutation) ResetCountry() {
	m.country = nil
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by id.
func (m *ProviderProfileMutation) SetAPIKeyID(id uuid.UUID) {
	m.api_key = &id
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (m *ProviderProfileMutation) ClearAPIKey() {
	m.clearedapi_key = true
}

// APIKeyCleared reports if the "api_key" edge to the APIKey entity was cleared.
func (m *ProviderProfileMutation) APIKeyCleared() bool {
	return m.clearedapi_key
}

// APIKeyID returns the "api_key" edge ID in the mutation.
func (m *ProviderProfileMutation) APIKeyID() (id uuid.UUID, exists bool) {
	if m.api_key != nil {
		return *m.api_key, true
	}
	return
}

// APIKeyIDs returns the "api_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// APIKeyID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) APIKeyIDs() (ids []uuid.UUID) {
	if id := m.api_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAPIKey resets all changes to the "api_key" edge.
func (m *ProviderProfileMutation) ResetAPIKey() {
	m.api_key = nil
	m.clearedapi_key = false
}

// AddProvisionBucketIDs adds the "provision_buckets" edge to the ProvisionBucket entity by ids.
func (m *ProviderProfileMutation) AddProvisionBucketIDs(ids ...int) {
	if m.provision_buckets == nil {
		m.provision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		m.provision_buckets[ids[i]] = struct{}{}
	}
}

// ClearProvisionBuckets clears the "provision_buckets" edge to the ProvisionBucket entity.
func (m *ProviderProfileMutation) ClearProvisionBuckets() {
	m.clearedprovision_buckets = true
}

// ProvisionBucketsCleared reports if the "provision_buckets" edge to the ProvisionBucket entity was cleared.
func (m *ProviderProfileMutation) ProvisionBucketsCleared() bool {
	return m.clearedprovision_buckets
}

// RemoveProvisionBucketIDs removes the "provision_buckets" edge to the ProvisionBucket entity by IDs.
func (m *ProviderProfileMutation) RemoveProvisionBucketIDs(ids ...int) {
	if m.removedprovision_buckets == nil {
		m.removedprovision_buckets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.provision_buckets, ids[i])
		m.removedprovision_buckets[ids[i]] = struct{}{}
	}
}

// RemovedProvisionBuckets returns the removed IDs of the "provision_buckets" edge to the ProvisionBucket entity.
func (m *ProviderProfileMutation) RemovedProvisionBucketsIDs() (ids []int) {
	for id := range m.removedprovision_buckets {
		ids = append(ids, id)
	}
	return
}

// ProvisionBucketsIDs returns the "provision_buckets" edge IDs in the mutation.
func (m *ProviderProfileMutation) ProvisionBucketsIDs() (ids []int) {
	for id := range m.provision_buckets {
		ids = append(ids, id)
	}
	return
}

// ResetProvisionBuckets resets all changes to the "provision_buckets" edge.
func (m *ProviderProfileMutation) ResetProvisionBuckets() {
	m.provision_buckets = nil
	m.clearedprovision_buckets = false
	m.removedprovision_buckets = nil
}

// AddOrderTokenIDs adds the "order_tokens" edge to the ProviderOrderToken entity by ids.
func (m *ProviderProfileMutation) AddOrderTokenIDs(ids ...int) {
	if m.order_tokens == nil {
		m.order_tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.order_tokens[ids[i]] = struct{}{}
	}
}

// ClearOrderTokens clears the "order_tokens" edge to the ProviderOrderToken entity.
func (m *ProviderProfileMutation) ClearOrderTokens() {
	m.clearedorder_tokens = true
}

// OrderTokensCleared reports if the "order_tokens" edge to the ProviderOrderToken entity was cleared.
func (m *ProviderProfileMutation) OrderTokensCleared() bool {
	return m.clearedorder_tokens
}

// RemoveOrderTokenIDs removes the "order_tokens" edge to the ProviderOrderToken entity by IDs.
func (m *ProviderProfileMutation) RemoveOrderTokenIDs(ids ...int) {
	if m.removedorder_tokens == nil {
		m.removedorder_tokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.order_tokens, ids[i])
		m.removedorder_tokens[ids[i]] = struct{}{}
	}
}

// RemovedOrderTokens returns the removed IDs of the "order_tokens" edge to the ProviderOrderToken entity.
func (m *ProviderProfileMutation) RemovedOrderTokensIDs() (ids []int) {
	for id := range m.removedorder_tokens {
		ids = append(ids, id)
	}
	return
}

// OrderTokensIDs returns the "order_tokens" edge IDs in the mutation.
func (m *ProviderProfileMutation) OrderTokensIDs() (ids []int) {
	for id := range m.order_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetOrderTokens resets all changes to the "order_tokens" edge.
func (m *ProviderProfileMutation) ResetOrderTokens() {
	m.order_tokens = nil
	m.clearedorder_tokens = false
	m.removedorder_tokens = nil
}

// SetAvailabilityID sets the "availability" edge to the ProviderAvailability entity by id.
func (m *ProviderProfileMutation) SetAvailabilityID(id int) {
	m.availability = &id
}

// ClearAvailability clears the "availability" edge to the ProviderAvailability entity.
func (m *ProviderProfileMutation) ClearAvailability() {
	m.clearedavailability = true
}

// AvailabilityCleared reports if the "availability" edge to the ProviderAvailability entity was cleared.
func (m *ProviderProfileMutation) AvailabilityCleared() bool {
	return m.clearedavailability
}

// AvailabilityID returns the "availability" edge ID in the mutation.
func (m *ProviderProfileMutation) AvailabilityID() (id int, exists bool) {
	if m.availability != nil {
		return *m.availability, true
	}
	return
}

// AvailabilityIDs returns the "availability" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AvailabilityID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) AvailabilityIDs() (ids []int) {
	if id := m.availability; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAvailability resets all changes to the "availability" edge.
func (m *ProviderProfileMutation) ResetAvailability() {
	m.availability = nil
	m.clearedavailability = false
}

// SetProviderRatingID sets the "provider_rating" edge to the ProviderRating entity by id.
func (m *ProviderProfileMutation) SetProviderRatingID(id int) {
	m.provider_rating = &id
}

// ClearProviderRating clears the "provider_rating" edge to the ProviderRating entity.
func (m *ProviderProfileMutation) ClearProviderRating() {
	m.clearedprovider_rating = true
}

// ProviderRatingCleared reports if the "provider_rating" edge to the ProviderRating entity was cleared.
func (m *ProviderProfileMutation) ProviderRatingCleared() bool {
	return m.clearedprovider_rating
}

// ProviderRatingID returns the "provider_rating" edge ID in the mutation.
func (m *ProviderProfileMutation) ProviderRatingID() (id int, exists bool) {
	if m.provider_rating != nil {
		return *m.provider_rating, true
	}
	return
}

// ProviderRatingIDs returns the "provider_rating" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderRatingID instead. It exists only for internal usage by the builders.
func (m *ProviderProfileMutation) ProviderRatingIDs() (ids []int) {
	if id := m.provider_rating; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderRating resets all changes to the "provider_rating" edge.
func (m *ProviderProfileMutation) ResetProviderRating() {
	m.provider_rating = nil
	m.clearedprovider_rating = false
}

// AddAssignedOrderIDs adds the "assigned_orders" edge to the LockPaymentOrder entity by ids.
func (m *ProviderProfileMutation) AddAssignedOrderIDs(ids ...uuid.UUID) {
	if m.assigned_orders == nil {
		m.assigned_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.assigned_orders[ids[i]] = struct{}{}
	}
}

// ClearAssignedOrders clears the "assigned_orders" edge to the LockPaymentOrder entity.
func (m *ProviderProfileMutation) ClearAssignedOrders() {
	m.clearedassigned_orders = true
}

// AssignedOrdersCleared reports if the "assigned_orders" edge to the LockPaymentOrder entity was cleared.
func (m *ProviderProfileMutation) AssignedOrdersCleared() bool {
	return m.clearedassigned_orders
}

// RemoveAssignedOrderIDs removes the "assigned_orders" edge to the LockPaymentOrder entity by IDs.
func (m *ProviderProfileMutation) RemoveAssignedOrderIDs(ids ...uuid.UUID) {
	if m.removedassigned_orders == nil {
		m.removedassigned_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.assigned_orders, ids[i])
		m.removedassigned_orders[ids[i]] = struct{}{}
	}
}

// RemovedAssignedOrders returns the removed IDs of the "assigned_orders" edge to the LockPaymentOrder entity.
func (m *ProviderProfileMutation) RemovedAssignedOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedassigned_orders {
		ids = append(ids, id)
	}
	return
}

// AssignedOrdersIDs returns the "assigned_orders" edge IDs in the mutation.
func (m *ProviderProfileMutation) AssignedOrdersIDs() (ids []uuid.UUID) {
	for id := range m.assigned_orders {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedOrders resets all changes to the "assigned_orders" edge.
func (m *ProviderProfileMutation) ResetAssignedOrders() {
	m.assigned_orders = nil
	m.clearedassigned_orders = false
	m.removedassigned_orders = nil
}

// Where appends a list predicates to the ProviderProfileMutation builder.
func (m *ProviderProfileMutation) Where(ps ...predicate.ProviderProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderProfile).
func (m *ProviderProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderProfileMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, providerprofile.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, providerprofile.FieldUpdatedAt)
	}
	if m.trading_name != nil {
		fields = append(fields, providerprofile.FieldTradingName)
	}
	if m.country != nil {
		fields = append(fields, providerprofile.FieldCountry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerprofile.FieldCreatedAt:
		return m.CreatedAt()
	case providerprofile.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerprofile.FieldTradingName:
		return m.TradingName()
	case providerprofile.FieldCountry:
		return m.Country()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerprofile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case providerprofile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerprofile.FieldTradingName:
		return m.OldTradingName(ctx)
	case providerprofile.FieldCountry:
		return m.OldCountry(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerprofile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case providerprofile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerprofile.FieldTradingName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradingName(v)
		return nil
	case providerprofile.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderProfileMutation) ResetField(name string) error {
	switch name {
	case providerprofile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case providerprofile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerprofile.FieldTradingName:
		m.ResetTradingName()
		return nil
	case providerprofile.FieldCountry:
		m.ResetCountry()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.api_key != nil {
		edges = append(edges, providerprofile.EdgeAPIKey)
	}
	if m.provision_buckets != nil {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.order_tokens != nil {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.availability != nil {
		edges = append(edges, providerprofile.EdgeAvailability)
	}
	if m.provider_rating != nil {
		edges = append(edges, providerprofile.EdgeProviderRating)
	}
	if m.assigned_orders != nil {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerprofile.EdgeAPIKey:
		if id := m.api_key; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.provision_buckets))
		for id := range m.provision_buckets {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.order_tokens))
		for id := range m.order_tokens {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeAvailability:
		if id := m.availability; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeProviderRating:
		if id := m.provider_rating; id != nil {
			return []ent.Value{*id}
		}
	case providerprofile.EdgeAssignedOrders:
		ids := make([]ent.Value, 0, len(m.assigned_orders))
		for id := range m.assigned_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedprovision_buckets != nil {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.removedorder_tokens != nil {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.removedassigned_orders != nil {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case providerprofile.EdgeProvisionBuckets:
		ids := make([]ent.Value, 0, len(m.removedprovision_buckets))
		for id := range m.removedprovision_buckets {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeOrderTokens:
		ids := make([]ent.Value, 0, len(m.removedorder_tokens))
		for id := range m.removedorder_tokens {
			ids = append(ids, id)
		}
		return ids
	case providerprofile.EdgeAssignedOrders:
		ids := make([]ent.Value, 0, len(m.removedassigned_orders))
		for id := range m.removedassigned_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedapi_key {
		edges = append(edges, providerprofile.EdgeAPIKey)
	}
	if m.clearedprovision_buckets {
		edges = append(edges, providerprofile.EdgeProvisionBuckets)
	}
	if m.clearedorder_tokens {
		edges = append(edges, providerprofile.EdgeOrderTokens)
	}
	if m.clearedavailability {
		edges = append(edges, providerprofile.EdgeAvailability)
	}
	if m.clearedprovider_rating {
		edges = append(edges, providerprofile.EdgeProviderRating)
	}
	if m.clearedassigned_orders {
		edges = append(edges, providerprofile.EdgeAssignedOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case providerprofile.EdgeAPIKey:
		return m.clearedapi_key
	case providerprofile.EdgeProvisionBuckets:
		return m.clearedprovision_buckets
	case providerprofile.EdgeOrderTokens:
		return m.clearedorder_tokens
	case providerprofile.EdgeAvailability:
		return m.clearedavailability
	case providerprofile.EdgeProviderRating:
		return m.clearedprovider_rating
	case providerprofile.EdgeAssignedOrders:
		return m.clearedassigned_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderProfileMutation) ClearEdge(name string) error {
	switch name {
	case providerprofile.EdgeAPIKey:
		m.ClearAPIKey()
		return nil
	case providerprofile.EdgeAvailability:
		m.ClearAvailability()
		return nil
	case providerprofile.EdgeProviderRating:
		m.ClearProviderRating()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderProfileMutation) ResetEdge(name string) error {
	switch name {
	case providerprofile.EdgeAPIKey:
		m.ResetAPIKey()
		return nil
	case providerprofile.EdgeProvisionBuckets:
		m.ResetProvisionBuckets()
		return nil
	case providerprofile.EdgeOrderTokens:
		m.ResetOrderTokens()
		return nil
	case providerprofile.EdgeAvailability:
		m.ResetAvailability()
		return nil
	case providerprofile.EdgeProviderRating:
		m.ResetProviderRating()
		return nil
	case providerprofile.EdgeAssignedOrders:
		m.ResetAssignedOrders()
		return nil
	}
	return fmt.Errorf("unknown ProviderProfile edge %s", name)
}

// ProviderRatingMutation represents an operation that mutates the ProviderRating nodes in the graph.
type ProviderRatingMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	created_at              *time.Time
	updated_at              *time.Time
	trust_score             *decimal.Decimal
	addtrust_score          *decimal.Decimal
	clearedFields           map[string]struct{}
	provider_profile        *string
	clearedprovider_profile bool
	done                    bool
	oldValue                func(context.Context) (*ProviderRating, error)
	predicates              []predicate.ProviderRating
}

var _ ent.Mutation = (*ProviderRatingMutation)(nil)

// providerratingOption allows management of the mutation configuration using functional options.
type providerratingOption func(*ProviderRatingMutation)

// newProviderRatingMutation creates new mutation for the ProviderRating entity.
func newProviderRatingMutation(c config, op Op, opts ...providerratingOption) *ProviderRatingMutation {
	m := &ProviderRatingMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderRating,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderRatingID sets the ID field of the mutation.
func withProviderRatingID(id int) providerratingOption {
	return func(m *ProviderRatingMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderRating
		)
		m.oldValue = func(ctx context.Context) (*ProviderRating, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderRating.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderRating sets the old ProviderRating of the mutation.
func withProviderRating(node *ProviderRating) providerratingOption {
	return func(m *ProviderRatingMutation) {
		m.oldValue = func(context.Context) (*ProviderRating, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderRatingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderRatingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderRatingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderRatingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderRating.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderRatingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderRatingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderRatingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderRatingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderRatingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderRatingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTrustScore sets the "trust_score" field.
func (m *ProviderRatingMutation) SetTrustScore(d decimal.Decimal) {
	m.trust_score = &d
	m.addtrust_score = nil
}

// TrustScore returns the value of the "trust_score" field in the mutation.
func (m *ProviderRatingMutation) TrustScore() (r decimal.Decimal, exists bool) {
	v := m.trust_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScore returns the old "trust_score" field's value of the ProviderRating entity.
// If the ProviderRating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRatingMutation) OldTrustScore(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScore: %w", err)
	}
	return oldValue.TrustScore, nil
}

// AddTrustScore adds d to the "trust_score" field.
func (m *ProviderRatingMutation) AddTrustScore(d decimal.Decimal) {
	if m.addtrust_score != nil {
		*m.addtrust_score = m.addtrust_score.Add(d)
	} else {
		m.addtrust_score = &d
	}
}

// AddedTrustScore returns the value that was added to the "trust_score" field in this mutation.
func (m *ProviderRatingMutation) AddedTrustScore() (r decimal.Decimal, exists bool) {
	v := m.addtrust_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrustScore resets all changes to the "trust_score" field.
func (m *ProviderRatingMutation) ResetTrustScore() {
	m.trust_score = nil
	m.addtrust_score = nil
}

// SetProviderProfileID sets the "provider_profile" edge to the ProviderProfile entity by id.
func (m *ProviderRatingMutation) SetProviderProfileID(id string) {
	m.provider_profile = &id
}

// ClearProviderProfile clears the "provider_profile" edge to the ProviderProfile entity.
func (m *ProviderRatingMutation) ClearProviderProfile() {
	m.clearedprovider_profile = true
}

// ProviderProfileCleared reports if the "provider_profile" edge to the ProviderProfile entity was cleared.
func (m *ProviderRatingMutation) ProviderProfileCleared() bool {
	return m.clearedprovider_profile
}

// ProviderProfileID returns the "provider_profile" edge ID in the mutation.
func (m *ProviderRatingMutation) ProviderProfileID() (id string, exists bool) {
	if m.provider_profile != nil {
		return *m.provider_profile, true
	}
	return
}

// ProviderProfileIDs returns the "provider_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderProfileID instead. It exists only for internal usage by the builders.
func (m *ProviderRatingMutation) ProviderProfileIDs() (ids []string) {
	if id := m.provider_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderProfile resets all changes to the "provider_profile" edge.
func (m *ProviderRatingMutation) ResetProviderProfile() {
	m.provider_profile = nil
	m.clearedprovider_profile = false
}

// Where appends a list predicates to the ProviderRatingMutation builder.
func (m *ProviderRatingMutation) Where(ps ...predicate.ProviderRating) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderRatingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderRatingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderRating, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderRatingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderRatingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderRating).
func (m *ProviderRatingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderRatingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, providerrating.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, providerrating.FieldUpdatedAt)
	}
	if m.trust_score != nil {
		fields = append(fields, providerrating.FieldTrustScore)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderRatingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerrating.FieldCreatedAt:
		return m.CreatedAt()
	case providerrating.FieldUpdatedAt:
		return m.UpdatedAt()
	case providerrating.FieldTrustScore:
		return m.TrustScore()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderRatingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerrating.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case providerrating.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case providerrating.FieldTrustScore:
		return m.OldTrustScore(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderRating field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRatingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerrating.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case providerrating.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case providerrating.FieldTrustScore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScore(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRating field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderRatingMutation) AddedFields() []string {
	var fields []string
	if m.addtrust_score != nil {
		fields = append(fields, providerrating.FieldTrustScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderRatingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case providerrating.FieldTrustScore:
		return m.AddedTrustScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRatingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case providerrating.FieldTrustScore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScore(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRating numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderRatingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderRatingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderRatingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderRating nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderRatingMutation) ResetField(name string) error {
	switch name {
	case providerrating.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case providerrating.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case providerrating.FieldTrustScore:
		m.ResetTrustScore()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderRatingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.provider_profile != nil {
		edges = append(edges, providerrating.EdgeProviderProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderRatingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerrating.EdgeProviderProfile:
		if id := m.provider_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderRatingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderRatingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderRatingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprovider_profile {
		edges = append(edges, providerrating.EdgeProviderProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderRatingMutation) EdgeCleared(name string) bool {
	switch name {
	case providerrating.EdgeProviderProfile:
		return m.clearedprovider_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderRatingMutation) ClearEdge(name string) error {
	switch name {
	case providerrating.EdgeProviderProfile:
		m.ClearProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderRatingMutation) ResetEdge(name string) error {
	switch name {
	case providerrating.EdgeProviderProfile:
		m.ResetProviderProfile()
		return nil
	}
	return fmt.Errorf("unknown ProviderRating edge %s", name)
}

// ProvisionBucketMutation represents an operation that mutates the ProvisionBucket nodes in the graph.
type ProvisionBucketMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	min_amount                 *decimal.Decimal
	addmin_amount              *decimal.Decimal
	max_amount                 *decimal.Decimal
	addmax_amount              *decimal.Decimal
	currency                   *string
	created_at                 *time.Time
	clearedFields              map[string]struct{}
	lock_payment_orders        map[uuid.UUID]struct{}
	removedlock_payment_orders map[uuid.UUID]struct{}
	clearedlock_payment_orders bool
	provider_profiles          map[string]struct{}
	removedprovider_profiles   map[string]struct{}
	clearedprovider_profiles   bool
	done                       bool
	oldValue                   func(context.Context) (*ProvisionBucket, error)
	predicates                 []predicate.ProvisionBucket
}

var _ ent.Mutation = (*ProvisionBucketMutation)(nil)

// provisionbucketOption allows management of the mutation configuration using functional options.
type provisionbucketOption func(*ProvisionBucketMutation)

// newProvisionBucketMutation creates new mutation for the ProvisionBucket entity.
func newProvisionBucketMutation(c config, op Op, opts ...provisionbucketOption) *ProvisionBucketMutation {
	m := &ProvisionBucketMutation{
		config:        c,
		op:            op,
		typ:           TypeProvisionBucket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProvisionBucketID sets the ID field of the mutation.
func withProvisionBucketID(id int) provisionbucketOption {
	return func(m *ProvisionBucketMutation) {
		var (
			err   error
			once  sync.Once
			value *ProvisionBucket
		)
		m.oldValue = func(ctx context.Context) (*ProvisionBucket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProvisionBucket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvisionBucket sets the old ProvisionBucket of the mutation.
func withProvisionBucket(node *ProvisionBucket) provisionbucketOption {
	return func(m *ProvisionBucketMutation) {
		m.oldValue = func(context.Context) (*ProvisionBucket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProvisionBucketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProvisionBucketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProvisionBucketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProvisionBucketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProvisionBucket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMinAmount sets the "min_amount" field.
func (m *ProvisionBucketMutation) SetMinAmount(d decimal.Decimal) {
	m.min_amount = &d
	m.addmin_amount = nil
}

// MinAmount returns the value of the "min_amount" field in the mutation.
func (m *ProvisionBucketMutation) MinAmount() (r decimal.Decimal, exists bool) {
	v := m.min_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMinAmount returns the old "min_amount" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldMinAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinAmount: %w", err)
	}
	return oldValue.MinAmount, nil
}

// AddMinAmount adds d to the "min_amount" field.
func (m *ProvisionBucketMutation) AddMinAmount(d decimal.Decimal) {
	if m.addmin_amount != nil {
		*m.addmin_amount = m.addmin_amount.Add(d)
	} else {
		m.addmin_amount = &d
	}
}

// AddedMinAmount returns the value that was added to the "min_amount" field in this mutation.
func (m *ProvisionBucketMutation) AddedMinAmount() (r decimal.Decimal, exists bool) {
	v := m.addmin_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinAmount resets all changes to the "min_amount" field.
func (m *ProvisionBucketMutation) ResetMinAmount() {
	m.min_amount = nil
	m.addmin_amount = nil
}

// SetMaxAmount sets the "max_amount" field.
func (m *ProvisionBucketMutation) SetMaxAmount(d decimal.Decimal) {
	m.max_amount = &d
	m.addmax_amount = nil
}

// MaxAmount returns the value of the "max_amount" field in the mutation.
func (m *ProvisionBucketMutation) MaxAmount() (r decimal.Decimal, exists bool) {
	v := m.max_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxAmount returns the old "max_amount" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldMaxAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxAmount: %w", err)
	}
	return oldValue.MaxAmount, nil
}

// AddMaxAmount adds d to the "max_amount" field.
func (m *ProvisionBucketMutation) AddMaxAmount(d decimal.Decimal) {
	if m.addmax_amount != nil {
		*m.addmax_amount = m.addmax_amount.Add(d)
	} else {
		m.addmax_amount = &d
	}
}

// AddedMaxAmount returns the value that was added to the "max_amount" field in this mutation.
func (m *ProvisionBucketMutation) AddedMaxAmount() (r decimal.Decimal, exists bool) {
	v := m.addmax_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxAmount resets all changes to the "max_amount" field.
func (m *ProvisionBucketMutation) ResetMaxAmount() {
	m.max_amount = nil
	m.addmax_amount = nil
}

// SetCurrency sets the "currency" field.
func (m *ProvisionBucketMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *ProvisionBucketMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *ProvisionBucketMutation) ResetCurrency() {
	m.currency = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProvisionBucketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProvisionBucketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProvisionBucket entity.
// If the ProvisionBucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvisionBucketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProvisionBucketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by ids.
func (m *ProvisionBucketMutation) AddLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.lock_payment_orders == nil {
		m.lock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.lock_payment_orders[ids[i]] = struct{}{}
	}
}

// ClearLockPaymentOrders clears the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *ProvisionBucketMutation) ClearLockPaymentOrders() {
	m.clearedlock_payment_orders = true
}

// LockPaymentOrdersCleared reports if the "lock_payment_orders" edge to the LockPaymentOrder entity was cleared.
func (m *ProvisionBucketMutation) LockPaymentOrdersCleared() bool {
	return m.clearedlock_payment_orders
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (m *ProvisionBucketMutation) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedlock_payment_orders == nil {
		m.removedlock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.lock_payment_orders, ids[i])
		m.removedlock_payment_orders[ids[i]] = struct{}{}
	}
}

// RemovedLockPaymentOrders returns the removed IDs of the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *ProvisionBucketMutation) RemovedLockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedlock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// LockPaymentOrdersIDs returns the "lock_payment_orders" edge IDs in the mutation.
func (m *ProvisionBucketMutation) LockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.lock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetLockPaymentOrders resets all changes to the "lock_payment_orders" edge.
func (m *ProvisionBucketMutation) ResetLockPaymentOrders() {
	m.lock_payment_orders = nil
	m.clearedlock_payment_orders = false
	m.removedlock_payment_orders = nil
}

// AddProviderProfileIDs adds the "provider_profiles" edge to the ProviderProfile entity by ids.
func (m *ProvisionBucketMutation) AddProviderProfileIDs(ids ...string) {
	if m.provider_profiles == nil {
		m.provider_profiles = make(map[string]struct{})
	}
	for i := range ids {
		m.provider_profiles[ids[i]] = struct{}{}
	}
}

// ClearProviderProfiles clears the "provider_profiles" edge to the ProviderProfile entity.
func (m *ProvisionBucketMutation) ClearProviderProfiles() {
	m.clearedprovider_profiles = true
}

// ProviderProfilesCleared reports if the "provider_profiles" edge to the ProviderProfile entity was cleared.
func (m *ProvisionBucketMutation) ProviderProfilesCleared() bool {
	return m.clearedprovider_profiles
}

// RemoveProviderProfileIDs removes the "provider_profiles" edge to the ProviderProfile entity by IDs.
func (m *ProvisionBucketMutation) RemoveProviderProfileIDs(ids ...string) {
	if m.removedprovider_profiles == nil {
		m.removedprovider_profiles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.provider_profiles, ids[i])
		m.removedprovider_profiles[ids[i]] = struct{}{}
	}
}

// RemovedProviderProfiles returns the removed IDs of the "provider_profiles" edge to the ProviderProfile entity.
func (m *ProvisionBucketMutation) RemovedProviderProfilesIDs() (ids []string) {
	for id := range m.removedprovider_profiles {
		ids = append(ids, id)
	}
	return
}

// ProviderProfilesIDs returns the "provider_profiles" edge IDs in the mutation.
func (m *ProvisionBucketMutation) ProviderProfilesIDs() (ids []string) {
	for id := range m.provider_profiles {
		ids = append(ids, id)
	}
	return
}

// ResetProviderProfiles resets all changes to the "provider_profiles" edge.
func (m *ProvisionBucketMutation) ResetProviderProfiles() {
	m.provider_profiles = nil
	m.clearedprovider_profiles = false
	m.removedprovider_profiles = nil
}

// Where appends a list predicates to the ProvisionBucketMutation builder.
func (m *ProvisionBucketMutation) Where(ps ...predicate.ProvisionBucket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProvisionBucketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProvisionBucketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProvisionBucket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProvisionBucketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProvisionBucketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProvisionBucket).
func (m *ProvisionBucketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProvisionBucketMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.min_amount != nil {
		fields = append(fields, provisionbucket.FieldMinAmount)
	}
	if m.max_amount != nil {
		fields = append(fields, provisionbucket.FieldMaxAmount)
	}
	if m.currency != nil {
		fields = append(fields, provisionbucket.FieldCurrency)
	}
	if m.created_at != nil {
		fields = append(fields, provisionbucket.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProvisionBucketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.MinAmount()
	case provisionbucket.FieldMaxAmount:
		return m.MaxAmount()
	case provisionbucket.FieldCurrency:
		return m.Currency()
	case provisionbucket.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProvisionBucketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.OldMinAmount(ctx)
	case provisionbucket.FieldMaxAmount:
		return m.OldMaxAmount(ctx)
	case provisionbucket.FieldCurrency:
		return m.OldCurrency(ctx)
	case provisionbucket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvisionBucketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinAmount(v)
		return nil
	case provisionbucket.FieldMaxAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxAmount(v)
		return nil
	case provisionbucket.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case provisionbucket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProvisionBucketMutation) AddedFields() []string {
	var fields []string
	if m.addmin_amount != nil {
		fields = append(fields, provisionbucket.FieldMinAmount)
	}
	if m.addmax_amount != nil {
		fields = append(fields, provisionbucket.FieldMaxAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProvisionBucketMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case provisionbucket.FieldMinAmount:
		return m.AddedMinAmount()
	case provisionbucket.FieldMaxAmount:
		return m.AddedMaxAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvisionBucketMutation) AddField(name string, value ent.Value) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinAmount(v)
		return nil
	case provisionbucket.FieldMaxAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxAmount(v)
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProvisionBucketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProvisionBucketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProvisionBucketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProvisionBucket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProvisionBucketMutation) ResetField(name string) error {
	switch name {
	case provisionbucket.FieldMinAmount:
		m.ResetMinAmount()
		return nil
	case provisionbucket.FieldMaxAmount:
		m.ResetMaxAmount()
		return nil
	case provisionbucket.FieldCurrency:
		m.ResetCurrency()
		return nil
	case provisionbucket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProvisionBucketMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lock_payment_orders != nil {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.provider_profiles != nil {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProvisionBucketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provisionbucket.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.lock_payment_orders))
		for id := range m.lock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case provisionbucket.EdgeProviderProfiles:
		ids := make([]ent.Value, 0, len(m.provider_profiles))
		for id := range m.provider_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProvisionBucketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlock_payment_orders != nil {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.removedprovider_profiles != nil {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProvisionBucketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provisionbucket.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedlock_payment_orders))
		for id := range m.removedlock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	case provisionbucket.EdgeProviderProfiles:
		ids := make([]ent.Value, 0, len(m.removedprovider_profiles))
		for id := range m.removedprovider_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProvisionBucketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlock_payment_orders {
		edges = append(edges, provisionbucket.EdgeLockPaymentOrders)
	}
	if m.clearedprovider_profiles {
		edges = append(edges, provisionbucket.EdgeProviderProfiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProvisionBucketMutation) EdgeCleared(name string) bool {
	switch name {
	case provisionbucket.EdgeLockPaymentOrders:
		return m.clearedlock_payment_orders
	case provisionbucket.EdgeProviderProfiles:
		return m.clearedprovider_profiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProvisionBucketMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ProvisionBucket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProvisionBucketMutation) ResetEdge(name string) error {
	switch name {
	case provisionbucket.EdgeLockPaymentOrders:
		m.ResetLockPaymentOrders()
		return nil
	case provisionbucket.EdgeProviderProfiles:
		m.ResetProviderProfiles()
		return nil
	}
	return fmt.Errorf("unknown ProvisionBucket edge %s", name)
}

// ReceiveAddressMutation represents an operation that mutates the ReceiveAddress nodes in the graph.
type ReceiveAddressMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	created_at            *time.Time
	updated_at            *time.Time
	address               *string
	salt                  *[]byte
	status                *receiveaddress.Status
	last_indexed_block    *int64
	addlast_indexed_block *int64
	last_used             *time.Time
	valid_until           *time.Time
	clearedFields         map[string]struct{}
	payment_order         *uuid.UUID
	clearedpayment_order  bool
	done                  bool
	oldValue              func(context.Context) (*ReceiveAddress, error)
	predicates            []predicate.ReceiveAddress
}

var _ ent.Mutation = (*ReceiveAddressMutation)(nil)

// receiveaddressOption allows management of the mutation configuration using functional options.
type receiveaddressOption func(*ReceiveAddressMutation)

// newReceiveAddressMutation creates new mutation for the ReceiveAddress entity.
func newReceiveAddressMutation(c config, op Op, opts ...receiveaddressOption) *ReceiveAddressMutation {
	m := &ReceiveAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeReceiveAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReceiveAddressID sets the ID field of the mutation.
func withReceiveAddressID(id int) receiveaddressOption {
	return func(m *ReceiveAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *ReceiveAddress
		)
		m.oldValue = func(ctx context.Context) (*ReceiveAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReceiveAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReceiveAddress sets the old ReceiveAddress of the mutation.
func withReceiveAddress(node *ReceiveAddress) receiveaddressOption {
	return func(m *ReceiveAddressMutation) {
		m.oldValue = func(context.Context) (*ReceiveAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReceiveAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReceiveAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReceiveAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReceiveAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReceiveAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReceiveAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReceiveAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReceiveAddressMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReceiveAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReceiveAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReceiveAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAddress sets the "address" field.
func (m *ReceiveAddressMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ReceiveAddressMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ReceiveAddressMutation) ResetAddress() {
	m.address = nil
}

// SetSalt sets the "salt" field.
func (m *ReceiveAddressMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *ReceiveAddressMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *ReceiveAddressMutation) ResetSalt() {
	m.salt = nil
}

// SetStatus sets the "status" field.
func (m *ReceiveAddressMutation) SetStatus(r receiveaddress.Status) {
	m.status = &r
}

// Status returns the value of the "status" field in the mutation.
func (m *ReceiveAddressMutation) Status() (r receiveaddress.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldStatus(ctx context.Context) (v receiveaddress.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ReceiveAddressMutation) ResetStatus() {
	m.status = nil
}

// SetLastIndexedBlock sets the "last_indexed_block" field.
func (m *ReceiveAddressMutation) SetLastIndexedBlock(i int64) {
	m.last_indexed_block = &i
	m.addlast_indexed_block = nil
}

// LastIndexedBlock returns the value of the "last_indexed_block" field in the mutation.
func (m *ReceiveAddressMutation) LastIndexedBlock() (r int64, exists bool) {
	v := m.last_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// OldLastIndexedBlock returns the old "last_indexed_block" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldLastIndexedBlock(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastIndexedBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastIndexedBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastIndexedBlock: %w", err)
	}
	return oldValue.LastIndexedBlock, nil
}

// AddLastIndexedBlock adds i to the "last_indexed_block" field.
func (m *ReceiveAddressMutation) AddLastIndexedBlock(i int64) {
	if m.addlast_indexed_block != nil {
		*m.addlast_indexed_block += i
	} else {
		m.addlast_indexed_block = &i
	}
}

// AddedLastIndexedBlock returns the value that was added to the "last_indexed_block" field in this mutation.
func (m *ReceiveAddressMutation) AddedLastIndexedBlock() (r int64, exists bool) {
	v := m.addlast_indexed_block
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastIndexedBlock clears the value of the "last_indexed_block" field.
func (m *ReceiveAddressMutation) ClearLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	m.clearedFields[receiveaddress.FieldLastIndexedBlock] = struct{}{}
}

// LastIndexedBlockCleared returns if the "last_indexed_block" field was cleared in this mutation.
func (m *ReceiveAddressMutation) LastIndexedBlockCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldLastIndexedBlock]
	return ok
}

// ResetLastIndexedBlock resets all changes to the "last_indexed_block" field.
func (m *ReceiveAddressMutation) ResetLastIndexedBlock() {
	m.last_indexed_block = nil
	m.addlast_indexed_block = nil
	delete(m.clearedFields, receiveaddress.FieldLastIndexedBlock)
}

// SetLastUsed sets the "last_used" field.
func (m *ReceiveAddressMutation) SetLastUsed(t time.Time) {
	m.last_used = &t
}

// LastUsed returns the value of the "last_used" field in the mutation.
func (m *ReceiveAddressMutation) LastUsed() (r time.Time, exists bool) {
	v := m.last_used
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsed returns the old "last_used" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldLastUsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsed: %w", err)
	}
	return oldValue.LastUsed, nil
}

// ClearLastUsed clears the value of the "last_used" field.
func (m *ReceiveAddressMutation) ClearLastUsed() {
	m.last_used = nil
	m.clearedFields[receiveaddress.FieldLastUsed] = struct{}{}
}

// LastUsedCleared returns if the "last_used" field was cleared in this mutation.
func (m *ReceiveAddressMutation) LastUsedCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldLastUsed]
	return ok
}

// ResetLastUsed resets all changes to the "last_used" field.
func (m *ReceiveAddressMutation) ResetLastUsed() {
	m.last_used = nil
	delete(m.clearedFields, receiveaddress.FieldLastUsed)
}

// SetValidUntil sets the "valid_until" field.
func (m *ReceiveAddressMutation) SetValidUntil(t time.Time) {
	m.valid_until = &t
}

// ValidUntil returns the value of the "valid_until" field in the mutation.
func (m *ReceiveAddressMutation) ValidUntil() (r time.Time, exists bool) {
	v := m.valid_until
	if v == nil {
		return
	}
	return *v, true
}

// OldValidUntil returns the old "valid_until" field's value of the ReceiveAddress entity.
// If the ReceiveAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceiveAddressMutation) OldValidUntil(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidUntil: %w", err)
	}
	return oldValue.ValidUntil, nil
}

// ClearValidUntil clears the value of the "valid_until" field.
func (m *ReceiveAddressMutation) ClearValidUntil() {
	m.valid_until = nil
	m.clearedFields[receiveaddress.FieldValidUntil] = struct{}{}
}

// ValidUntilCleared returns if the "valid_until" field was cleared in this mutation.
func (m *ReceiveAddressMutation) ValidUntilCleared() bool {
	_, ok := m.clearedFields[receiveaddress.FieldValidUntil]
	return ok
}

// ResetValidUntil resets all changes to the "valid_until" field.
func (m *ReceiveAddressMutation) ResetValidUntil() {
	m.valid_until = nil
	delete(m.clearedFields, receiveaddress.FieldValidUntil)
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by id.
func (m *ReceiveAddressMutation) SetPaymentOrderID(id uuid.UUID) {
	m.payment_order = &id
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (m *ReceiveAddressMutation) ClearPaymentOrder() {
	m.clearedpayment_order = true
}

// PaymentOrderCleared reports if the "payment_order" edge to the PaymentOrder entity was cleared.
func (m *ReceiveAddressMutation) PaymentOrderCleared() bool {
	return m.clearedpayment_order
}

// PaymentOrderID returns the "payment_order" edge ID in the mutation.
func (m *ReceiveAddressMutation) PaymentOrderID() (id uuid.UUID, exists bool) {
	if m.payment_order != nil {
		return *m.payment_order, true
	}
	return
}

// PaymentOrderIDs returns the "payment_order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentOrderID instead. It exists only for internal usage by the builders.
func (m *ReceiveAddressMutation) PaymentOrderIDs() (ids []uuid.UUID) {
	if id := m.payment_order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymentOrder resets all changes to the "payment_order" edge.
func (m *ReceiveAddressMutation) ResetPaymentOrder() {
	m.payment_order = nil
	m.clearedpayment_order = false
}

// Where appends a list predicates to the ReceiveAddressMutation builder.
func (m *ReceiveAddressMutation) Where(ps ...predicate.ReceiveAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReceiveAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReceiveAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ReceiveAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReceiveAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReceiveAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ReceiveAddress).
func (m *ReceiveAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReceiveAddressMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, receiveaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, receiveaddress.FieldUpdatedAt)
	}
	if m.address != nil {
		fields = append(fields, receiveaddress.FieldAddress)
	}
	if m.salt != nil {
		fields = append(fields, receiveaddress.FieldSalt)
	}
	if m.status != nil {
		fields = append(fields, receiveaddress.FieldStatus)
	}
	if m.last_indexed_block != nil {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	if m.last_used != nil {
		fields = append(fields, receiveaddress.FieldLastUsed)
	}
	if m.valid_until != nil {
		fields = append(fields, receiveaddress.FieldValidUntil)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReceiveAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case receiveaddress.FieldCreatedAt:
		return m.CreatedAt()
	case receiveaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case receiveaddress.FieldAddress:
		return m.Address()
	case receiveaddress.FieldSalt:
		return m.Salt()
	case receiveaddress.FieldStatus:
		return m.Status()
	case receiveaddress.FieldLastIndexedBlock:
		return m.LastIndexedBlock()
	case receiveaddress.FieldLastUsed:
		return m.LastUsed()
	case receiveaddress.FieldValidUntil:
		return m.ValidUntil()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReceiveAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case receiveaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case receiveaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case receiveaddress.FieldAddress:
		return m.OldAddress(ctx)
	case receiveaddress.FieldSalt:
		return m.OldSalt(ctx)
	case receiveaddress.FieldStatus:
		return m.OldStatus(ctx)
	case receiveaddress.FieldLastIndexedBlock:
		return m.OldLastIndexedBlock(ctx)
	case receiveaddress.FieldLastUsed:
		return m.OldLastUsed(ctx)
	case receiveaddress.FieldValidUntil:
		return m.OldValidUntil(ctx)
	}
	return nil, fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceiveAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case receiveaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case receiveaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case receiveaddress.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case receiveaddress.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case receiveaddress.FieldStatus:
		v, ok := value.(receiveaddress.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case receiveaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastIndexedBlock(v)
		return nil
	case receiveaddress.FieldLastUsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsed(v)
		return nil
	case receiveaddress.FieldValidUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidUntil(v)
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReceiveAddressMutation) AddedFields() []string {
	var fields []string
	if m.addlast_indexed_block != nil {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReceiveAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		return m.AddedLastIndexedBlock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceiveAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastIndexedBlock(v)
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReceiveAddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(receiveaddress.FieldLastIndexedBlock) {
		fields = append(fields, receiveaddress.FieldLastIndexedBlock)
	}
	if m.FieldCleared(receiveaddress.FieldLastUsed) {
		fields = append(fields, receiveaddress.FieldLastUsed)
	}
	if m.FieldCleared(receiveaddress.FieldValidUntil) {
		fields = append(fields, receiveaddress.FieldValidUntil)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReceiveAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReceiveAddressMutation) ClearField(name string) error {
	switch name {
	case receiveaddress.FieldLastIndexedBlock:
		m.ClearLastIndexedBlock()
		return nil
	case receiveaddress.FieldLastUsed:
		m.ClearLastUsed()
		return nil
	case receiveaddress.FieldValidUntil:
		m.ClearValidUntil()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReceiveAddressMutation) ResetField(name string) error {
	switch name {
	case receiveaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case receiveaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case receiveaddress.FieldAddress:
		m.ResetAddress()
		return nil
	case receiveaddress.FieldSalt:
		m.ResetSalt()
		return nil
	case receiveaddress.FieldStatus:
		m.ResetStatus()
		return nil
	case receiveaddress.FieldLastIndexedBlock:
		m.ResetLastIndexedBlock()
		return nil
	case receiveaddress.FieldLastUsed:
		m.ResetLastUsed()
		return nil
	case receiveaddress.FieldValidUntil:
		m.ResetValidUntil()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReceiveAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_order != nil {
		edges = append(edges, receiveaddress.EdgePaymentOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReceiveAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		if id := m.payment_order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReceiveAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReceiveAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReceiveAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_order {
		edges = append(edges, receiveaddress.EdgePaymentOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReceiveAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		return m.clearedpayment_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReceiveAddressMutation) ClearEdge(name string) error {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		m.ClearPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReceiveAddressMutation) ResetEdge(name string) error {
	switch name {
	case receiveaddress.EdgePaymentOrder:
		m.ResetPaymentOrder()
		return nil
	}
	return fmt.Errorf("unknown ReceiveAddress edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	symbol                     *string
	contract_address           *string
	decimals                   *int8
	adddecimals                *int8
	is_enabled                 *bool
	clearedFields              map[string]struct{}
	network                    *int
	clearednetwork             bool
	payment_orders             map[uuid.UUID]struct{}
	removedpayment_orders      map[uuid.UUID]struct{}
	clearedpayment_orders      bool
	lock_payment_orders        map[uuid.UUID]struct{}
	removedlock_payment_orders map[uuid.UUID]struct{}
	clearedlock_payment_orders bool
	done                       bool
	oldValue                   func(context.Context) (*Token, error)
	predicates                 []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id int) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSymbol sets the "symbol" field.
func (m *TokenMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *TokenMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *TokenMutation) ResetSymbol() {
	m.symbol = nil
}

// SetContractAddress sets the "contract_address" field.
func (m *TokenMutation) SetContractAddress(s string) {
	m.contract_address = &s
}

// ContractAddress returns the value of the "contract_address" field in the mutation.
func (m *TokenMutation) ContractAddress() (r string, exists bool) {
	v := m.contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContractAddress returns the old "contract_address" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractAddress: %w", err)
	}
	return oldValue.ContractAddress, nil
}

// ResetContractAddress resets all changes to the "contract_address" field.
func (m *TokenMutation) ResetContractAddress() {
	m.contract_address = nil
}

// SetDecimals sets the "decimals" field.
func (m *TokenMutation) SetDecimals(i int8) {
	m.decimals = &i
	m.adddecimals = nil
}

// Decimals returns the value of the "decimals" field in the mutation.
func (m *TokenMutation) Decimals() (r int8, exists bool) {
	v := m.decimals
	if v == nil {
		return
	}
	return *v, true
}

// OldDecimals returns the old "decimals" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldDecimals(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDecimals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDecimals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDecimals: %w", err)
	}
	return oldValue.Decimals, nil
}

// AddDecimals adds i to the "decimals" field.
func (m *TokenMutation) AddDecimals(i int8) {
	if m.adddecimals != nil {
		*m.adddecimals += i
	} else {
		m.adddecimals = &i
	}
}

// AddedDecimals returns the value that was added to the "decimals" field in this mutation.
func (m *TokenMutation) AddedDecimals() (r int8, exists bool) {
	v := m.adddecimals
	if v == nil {
		return
	}
	return *v, true
}

// ResetDecimals resets all changes to the "decimals" field.
func (m *TokenMutation) ResetDecimals() {
	m.decimals = nil
	m.adddecimals = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *TokenMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *TokenMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *TokenMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// SetNetworkID sets the "network" edge to the Network entity by id.
func (m *TokenMutation) SetNetworkID(id int) {
	m.network = &id
}

// ClearNetwork clears the "network" edge to the Network entity.
func (m *TokenMutation) ClearNetwork() {
	m.clearednetwork = true
}

// NetworkCleared reports if the "network" edge to the Network entity was cleared.
func (m *TokenMutation) NetworkCleared() bool {
	return m.clearednetwork
}

// NetworkID returns the "network" edge ID in the mutation.
func (m *TokenMutation) NetworkID() (id int, exists bool) {
	if m.network != nil {
		return *m.network, true
	}
	return
}

// NetworkIDs returns the "network" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NetworkID instead. It exists only for internal usage by the builders.
func (m *TokenMutation) NetworkIDs() (ids []int) {
	if id := m.network; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNetwork resets all changes to the "network" edge.
func (m *TokenMutation) ResetNetwork() {
	m.network = nil
	m.clearednetwork = false
}

// AddPaymentOrderIDs adds the "payment_orders" edge to the PaymentOrder entity by ids.
func (m *TokenMutation) AddPaymentOrderIDs(ids ...uuid.UUID) {
	if m.payment_orders == nil {
		m.payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.payment_orders[ids[i]] = struct{}{}
	}
}

// ClearPaymentOrders clears the "payment_orders" edge to the PaymentOrder entity.
func (m *TokenMutation) ClearPaymentOrders() {
	m.clearedpayment_orders = true
}

// PaymentOrdersCleared reports if the "payment_orders" edge to the PaymentOrder entity was cleared.
func (m *TokenMutation) PaymentOrdersCleared() bool {
	return m.clearedpayment_orders
}

// RemovePaymentOrderIDs removes the "payment_orders" edge to the PaymentOrder entity by IDs.
func (m *TokenMutation) RemovePaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedpayment_orders == nil {
		m.removedpayment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.payment_orders, ids[i])
		m.removedpayment_orders[ids[i]] = struct{}{}
	}
}

// RemovedPaymentOrders returns the removed IDs of the "payment_orders" edge to the PaymentOrder entity.
func (m *TokenMutation) RemovedPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedpayment_orders {
		ids = append(ids, id)
	}
	return
}

// PaymentOrdersIDs returns the "payment_orders" edge IDs in the mutation.
func (m *TokenMutation) PaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentOrders resets all changes to the "payment_orders" edge.
func (m *TokenMutation) ResetPaymentOrders() {
	m.payment_orders = nil
	m.clearedpayment_orders = false
	m.removedpayment_orders = nil
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by ids.
func (m *TokenMutation) AddLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.lock_payment_orders == nil {
		m.lock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.lock_payment_orders[ids[i]] = struct{}{}
	}
}

// ClearLockPaymentOrders clears the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *TokenMutation) ClearLockPaymentOrders() {
	m.clearedlock_payment_orders = true
}

// LockPaymentOrdersCleared reports if the "lock_payment_orders" edge to the LockPaymentOrder entity was cleared.
func (m *TokenMutation) LockPaymentOrdersCleared() bool {
	return m.clearedlock_payment_orders
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (m *TokenMutation) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) {
	if m.removedlock_payment_orders == nil {
		m.removedlock_payment_orders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.lock_payment_orders, ids[i])
		m.removedlock_payment_orders[ids[i]] = struct{}{}
	}
}

// RemovedLockPaymentOrders returns the removed IDs of the "lock_payment_orders" edge to the LockPaymentOrder entity.
func (m *TokenMutation) RemovedLockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.removedlock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// LockPaymentOrdersIDs returns the "lock_payment_orders" edge IDs in the mutation.
func (m *TokenMutation) LockPaymentOrdersIDs() (ids []uuid.UUID) {
	for id := range m.lock_payment_orders {
		ids = append(ids, id)
	}
	return
}

// ResetLockPaymentOrders resets all changes to the "lock_payment_orders" edge.
func (m *TokenMutation) ResetLockPaymentOrders() {
	m.lock_payment_orders = nil
	m.clearedlock_payment_orders = false
	m.removedlock_payment_orders = nil
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, token.FieldUpdatedAt)
	}
	if m.symbol != nil {
		fields = append(fields, token.FieldSymbol)
	}
	if m.contract_address != nil {
		fields = append(fields, token.FieldContractAddress)
	}
	if m.decimals != nil {
		fields = append(fields, token.FieldDecimals)
	}
	if m.is_enabled != nil {
		fields = append(fields, token.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldCreatedAt:
		return m.CreatedAt()
	case token.FieldUpdatedAt:
		return m.UpdatedAt()
	case token.FieldSymbol:
		return m.Symbol()
	case token.FieldContractAddress:
		return m.ContractAddress()
	case token.FieldDecimals:
		return m.Decimals()
	case token.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case token.FieldSymbol:
		return m.OldSymbol(ctx)
	case token.FieldContractAddress:
		return m.OldContractAddress(ctx)
	case token.FieldDecimals:
		return m.OldDecimals(ctx)
	case token.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case token.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case token.FieldContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractAddress(v)
		return nil
	case token.FieldDecimals:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDecimals(v)
		return nil
	case token.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	var fields []string
	if m.adddecimals != nil {
		fields = append(fields, token.FieldDecimals)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case token.FieldDecimals:
		return m.AddedDecimals()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case token.FieldDecimals:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDecimals(v)
		return nil
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case token.FieldSymbol:
		m.ResetSymbol()
		return nil
	case token.FieldContractAddress:
		m.ResetContractAddress()
		return nil
	case token.FieldDecimals:
		m.ResetDecimals()
		return nil
	case token.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.network != nil {
		edges = append(edges, token.EdgeNetwork)
	}
	if m.payment_orders != nil {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.lock_payment_orders != nil {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case token.EdgeNetwork:
		if id := m.network; id != nil {
			return []ent.Value{*id}
		}
	case token.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.payment_orders))
		for id := range m.payment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.lock_payment_orders))
		for id := range m.lock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpayment_orders != nil {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.removedlock_payment_orders != nil {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case token.EdgePaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedpayment_orders))
		for id := range m.removedpayment_orders {
			ids = append(ids, id)
		}
		return ids
	case token.EdgeLockPaymentOrders:
		ids := make([]ent.Value, 0, len(m.removedlock_payment_orders))
		for id := range m.removedlock_payment_orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearednetwork {
		edges = append(edges, token.EdgeNetwork)
	}
	if m.clearedpayment_orders {
		edges = append(edges, token.EdgePaymentOrders)
	}
	if m.clearedlock_payment_orders {
		edges = append(edges, token.EdgeLockPaymentOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case token.EdgeNetwork:
		return m.clearednetwork
	case token.EdgePaymentOrders:
		return m.clearedpayment_orders
	case token.EdgeLockPaymentOrders:
		return m.clearedlock_payment_orders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	switch name {
	case token.EdgeNetwork:
		m.ClearNetwork()
		return nil
	}
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	switch name {
	case token.EdgeNetwork:
		m.ResetNetwork()
		return nil
	case token.EdgePaymentOrders:
		m.ResetPaymentOrders()
		return nil
	case token.EdgeLockPaymentOrders:
		m.ResetLockPaymentOrders()
		return nil
	}
	return fmt.Errorf("unknown Token edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *time.Time
	updated_at                *time.Time
	first_name                *string
	last_name                 *string
	email                     *string
	password                  *string
	is_verified               *bool
	clearedFields             map[string]struct{}
	api_keys                  map[uuid.UUID]struct{}
	removedapi_keys           map[uuid.UUID]struct{}
	clearedapi_keys           bool
	verification_token        map[uuid.UUID]struct{}
	removedverification_token map[uuid.UUID]struct{}
	clearedverification_token bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetIsVerified sets the "is_verified" field.
func (m *UserMutation) SetIsVerified(b bool) {
	m.is_verified = &b
}

// IsVerified returns the value of the "is_verified" field in the mutation.
func (m *UserMutation) IsVerified() (r bool, exists bool) {
	v := m.is_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsVerified returns the old "is_verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsVerified: %w", err)
	}
	return oldValue.IsVerified, nil
}

// ResetIsVerified resets all changes to the "is_verified" field.
func (m *UserMutation) ResetIsVerified() {
	m.is_verified = nil
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by ids.
func (m *UserMutation) AddAPIKeyIDs(ids ...uuid.UUID) {
	if m.api_keys == nil {
		m.api_keys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.api_keys[ids[i]] = struct{}{}
	}
}

// ClearAPIKeys clears the "api_keys" edge to the APIKey entity.
func (m *UserMutation) ClearAPIKeys() {
	m.clearedapi_keys = true
}

// APIKeysCleared reports if the "api_keys" edge to the APIKey entity was cleared.
func (m *UserMutation) APIKeysCleared() bool {
	return m.clearedapi_keys
}

// RemoveAPIKeyIDs removes the "api_keys" edge to the APIKey entity by IDs.
func (m *UserMutation) RemoveAPIKeyIDs(ids ...uuid.UUID) {
	if m.removedapi_keys == nil {
		m.removedapi_keys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.api_keys, ids[i])
		m.removedapi_keys[ids[i]] = struct{}{}
	}
}

// RemovedAPIKeys returns the removed IDs of the "api_keys" edge to the APIKey entity.
func (m *UserMutation) RemovedAPIKeysIDs() (ids []uuid.UUID) {
	for id := range m.removedapi_keys {
		ids = append(ids, id)
	}
	return
}

// APIKeysIDs returns the "api_keys" edge IDs in the mutation.
func (m *UserMutation) APIKeysIDs() (ids []uuid.UUID) {
	for id := range m.api_keys {
		ids = append(ids, id)
	}
	return
}

// ResetAPIKeys resets all changes to the "api_keys" edge.
func (m *UserMutation) ResetAPIKeys() {
	m.api_keys = nil
	m.clearedapi_keys = false
	m.removedapi_keys = nil
}

// AddVerificationTokenIDs adds the "verification_token" edge to the VerificationToken entity by ids.
func (m *UserMutation) AddVerificationTokenIDs(ids ...uuid.UUID) {
	if m.verification_token == nil {
		m.verification_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.verification_token[ids[i]] = struct{}{}
	}
}

// ClearVerificationToken clears the "verification_token" edge to the VerificationToken entity.
func (m *UserMutation) ClearVerificationToken() {
	m.clearedverification_token = true
}

// VerificationTokenCleared reports if the "verification_token" edge to the VerificationToken entity was cleared.
func (m *UserMutation) VerificationTokenCleared() bool {
	return m.clearedverification_token
}

// RemoveVerificationTokenIDs removes the "verification_token" edge to the VerificationToken entity by IDs.
func (m *UserMutation) RemoveVerificationTokenIDs(ids ...uuid.UUID) {
	if m.removedverification_token == nil {
		m.removedverification_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.verification_token, ids[i])
		m.removedverification_token[ids[i]] = struct{}{}
	}
}

// RemovedVerificationToken returns the removed IDs of the "verification_token" edge to the VerificationToken entity.
func (m *UserMutation) RemovedVerificationTokenIDs() (ids []uuid.UUID) {
	for id := range m.removedverification_token {
		ids = append(ids, id)
	}
	return
}

// VerificationTokenIDs returns the "verification_token" edge IDs in the mutation.
func (m *UserMutation) VerificationTokenIDs() (ids []uuid.UUID) {
	for id := range m.verification_token {
		ids = append(ids, id)
	}
	return
}

// ResetVerificationToken resets all changes to the "verification_token" edge.
func (m *UserMutation) ResetVerificationToken() {
	m.verification_token = nil
	m.clearedverification_token = false
	m.removedverification_token = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.is_verified != nil {
		fields = append(fields, user.FieldIsVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldIsVerified:
		return m.IsVerified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldIsVerified:
		return m.OldIsVerified(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldIsVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsVerified(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldIsVerified:
		m.ResetIsVerified()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.api_keys != nil {
		edges = append(edges, user.EdgeAPIKeys)
	}
	if m.verification_token != nil {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.api_keys))
		for id := range m.api_keys {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVerificationToken:
		ids := make([]ent.Value, 0, len(m.verification_token))
		for id := range m.verification_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedapi_keys != nil {
		edges = append(edges, user.EdgeAPIKeys)
	}
	if m.removedverification_token != nil {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.removedapi_keys))
		for id := range m.removedapi_keys {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVerificationToken:
		ids := make([]ent.Value, 0, len(m.removedverification_token))
		for id := range m.removedverification_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapi_keys {
		edges = append(edges, user.EdgeAPIKeys)
	}
	if m.clearedverification_token {
		edges = append(edges, user.EdgeVerificationToken)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeAPIKeys:
		return m.clearedapi_keys
	case user.EdgeVerificationToken:
		return m.clearedverification_token
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAPIKeys:
		m.ResetAPIKeys()
		return nil
	case user.EdgeVerificationToken:
		m.ResetVerificationToken()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VerificationTokenMutation represents an operation that mutates the VerificationToken nodes in the graph.
type VerificationTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	token         *string
	scope         *verificationtoken.Scope
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*VerificationToken, error)
	predicates    []predicate.VerificationToken
}

var _ ent.Mutation = (*VerificationTokenMutation)(nil)

// verificationtokenOption allows management of the mutation configuration using functional options.
type verificationtokenOption func(*VerificationTokenMutation)

// newVerificationTokenMutation creates new mutation for the VerificationToken entity.
func newVerificationTokenMutation(c config, op Op, opts ...verificationtokenOption) *VerificationTokenMutation {
	m := &VerificationTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeVerificationToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVerificationTokenID sets the ID field of the mutation.
func withVerificationTokenID(id uuid.UUID) verificationtokenOption {
	return func(m *VerificationTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *VerificationToken
		)
		m.oldValue = func(ctx context.Context) (*VerificationToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VerificationToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVerificationToken sets the old VerificationToken of the mutation.
func withVerificationToken(node *VerificationToken) verificationtokenOption {
	return func(m *VerificationTokenMutation) {
		m.oldValue = func(context.Context) (*VerificationToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VerificationTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VerificationTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VerificationToken entities.
func (m *VerificationTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VerificationTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VerificationTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VerificationToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *VerificationTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VerificationTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VerificationTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VerificationTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VerificationTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VerificationTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetToken sets the "token" field.
func (m *VerificationTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *VerificationTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *VerificationTokenMutation) ResetToken() {
	m.token = nil
}

// SetScope sets the "scope" field.
func (m *VerificationTokenMutation) SetScope(v verificationtoken.Scope) {
	m.scope = &v
}

// Scope returns the value of the "scope" field in the mutation.
func (m *VerificationTokenMutation) Scope() (r verificationtoken.Scope, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the VerificationToken entity.
// If the VerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationTokenMutation) OldScope(ctx context.Context) (v verificationtoken.Scope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *VerificationTokenMutation) ResetScope() {
	m.scope = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *VerificationTokenMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *VerificationTokenMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *VerificationTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *VerificationTokenMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *VerificationTokenMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *VerificationTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the VerificationTokenMutation builder.
func (m *VerificationTokenMutation) Where(ps ...predicate.VerificationToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VerificationTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VerificationTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VerificationToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VerificationTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VerificationTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VerificationToken).
func (m *VerificationTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VerificationTokenMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, verificationtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, verificationtoken.FieldUpdatedAt)
	}
	if m.token != nil {
		fields = append(fields, verificationtoken.FieldToken)
	}
	if m.scope != nil {
		fields = append(fields, verificationtoken.FieldScope)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VerificationTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case verificationtoken.FieldCreatedAt:
		return m.CreatedAt()
	case verificationtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case verificationtoken.FieldToken:
		return m.Token()
	case verificationtoken.FieldScope:
		return m.Scope()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VerificationTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case verificationtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case verificationtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case verificationtoken.FieldToken:
		return m.OldToken(ctx)
	case verificationtoken.FieldScope:
		return m.OldScope(ctx)
	}
	return nil, fmt.Errorf("unknown VerificationToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case verificationtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case verificationtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case verificationtoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case verificationtoken.FieldScope:
		v, ok := value.(verificationtoken.Scope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	}
	return fmt.Errorf("unknown VerificationToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VerificationTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VerificationTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VerificationToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VerificationTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VerificationTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VerificationTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VerificationToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VerificationTokenMutation) ResetField(name string) error {
	switch name {
	case verificationtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case verificationtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case verificationtoken.FieldToken:
		m.ResetToken()
		return nil
	case verificationtoken.FieldScope:
		m.ResetScope()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VerificationTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, verificationtoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VerificationTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case verificationtoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VerificationTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VerificationTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VerificationTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, verificationtoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VerificationTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case verificationtoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VerificationTokenMutation) ClearEdge(name string) error {
	switch name {
	case verificationtoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VerificationTokenMutation) ResetEdge(name string) error {
	switch name {
	case verificationtoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown VerificationToken edge %s", name)
}
