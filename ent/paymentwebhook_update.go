// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/network"
	"github.com/paycrest/aggregator/ent/paymentorder"
	"github.com/paycrest/aggregator/ent/paymentwebhook"
	"github.com/paycrest/aggregator/ent/predicate"
)

// PaymentWebhookUpdate is the builder for updating PaymentWebhook entities.
type PaymentWebhookUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentWebhookMutation
}

// Where appends a list predicates to the PaymentWebhookUpdate builder.
func (pwu *PaymentWebhookUpdate) Where(ps ...predicate.PaymentWebhook) *PaymentWebhookUpdate {
	pwu.mutation.Where(ps...)
	return pwu
}

// SetUpdatedAt sets the "updated_at" field.
func (pwu *PaymentWebhookUpdate) SetUpdatedAt(t time.Time) *PaymentWebhookUpdate {
	pwu.mutation.SetUpdatedAt(t)
	return pwu
}

// SetWebhookID sets the "webhook_id" field.
func (pwu *PaymentWebhookUpdate) SetWebhookID(s string) *PaymentWebhookUpdate {
	pwu.mutation.SetWebhookID(s)
	return pwu
}

// SetNillableWebhookID sets the "webhook_id" field if the given value is not nil.
func (pwu *PaymentWebhookUpdate) SetNillableWebhookID(s *string) *PaymentWebhookUpdate {
	if s != nil {
		pwu.SetWebhookID(*s)
	}
	return pwu
}

// SetWebhookSecret sets the "webhook_secret" field.
func (pwu *PaymentWebhookUpdate) SetWebhookSecret(s string) *PaymentWebhookUpdate {
	pwu.mutation.SetWebhookSecret(s)
	return pwu
}

// SetNillableWebhookSecret sets the "webhook_secret" field if the given value is not nil.
func (pwu *PaymentWebhookUpdate) SetNillableWebhookSecret(s *string) *PaymentWebhookUpdate {
	if s != nil {
		pwu.SetWebhookSecret(*s)
	}
	return pwu
}

// SetCallbackURL sets the "callback_url" field.
func (pwu *PaymentWebhookUpdate) SetCallbackURL(s string) *PaymentWebhookUpdate {
	pwu.mutation.SetCallbackURL(s)
	return pwu
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (pwu *PaymentWebhookUpdate) SetNillableCallbackURL(s *string) *PaymentWebhookUpdate {
	if s != nil {
		pwu.SetCallbackURL(*s)
	}
	return pwu
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (pwu *PaymentWebhookUpdate) SetPaymentOrderID(id uuid.UUID) *PaymentWebhookUpdate {
	pwu.mutation.SetPaymentOrderID(id)
	return pwu
}

// SetNillablePaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID if the given value is not nil.
func (pwu *PaymentWebhookUpdate) SetNillablePaymentOrderID(id *uuid.UUID) *PaymentWebhookUpdate {
	if id != nil {
		pwu = pwu.SetPaymentOrderID(*id)
	}
	return pwu
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (pwu *PaymentWebhookUpdate) SetPaymentOrder(p *PaymentOrder) *PaymentWebhookUpdate {
	return pwu.SetPaymentOrderID(p.ID)
}

// SetNetworkID sets the "network" edge to the Network entity by ID.
func (pwu *PaymentWebhookUpdate) SetNetworkID(id int) *PaymentWebhookUpdate {
	pwu.mutation.SetNetworkID(id)
	return pwu
}

// SetNillableNetworkID sets the "network" edge to the Network entity by ID if the given value is not nil.
func (pwu *PaymentWebhookUpdate) SetNillableNetworkID(id *int) *PaymentWebhookUpdate {
	if id != nil {
		pwu = pwu.SetNetworkID(*id)
	}
	return pwu
}

// SetNetwork sets the "network" edge to the Network entity.
func (pwu *PaymentWebhookUpdate) SetNetwork(n *Network) *PaymentWebhookUpdate {
	return pwu.SetNetworkID(n.ID)
}

// Mutation returns the PaymentWebhookMutation object of the builder.
func (pwu *PaymentWebhookUpdate) Mutation() *PaymentWebhookMutation {
	return pwu.mutation
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (pwu *PaymentWebhookUpdate) ClearPaymentOrder() *PaymentWebhookUpdate {
	pwu.mutation.ClearPaymentOrder()
	return pwu
}

// ClearNetwork clears the "network" edge to the Network entity.
func (pwu *PaymentWebhookUpdate) ClearNetwork() *PaymentWebhookUpdate {
	pwu.mutation.ClearNetwork()
	return pwu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pwu *PaymentWebhookUpdate) Save(ctx context.Context) (int, error) {
	pwu.defaults()
	return withHooks(ctx, pwu.sqlSave, pwu.mutation, pwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwu *PaymentWebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := pwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pwu *PaymentWebhookUpdate) Exec(ctx context.Context) error {
	_, err := pwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwu *PaymentWebhookUpdate) ExecX(ctx context.Context) {
	if err := pwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwu *PaymentWebhookUpdate) defaults() {
	if _, ok := pwu.mutation.UpdatedAt(); !ok {
		v := paymentwebhook.UpdateDefaultUpdatedAt()
		pwu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwu *PaymentWebhookUpdate) check() error {
	if v, ok := pwu.mutation.WebhookID(); ok {
		if err := paymentwebhook.WebhookIDValidator(v); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_id": %w`, err)}
		}
	}
	if v, ok := pwu.mutation.WebhookSecret(); ok {
		if err := paymentwebhook.WebhookSecretValidator(v); err != nil {
			return &ValidationError{Name: "webhook_secret", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_secret": %w`, err)}
		}
	}
	if v, ok := pwu.mutation.CallbackURL(); ok {
		if err := paymentwebhook.CallbackURLValidator(v); err != nil {
			return &ValidationError{Name: "callback_url", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.callback_url": %w`, err)}
		}
	}
	return nil
}

func (pwu *PaymentWebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentwebhook.Table, paymentwebhook.Columns, sqlgraph.NewFieldSpec(paymentwebhook.FieldID, field.TypeUUID))
	if ps := pwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentwebhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pwu.mutation.WebhookID(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookID, field.TypeString, value)
	}
	if value, ok := pwu.mutation.WebhookSecret(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookSecret, field.TypeString, value)
	}
	if value, ok := pwu.mutation.CallbackURL(); ok {
		_spec.SetField(paymentwebhook.FieldCallbackURL, field.TypeString, value)
	}
	if pwu.mutation.PaymentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.PaymentOrderTable,
			Columns: []string{paymentwebhook.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwu.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.PaymentOrderTable,
			Columns: []string{paymentwebhook.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pwu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.NetworkTable,
			Columns: []string{paymentwebhook.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.NetworkTable,
			Columns: []string{paymentwebhook.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pwu.mutation.done = true
	return n, nil
}

// PaymentWebhookUpdateOne is the builder for updating a single PaymentWebhook entity.
type PaymentWebhookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentWebhookMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pwuo *PaymentWebhookUpdateOne) SetUpdatedAt(t time.Time) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetUpdatedAt(t)
	return pwuo
}

// SetWebhookID sets the "webhook_id" field.
func (pwuo *PaymentWebhookUpdateOne) SetWebhookID(s string) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetWebhookID(s)
	return pwuo
}

// SetNillableWebhookID sets the "webhook_id" field if the given value is not nil.
func (pwuo *PaymentWebhookUpdateOne) SetNillableWebhookID(s *string) *PaymentWebhookUpdateOne {
	if s != nil {
		pwuo.SetWebhookID(*s)
	}
	return pwuo
}

// SetWebhookSecret sets the "webhook_secret" field.
func (pwuo *PaymentWebhookUpdateOne) SetWebhookSecret(s string) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetWebhookSecret(s)
	return pwuo
}

// SetNillableWebhookSecret sets the "webhook_secret" field if the given value is not nil.
func (pwuo *PaymentWebhookUpdateOne) SetNillableWebhookSecret(s *string) *PaymentWebhookUpdateOne {
	if s != nil {
		pwuo.SetWebhookSecret(*s)
	}
	return pwuo
}

// SetCallbackURL sets the "callback_url" field.
func (pwuo *PaymentWebhookUpdateOne) SetCallbackURL(s string) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetCallbackURL(s)
	return pwuo
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (pwuo *PaymentWebhookUpdateOne) SetNillableCallbackURL(s *string) *PaymentWebhookUpdateOne {
	if s != nil {
		pwuo.SetCallbackURL(*s)
	}
	return pwuo
}

// SetPaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID.
func (pwuo *PaymentWebhookUpdateOne) SetPaymentOrderID(id uuid.UUID) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetPaymentOrderID(id)
	return pwuo
}

// SetNillablePaymentOrderID sets the "payment_order" edge to the PaymentOrder entity by ID if the given value is not nil.
func (pwuo *PaymentWebhookUpdateOne) SetNillablePaymentOrderID(id *uuid.UUID) *PaymentWebhookUpdateOne {
	if id != nil {
		pwuo = pwuo.SetPaymentOrderID(*id)
	}
	return pwuo
}

// SetPaymentOrder sets the "payment_order" edge to the PaymentOrder entity.
func (pwuo *PaymentWebhookUpdateOne) SetPaymentOrder(p *PaymentOrder) *PaymentWebhookUpdateOne {
	return pwuo.SetPaymentOrderID(p.ID)
}

// SetNetworkID sets the "network" edge to the Network entity by ID.
func (pwuo *PaymentWebhookUpdateOne) SetNetworkID(id int) *PaymentWebhookUpdateOne {
	pwuo.mutation.SetNetworkID(id)
	return pwuo
}

// SetNillableNetworkID sets the "network" edge to the Network entity by ID if the given value is not nil.
func (pwuo *PaymentWebhookUpdateOne) SetNillableNetworkID(id *int) *PaymentWebhookUpdateOne {
	if id != nil {
		pwuo = pwuo.SetNetworkID(*id)
	}
	return pwuo
}

// SetNetwork sets the "network" edge to the Network entity.
func (pwuo *PaymentWebhookUpdateOne) SetNetwork(n *Network) *PaymentWebhookUpdateOne {
	return pwuo.SetNetworkID(n.ID)
}

// Mutation returns the PaymentWebhookMutation object of the builder.
func (pwuo *PaymentWebhookUpdateOne) Mutation() *PaymentWebhookMutation {
	return pwuo.mutation
}

// ClearPaymentOrder clears the "payment_order" edge to the PaymentOrder entity.
func (pwuo *PaymentWebhookUpdateOne) ClearPaymentOrder() *PaymentWebhookUpdateOne {
	pwuo.mutation.ClearPaymentOrder()
	return pwuo
}

// ClearNetwork clears the "network" edge to the Network entity.
func (pwuo *PaymentWebhookUpdateOne) ClearNetwork() *PaymentWebhookUpdateOne {
	pwuo.mutation.ClearNetwork()
	return pwuo
}

// Where appends a list predicates to the PaymentWebhookUpdate builder.
func (pwuo *PaymentWebhookUpdateOne) Where(ps ...predicate.PaymentWebhook) *PaymentWebhookUpdateOne {
	pwuo.mutation.Where(ps...)
	return pwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pwuo *PaymentWebhookUpdateOne) Select(field string, fields ...string) *PaymentWebhookUpdateOne {
	pwuo.fields = append([]string{field}, fields...)
	return pwuo
}

// Save executes the query and returns the updated PaymentWebhook entity.
func (pwuo *PaymentWebhookUpdateOne) Save(ctx context.Context) (*PaymentWebhook, error) {
	pwuo.defaults()
	return withHooks(ctx, pwuo.sqlSave, pwuo.mutation, pwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwuo *PaymentWebhookUpdateOne) SaveX(ctx context.Context) *PaymentWebhook {
	node, err := pwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pwuo *PaymentWebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := pwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwuo *PaymentWebhookUpdateOne) ExecX(ctx context.Context) {
	if err := pwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwuo *PaymentWebhookUpdateOne) defaults() {
	if _, ok := pwuo.mutation.UpdatedAt(); !ok {
		v := paymentwebhook.UpdateDefaultUpdatedAt()
		pwuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwuo *PaymentWebhookUpdateOne) check() error {
	if v, ok := pwuo.mutation.WebhookID(); ok {
		if err := paymentwebhook.WebhookIDValidator(v); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_id": %w`, err)}
		}
	}
	if v, ok := pwuo.mutation.WebhookSecret(); ok {
		if err := paymentwebhook.WebhookSecretValidator(v); err != nil {
			return &ValidationError{Name: "webhook_secret", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.webhook_secret": %w`, err)}
		}
	}
	if v, ok := pwuo.mutation.CallbackURL(); ok {
		if err := paymentwebhook.CallbackURLValidator(v); err != nil {
			return &ValidationError{Name: "callback_url", err: fmt.Errorf(`ent: validator failed for field "PaymentWebhook.callback_url": %w`, err)}
		}
	}
	return nil
}

func (pwuo *PaymentWebhookUpdateOne) sqlSave(ctx context.Context) (_node *PaymentWebhook, err error) {
	if err := pwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentwebhook.Table, paymentwebhook.Columns, sqlgraph.NewFieldSpec(paymentwebhook.FieldID, field.TypeUUID))
	id, ok := pwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentWebhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentwebhook.FieldID)
		for _, f := range fields {
			if !paymentwebhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentwebhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentwebhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pwuo.mutation.WebhookID(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookID, field.TypeString, value)
	}
	if value, ok := pwuo.mutation.WebhookSecret(); ok {
		_spec.SetField(paymentwebhook.FieldWebhookSecret, field.TypeString, value)
	}
	if value, ok := pwuo.mutation.CallbackURL(); ok {
		_spec.SetField(paymentwebhook.FieldCallbackURL, field.TypeString, value)
	}
	if pwuo.mutation.PaymentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.PaymentOrderTable,
			Columns: []string{paymentwebhook.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwuo.mutation.PaymentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.PaymentOrderTable,
			Columns: []string{paymentwebhook.PaymentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pwuo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.NetworkTable,
			Columns: []string{paymentwebhook.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwuo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   paymentwebhook.NetworkTable,
			Columns: []string{paymentwebhook.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentWebhook{config: pwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pwuo.mutation.done = true
	return _node, nil
}
