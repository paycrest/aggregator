// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providercurrencyavailability"
	"github.com/paycrest/aggregator/ent/providerprofile"
)

// ProviderCurrencyAvailabilityUpdate is the builder for updating ProviderCurrencyAvailability entities.
type ProviderCurrencyAvailabilityUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderCurrencyAvailabilityMutation
}

// Where appends a list predicates to the ProviderCurrencyAvailabilityUpdate builder.
func (pcau *ProviderCurrencyAvailabilityUpdate) Where(ps ...predicate.ProviderCurrencyAvailability) *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.Where(ps...)
	return pcau
}

// SetIsAvailable sets the "is_available" field.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetIsAvailable(b bool) *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.SetIsAvailable(b)
	return pcau
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetNillableIsAvailable(b *bool) *ProviderCurrencyAvailabilityUpdate {
	if b != nil {
		pcau.SetIsAvailable(*b)
	}
	return pcau
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetProviderID(id string) *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.SetProviderID(id)
	return pcau
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetProvider(p *ProviderProfile) *ProviderCurrencyAvailabilityUpdate {
	return pcau.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetCurrencyID(id uuid.UUID) *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.SetCurrencyID(id)
	return pcau
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcau *ProviderCurrencyAvailabilityUpdate) SetCurrency(f *FiatCurrency) *ProviderCurrencyAvailabilityUpdate {
	return pcau.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrencyAvailabilityMutation object of the builder.
func (pcau *ProviderCurrencyAvailabilityUpdate) Mutation() *ProviderCurrencyAvailabilityMutation {
	return pcau.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pcau *ProviderCurrencyAvailabilityUpdate) ClearProvider() *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.ClearProvider()
	return pcau
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pcau *ProviderCurrencyAvailabilityUpdate) ClearCurrency() *ProviderCurrencyAvailabilityUpdate {
	pcau.mutation.ClearCurrency()
	return pcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcau *ProviderCurrencyAvailabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcau.sqlSave, pcau.mutation, pcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcau *ProviderCurrencyAvailabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := pcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcau *ProviderCurrencyAvailabilityUpdate) Exec(ctx context.Context) error {
	_, err := pcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcau *ProviderCurrencyAvailabilityUpdate) ExecX(ctx context.Context) {
	if err := pcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcau *ProviderCurrencyAvailabilityUpdate) check() error {
	if pcau.mutation.ProviderCleared() && len(pcau.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencyAvailability.provider"`)
	}
	if pcau.mutation.CurrencyCleared() && len(pcau.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencyAvailability.currency"`)
	}
	return nil
}

func (pcau *ProviderCurrencyAvailabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providercurrencyavailability.Table, providercurrencyavailability.Columns, sqlgraph.NewFieldSpec(providercurrencyavailability.FieldID, field.TypeUUID))
	if ps := pcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcau.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencyavailability.FieldIsAvailable, field.TypeBool, value)
	}
	if pcau.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.ProviderTable,
			Columns: []string{providercurrencyavailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcau.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.ProviderTable,
			Columns: []string{providercurrencyavailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcau.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.CurrencyTable,
			Columns: []string{providercurrencyavailability.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcau.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.CurrencyTable,
			Columns: []string{providercurrencyavailability.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providercurrencyavailability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcau.mutation.done = true
	return n, nil
}

// ProviderCurrencyAvailabilityUpdateOne is the builder for updating a single ProviderCurrencyAvailability entity.
type ProviderCurrencyAvailabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderCurrencyAvailabilityMutation
}

// SetIsAvailable sets the "is_available" field.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetIsAvailable(b bool) *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.SetIsAvailable(b)
	return pcauo
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetNillableIsAvailable(b *bool) *ProviderCurrencyAvailabilityUpdateOne {
	if b != nil {
		pcauo.SetIsAvailable(*b)
	}
	return pcauo
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetProviderID(id string) *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.SetProviderID(id)
	return pcauo
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetProvider(p *ProviderProfile) *ProviderCurrencyAvailabilityUpdateOne {
	return pcauo.SetProviderID(p.ID)
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetCurrencyID(id uuid.UUID) *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.SetCurrencyID(id)
	return pcauo
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SetCurrency(f *FiatCurrency) *ProviderCurrencyAvailabilityUpdateOne {
	return pcauo.SetCurrencyID(f.ID)
}

// Mutation returns the ProviderCurrencyAvailabilityMutation object of the builder.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) Mutation() *ProviderCurrencyAvailabilityMutation {
	return pcauo.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) ClearProvider() *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.ClearProvider()
	return pcauo
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) ClearCurrency() *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.ClearCurrency()
	return pcauo
}

// Where appends a list predicates to the ProviderCurrencyAvailabilityUpdate builder.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) Where(ps ...predicate.ProviderCurrencyAvailability) *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.mutation.Where(ps...)
	return pcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) Select(field string, fields ...string) *ProviderCurrencyAvailabilityUpdateOne {
	pcauo.fields = append([]string{field}, fields...)
	return pcauo
}

// Save executes the query and returns the updated ProviderCurrencyAvailability entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) Save(ctx context.Context) (*ProviderCurrencyAvailability, error) {
	return withHooks(ctx, pcauo.sqlSave, pcauo.mutation, pcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) SaveX(ctx context.Context) *ProviderCurrencyAvailability {
	node, err := pcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := pcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) ExecX(ctx context.Context) {
	if err := pcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcauo *ProviderCurrencyAvailabilityUpdateOne) check() error {
	if pcauo.mutation.ProviderCleared() && len(pcauo.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencyAvailability.provider"`)
	}
	if pcauo.mutation.CurrencyCleared() && len(pcauo.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderCurrencyAvailability.currency"`)
	}
	return nil
}

func (pcauo *ProviderCurrencyAvailabilityUpdateOne) sqlSave(ctx context.Context) (_node *ProviderCurrencyAvailability, err error) {
	if err := pcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providercurrencyavailability.Table, providercurrencyavailability.Columns, sqlgraph.NewFieldSpec(providercurrencyavailability.FieldID, field.TypeUUID))
	id, ok := pcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderCurrencyAvailability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providercurrencyavailability.FieldID)
		for _, f := range fields {
			if !providercurrencyavailability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providercurrencyavailability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcauo.mutation.IsAvailable(); ok {
		_spec.SetField(providercurrencyavailability.FieldIsAvailable, field.TypeBool, value)
	}
	if pcauo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.ProviderTable,
			Columns: []string{providercurrencyavailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcauo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.ProviderTable,
			Columns: []string{providercurrencyavailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcauo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.CurrencyTable,
			Columns: []string{providercurrencyavailability.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcauo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providercurrencyavailability.CurrencyTable,
			Columns: []string{providercurrencyavailability.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderCurrencyAvailability{config: pcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providercurrencyavailability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcauo.mutation.done = true
	return _node, nil
}
