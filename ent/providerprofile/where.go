// Code generated by ent, DO NOT EDIT.

package providerprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldID, id))
}

// TradingName applies equality check predicate on the "trading_name" field. It's identical to TradingNameEQ.
func TradingName(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldTradingName, v))
}

// HostIdentifier applies equality check predicate on the "host_identifier" field. It's identical to HostIdentifierEQ.
func HostIdentifier(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldHostIdentifier, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsKybVerified applies equality check predicate on the "is_kyb_verified" field. It's identical to IsKybVerifiedEQ.
func IsKybVerified(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsKybVerified, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// TradingNameEQ applies the EQ predicate on the "trading_name" field.
func TradingNameEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldTradingName, v))
}

// TradingNameNEQ applies the NEQ predicate on the "trading_name" field.
func TradingNameNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldTradingName, v))
}

// TradingNameIn applies the In predicate on the "trading_name" field.
func TradingNameIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldTradingName, vs...))
}

// TradingNameNotIn applies the NotIn predicate on the "trading_name" field.
func TradingNameNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldTradingName, vs...))
}

// TradingNameGT applies the GT predicate on the "trading_name" field.
func TradingNameGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldTradingName, v))
}

// TradingNameGTE applies the GTE predicate on the "trading_name" field.
func TradingNameGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldTradingName, v))
}

// TradingNameLT applies the LT predicate on the "trading_name" field.
func TradingNameLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldTradingName, v))
}

// TradingNameLTE applies the LTE predicate on the "trading_name" field.
func TradingNameLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldTradingName, v))
}

// TradingNameContains applies the Contains predicate on the "trading_name" field.
func TradingNameContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldTradingName, v))
}

// TradingNameHasPrefix applies the HasPrefix predicate on the "trading_name" field.
func TradingNameHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldTradingName, v))
}

// TradingNameHasSuffix applies the HasSuffix predicate on the "trading_name" field.
func TradingNameHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldTradingName, v))
}

// TradingNameIsNil applies the IsNil predicate on the "trading_name" field.
func TradingNameIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldTradingName))
}

// TradingNameNotNil applies the NotNil predicate on the "trading_name" field.
func TradingNameNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldTradingName))
}

// TradingNameEqualFold applies the EqualFold predicate on the "trading_name" field.
func TradingNameEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldTradingName, v))
}

// TradingNameContainsFold applies the ContainsFold predicate on the "trading_name" field.
func TradingNameContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldTradingName, v))
}

// HostIdentifierEQ applies the EQ predicate on the "host_identifier" field.
func HostIdentifierEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldHostIdentifier, v))
}

// HostIdentifierNEQ applies the NEQ predicate on the "host_identifier" field.
func HostIdentifierNEQ(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldHostIdentifier, v))
}

// HostIdentifierIn applies the In predicate on the "host_identifier" field.
func HostIdentifierIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldHostIdentifier, vs...))
}

// HostIdentifierNotIn applies the NotIn predicate on the "host_identifier" field.
func HostIdentifierNotIn(vs ...string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldHostIdentifier, vs...))
}

// HostIdentifierGT applies the GT predicate on the "host_identifier" field.
func HostIdentifierGT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldHostIdentifier, v))
}

// HostIdentifierGTE applies the GTE predicate on the "host_identifier" field.
func HostIdentifierGTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldHostIdentifier, v))
}

// HostIdentifierLT applies the LT predicate on the "host_identifier" field.
func HostIdentifierLT(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldHostIdentifier, v))
}

// HostIdentifierLTE applies the LTE predicate on the "host_identifier" field.
func HostIdentifierLTE(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldHostIdentifier, v))
}

// HostIdentifierContains applies the Contains predicate on the "host_identifier" field.
func HostIdentifierContains(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContains(FieldHostIdentifier, v))
}

// HostIdentifierHasPrefix applies the HasPrefix predicate on the "host_identifier" field.
func HostIdentifierHasPrefix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasPrefix(FieldHostIdentifier, v))
}

// HostIdentifierHasSuffix applies the HasSuffix predicate on the "host_identifier" field.
func HostIdentifierHasSuffix(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldHasSuffix(FieldHostIdentifier, v))
}

// HostIdentifierIsNil applies the IsNil predicate on the "host_identifier" field.
func HostIdentifierIsNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIsNull(FieldHostIdentifier))
}

// HostIdentifierNotNil applies the NotNil predicate on the "host_identifier" field.
func HostIdentifierNotNil() predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotNull(FieldHostIdentifier))
}

// HostIdentifierEqualFold applies the EqualFold predicate on the "host_identifier" field.
func HostIdentifierEqualFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEqualFold(FieldHostIdentifier, v))
}

// HostIdentifierContainsFold applies the ContainsFold predicate on the "host_identifier" field.
func HostIdentifierContainsFold(v string) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldContainsFold(FieldHostIdentifier, v))
}

// ProvisionModeEQ applies the EQ predicate on the "provision_mode" field.
func ProvisionModeEQ(v ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldProvisionMode, v))
}

// ProvisionModeNEQ applies the NEQ predicate on the "provision_mode" field.
func ProvisionModeNEQ(v ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldProvisionMode, v))
}

// ProvisionModeIn applies the In predicate on the "provision_mode" field.
func ProvisionModeIn(vs ...ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldProvisionMode, vs...))
}

// ProvisionModeNotIn applies the NotIn predicate on the "provision_mode" field.
func ProvisionModeNotIn(vs ...ProvisionMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldProvisionMode, vs...))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIsActive, v))
}

// IsKybVerifiedEQ applies the EQ predicate on the "is_kyb_verified" field.
func IsKybVerifiedEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldIsKybVerified, v))
}

// IsKybVerifiedNEQ applies the NEQ predicate on the "is_kyb_verified" field.
func IsKybVerifiedNEQ(v bool) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldIsKybVerified, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// VisibilityModeEQ applies the EQ predicate on the "visibility_mode" field.
func VisibilityModeEQ(v VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldEQ(FieldVisibilityMode, v))
}

// VisibilityModeNEQ applies the NEQ predicate on the "visibility_mode" field.
func VisibilityModeNEQ(v VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNEQ(FieldVisibilityMode, v))
}

// VisibilityModeIn applies the In predicate on the "visibility_mode" field.
func VisibilityModeIn(vs ...VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldIn(FieldVisibilityMode, vs...))
}

// VisibilityModeNotIn applies the NotIn predicate on the "visibility_mode" field.
func VisibilityModeNotIn(vs ...VisibilityMode) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.FieldNotIn(FieldVisibilityMode, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKey applies the HasEdge predicate on the "api_key" edge.
func HasAPIKey() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, APIKeyTable, APIKeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeyWith applies the HasEdge predicate on the "api_key" edge with a given conditions (other predicates).
func HasAPIKeyWith(preds ...predicate.APIKey) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newAPIKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderCurrencies applies the HasEdge predicate on the "provider_currencies" edge.
func HasProviderCurrencies() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProviderCurrenciesTable, ProviderCurrenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderCurrenciesWith applies the HasEdge predicate on the "provider_currencies" edge with a given conditions (other predicates).
func HasProviderCurrenciesWith(preds ...predicate.ProviderCurrencies) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newProviderCurrenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionBuckets applies the HasEdge predicate on the "provision_buckets" edge.
func HasProvisionBuckets() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProvisionBucketsTable, ProvisionBucketsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionBucketsWith applies the HasEdge predicate on the "provision_buckets" edge with a given conditions (other predicates).
func HasProvisionBucketsWith(preds ...predicate.ProvisionBucket) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newProvisionBucketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderTokens applies the HasEdge predicate on the "order_tokens" edge.
func HasOrderTokens() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTokensTable, OrderTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderTokensWith applies the HasEdge predicate on the "order_tokens" edge with a given conditions (other predicates).
func HasOrderTokensWith(preds ...predicate.ProviderOrderToken) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newOrderTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderRating applies the HasEdge predicate on the "provider_rating" edge.
func HasProviderRating() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProviderRatingTable, ProviderRatingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderRatingWith applies the HasEdge predicate on the "provider_rating" edge with a given conditions (other predicates).
func HasProviderRatingWith(preds ...predicate.ProviderRating) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newProviderRatingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedOrders applies the HasEdge predicate on the "assigned_orders" edge.
func HasAssignedOrders() predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedOrdersTable, AssignedOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedOrdersWith applies the HasEdge predicate on the "assigned_orders" edge with a given conditions (other predicates).
func HasAssignedOrdersWith(preds ...predicate.LockPaymentOrder) predicate.ProviderProfile {
	return predicate.ProviderProfile(func(s *sql.Selector) {
		step := newAssignedOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderProfile) predicate.ProviderProfile {
	return predicate.ProviderProfile(sql.NotPredicates(p))
}
