// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/fiatcurrency"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/providerprofile"
	"github.com/paycrest/aggregator/ent/provisionbucket"
	"github.com/shopspring/decimal"
)

// ProvisionBucketUpdate is the builder for updating ProvisionBucket entities.
type ProvisionBucketUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisionBucketMutation
}

// Where appends a list predicates to the ProvisionBucketUpdate builder.
func (pbu *ProvisionBucketUpdate) Where(ps ...predicate.ProvisionBucket) *ProvisionBucketUpdate {
	pbu.mutation.Where(ps...)
	return pbu
}

// SetMinAmount sets the "min_amount" field.
func (pbu *ProvisionBucketUpdate) SetMinAmount(d decimal.Decimal) *ProvisionBucketUpdate {
	pbu.mutation.ResetMinAmount()
	pbu.mutation.SetMinAmount(d)
	return pbu
}

// SetNillableMinAmount sets the "min_amount" field if the given value is not nil.
func (pbu *ProvisionBucketUpdate) SetNillableMinAmount(d *decimal.Decimal) *ProvisionBucketUpdate {
	if d != nil {
		pbu.SetMinAmount(*d)
	}
	return pbu
}

// AddMinAmount adds d to the "min_amount" field.
func (pbu *ProvisionBucketUpdate) AddMinAmount(d decimal.Decimal) *ProvisionBucketUpdate {
	pbu.mutation.AddMinAmount(d)
	return pbu
}

// SetMaxAmount sets the "max_amount" field.
func (pbu *ProvisionBucketUpdate) SetMaxAmount(d decimal.Decimal) *ProvisionBucketUpdate {
	pbu.mutation.ResetMaxAmount()
	pbu.mutation.SetMaxAmount(d)
	return pbu
}

// SetNillableMaxAmount sets the "max_amount" field if the given value is not nil.
func (pbu *ProvisionBucketUpdate) SetNillableMaxAmount(d *decimal.Decimal) *ProvisionBucketUpdate {
	if d != nil {
		pbu.SetMaxAmount(*d)
	}
	return pbu
}

// AddMaxAmount adds d to the "max_amount" field.
func (pbu *ProvisionBucketUpdate) AddMaxAmount(d decimal.Decimal) *ProvisionBucketUpdate {
	pbu.mutation.AddMaxAmount(d)
	return pbu
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pbu *ProvisionBucketUpdate) SetCurrencyID(id uuid.UUID) *ProvisionBucketUpdate {
	pbu.mutation.SetCurrencyID(id)
	return pbu
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pbu *ProvisionBucketUpdate) SetCurrency(f *FiatCurrency) *ProvisionBucketUpdate {
	return pbu.SetCurrencyID(f.ID)
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (pbu *ProvisionBucketUpdate) AddLockPaymentOrderIDs(ids ...uuid.UUID) *ProvisionBucketUpdate {
	pbu.mutation.AddLockPaymentOrderIDs(ids...)
	return pbu
}

// AddLockPaymentOrders adds the "lock_payment_orders" edges to the LockPaymentOrder entity.
func (pbu *ProvisionBucketUpdate) AddLockPaymentOrders(l ...*LockPaymentOrder) *ProvisionBucketUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pbu.AddLockPaymentOrderIDs(ids...)
}

// AddProviderProfileIDs adds the "provider_profiles" edge to the ProviderProfile entity by IDs.
func (pbu *ProvisionBucketUpdate) AddProviderProfileIDs(ids ...string) *ProvisionBucketUpdate {
	pbu.mutation.AddProviderProfileIDs(ids...)
	return pbu
}

// AddProviderProfiles adds the "provider_profiles" edges to the ProviderProfile entity.
func (pbu *ProvisionBucketUpdate) AddProviderProfiles(p ...*ProviderProfile) *ProvisionBucketUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbu.AddProviderProfileIDs(ids...)
}

// Mutation returns the ProvisionBucketMutation object of the builder.
func (pbu *ProvisionBucketUpdate) Mutation() *ProvisionBucketMutation {
	return pbu.mutation
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pbu *ProvisionBucketUpdate) ClearCurrency() *ProvisionBucketUpdate {
	pbu.mutation.ClearCurrency()
	return pbu
}

// ClearLockPaymentOrders clears all "lock_payment_orders" edges to the LockPaymentOrder entity.
func (pbu *ProvisionBucketUpdate) ClearLockPaymentOrders() *ProvisionBucketUpdate {
	pbu.mutation.ClearLockPaymentOrders()
	return pbu
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to LockPaymentOrder entities by IDs.
func (pbu *ProvisionBucketUpdate) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) *ProvisionBucketUpdate {
	pbu.mutation.RemoveLockPaymentOrderIDs(ids...)
	return pbu
}

// RemoveLockPaymentOrders removes "lock_payment_orders" edges to LockPaymentOrder entities.
func (pbu *ProvisionBucketUpdate) RemoveLockPaymentOrders(l ...*LockPaymentOrder) *ProvisionBucketUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pbu.RemoveLockPaymentOrderIDs(ids...)
}

// ClearProviderProfiles clears all "provider_profiles" edges to the ProviderProfile entity.
func (pbu *ProvisionBucketUpdate) ClearProviderProfiles() *ProvisionBucketUpdate {
	pbu.mutation.ClearProviderProfiles()
	return pbu
}

// RemoveProviderProfileIDs removes the "provider_profiles" edge to ProviderProfile entities by IDs.
func (pbu *ProvisionBucketUpdate) RemoveProviderProfileIDs(ids ...string) *ProvisionBucketUpdate {
	pbu.mutation.RemoveProviderProfileIDs(ids...)
	return pbu
}

// RemoveProviderProfiles removes "provider_profiles" edges to ProviderProfile entities.
func (pbu *ProvisionBucketUpdate) RemoveProviderProfiles(p ...*ProviderProfile) *ProvisionBucketUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbu.RemoveProviderProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbu *ProvisionBucketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pbu.sqlSave, pbu.mutation, pbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbu *ProvisionBucketUpdate) SaveX(ctx context.Context) int {
	affected, err := pbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbu *ProvisionBucketUpdate) Exec(ctx context.Context) error {
	_, err := pbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbu *ProvisionBucketUpdate) ExecX(ctx context.Context) {
	if err := pbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbu *ProvisionBucketUpdate) check() error {
	if pbu.mutation.CurrencyCleared() && len(pbu.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProvisionBucket.currency"`)
	}
	return nil
}

func (pbu *ProvisionBucketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(provisionbucket.Table, provisionbucket.Columns, sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt))
	if ps := pbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbu.mutation.MinAmount(); ok {
		_spec.SetField(provisionbucket.FieldMinAmount, field.TypeFloat64, value)
	}
	if value, ok := pbu.mutation.AddedMinAmount(); ok {
		_spec.AddField(provisionbucket.FieldMinAmount, field.TypeFloat64, value)
	}
	if value, ok := pbu.mutation.MaxAmount(); ok {
		_spec.SetField(provisionbucket.FieldMaxAmount, field.TypeFloat64, value)
	}
	if value, ok := pbu.mutation.AddedMaxAmount(); ok {
		_spec.AddField(provisionbucket.FieldMaxAmount, field.TypeFloat64, value)
	}
	if pbu.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provisionbucket.CurrencyTable,
			Columns: []string{provisionbucket.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbu.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provisionbucket.CurrencyTable,
			Columns: []string{provisionbucket.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbu.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbu.mutation.RemovedLockPaymentOrdersIDs(); len(nodes) > 0 && !pbu.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbu.mutation.LockPaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbu.mutation.ProviderProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbu.mutation.RemovedProviderProfilesIDs(); len(nodes) > 0 && !pbu.mutation.ProviderProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbu.mutation.ProviderProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionbucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pbu.mutation.done = true
	return n, nil
}

// ProvisionBucketUpdateOne is the builder for updating a single ProvisionBucket entity.
type ProvisionBucketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisionBucketMutation
}

// SetMinAmount sets the "min_amount" field.
func (pbuo *ProvisionBucketUpdateOne) SetMinAmount(d decimal.Decimal) *ProvisionBucketUpdateOne {
	pbuo.mutation.ResetMinAmount()
	pbuo.mutation.SetMinAmount(d)
	return pbuo
}

// SetNillableMinAmount sets the "min_amount" field if the given value is not nil.
func (pbuo *ProvisionBucketUpdateOne) SetNillableMinAmount(d *decimal.Decimal) *ProvisionBucketUpdateOne {
	if d != nil {
		pbuo.SetMinAmount(*d)
	}
	return pbuo
}

// AddMinAmount adds d to the "min_amount" field.
func (pbuo *ProvisionBucketUpdateOne) AddMinAmount(d decimal.Decimal) *ProvisionBucketUpdateOne {
	pbuo.mutation.AddMinAmount(d)
	return pbuo
}

// SetMaxAmount sets the "max_amount" field.
func (pbuo *ProvisionBucketUpdateOne) SetMaxAmount(d decimal.Decimal) *ProvisionBucketUpdateOne {
	pbuo.mutation.ResetMaxAmount()
	pbuo.mutation.SetMaxAmount(d)
	return pbuo
}

// SetNillableMaxAmount sets the "max_amount" field if the given value is not nil.
func (pbuo *ProvisionBucketUpdateOne) SetNillableMaxAmount(d *decimal.Decimal) *ProvisionBucketUpdateOne {
	if d != nil {
		pbuo.SetMaxAmount(*d)
	}
	return pbuo
}

// AddMaxAmount adds d to the "max_amount" field.
func (pbuo *ProvisionBucketUpdateOne) AddMaxAmount(d decimal.Decimal) *ProvisionBucketUpdateOne {
	pbuo.mutation.AddMaxAmount(d)
	return pbuo
}

// SetCurrencyID sets the "currency" edge to the FiatCurrency entity by ID.
func (pbuo *ProvisionBucketUpdateOne) SetCurrencyID(id uuid.UUID) *ProvisionBucketUpdateOne {
	pbuo.mutation.SetCurrencyID(id)
	return pbuo
}

// SetCurrency sets the "currency" edge to the FiatCurrency entity.
func (pbuo *ProvisionBucketUpdateOne) SetCurrency(f *FiatCurrency) *ProvisionBucketUpdateOne {
	return pbuo.SetCurrencyID(f.ID)
}

// AddLockPaymentOrderIDs adds the "lock_payment_orders" edge to the LockPaymentOrder entity by IDs.
func (pbuo *ProvisionBucketUpdateOne) AddLockPaymentOrderIDs(ids ...uuid.UUID) *ProvisionBucketUpdateOne {
	pbuo.mutation.AddLockPaymentOrderIDs(ids...)
	return pbuo
}

// AddLockPaymentOrders adds the "lock_payment_orders" edges to the LockPaymentOrder entity.
func (pbuo *ProvisionBucketUpdateOne) AddLockPaymentOrders(l ...*LockPaymentOrder) *ProvisionBucketUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pbuo.AddLockPaymentOrderIDs(ids...)
}

// AddProviderProfileIDs adds the "provider_profiles" edge to the ProviderProfile entity by IDs.
func (pbuo *ProvisionBucketUpdateOne) AddProviderProfileIDs(ids ...string) *ProvisionBucketUpdateOne {
	pbuo.mutation.AddProviderProfileIDs(ids...)
	return pbuo
}

// AddProviderProfiles adds the "provider_profiles" edges to the ProviderProfile entity.
func (pbuo *ProvisionBucketUpdateOne) AddProviderProfiles(p ...*ProviderProfile) *ProvisionBucketUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbuo.AddProviderProfileIDs(ids...)
}

// Mutation returns the ProvisionBucketMutation object of the builder.
func (pbuo *ProvisionBucketUpdateOne) Mutation() *ProvisionBucketMutation {
	return pbuo.mutation
}

// ClearCurrency clears the "currency" edge to the FiatCurrency entity.
func (pbuo *ProvisionBucketUpdateOne) ClearCurrency() *ProvisionBucketUpdateOne {
	pbuo.mutation.ClearCurrency()
	return pbuo
}

// ClearLockPaymentOrders clears all "lock_payment_orders" edges to the LockPaymentOrder entity.
func (pbuo *ProvisionBucketUpdateOne) ClearLockPaymentOrders() *ProvisionBucketUpdateOne {
	pbuo.mutation.ClearLockPaymentOrders()
	return pbuo
}

// RemoveLockPaymentOrderIDs removes the "lock_payment_orders" edge to LockPaymentOrder entities by IDs.
func (pbuo *ProvisionBucketUpdateOne) RemoveLockPaymentOrderIDs(ids ...uuid.UUID) *ProvisionBucketUpdateOne {
	pbuo.mutation.RemoveLockPaymentOrderIDs(ids...)
	return pbuo
}

// RemoveLockPaymentOrders removes "lock_payment_orders" edges to LockPaymentOrder entities.
func (pbuo *ProvisionBucketUpdateOne) RemoveLockPaymentOrders(l ...*LockPaymentOrder) *ProvisionBucketUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pbuo.RemoveLockPaymentOrderIDs(ids...)
}

// ClearProviderProfiles clears all "provider_profiles" edges to the ProviderProfile entity.
func (pbuo *ProvisionBucketUpdateOne) ClearProviderProfiles() *ProvisionBucketUpdateOne {
	pbuo.mutation.ClearProviderProfiles()
	return pbuo
}

// RemoveProviderProfileIDs removes the "provider_profiles" edge to ProviderProfile entities by IDs.
func (pbuo *ProvisionBucketUpdateOne) RemoveProviderProfileIDs(ids ...string) *ProvisionBucketUpdateOne {
	pbuo.mutation.RemoveProviderProfileIDs(ids...)
	return pbuo
}

// RemoveProviderProfiles removes "provider_profiles" edges to ProviderProfile entities.
func (pbuo *ProvisionBucketUpdateOne) RemoveProviderProfiles(p ...*ProviderProfile) *ProvisionBucketUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbuo.RemoveProviderProfileIDs(ids...)
}

// Where appends a list predicates to the ProvisionBucketUpdate builder.
func (pbuo *ProvisionBucketUpdateOne) Where(ps ...predicate.ProvisionBucket) *ProvisionBucketUpdateOne {
	pbuo.mutation.Where(ps...)
	return pbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbuo *ProvisionBucketUpdateOne) Select(field string, fields ...string) *ProvisionBucketUpdateOne {
	pbuo.fields = append([]string{field}, fields...)
	return pbuo
}

// Save executes the query and returns the updated ProvisionBucket entity.
func (pbuo *ProvisionBucketUpdateOne) Save(ctx context.Context) (*ProvisionBucket, error) {
	return withHooks(ctx, pbuo.sqlSave, pbuo.mutation, pbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbuo *ProvisionBucketUpdateOne) SaveX(ctx context.Context) *ProvisionBucket {
	node, err := pbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbuo *ProvisionBucketUpdateOne) Exec(ctx context.Context) error {
	_, err := pbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbuo *ProvisionBucketUpdateOne) ExecX(ctx context.Context) {
	if err := pbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbuo *ProvisionBucketUpdateOne) check() error {
	if pbuo.mutation.CurrencyCleared() && len(pbuo.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProvisionBucket.currency"`)
	}
	return nil
}

func (pbuo *ProvisionBucketUpdateOne) sqlSave(ctx context.Context) (_node *ProvisionBucket, err error) {
	if err := pbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(provisionbucket.Table, provisionbucket.Columns, sqlgraph.NewFieldSpec(provisionbucket.FieldID, field.TypeInt))
	id, ok := pbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisionBucket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionbucket.FieldID)
		for _, f := range fields {
			if !provisionbucket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisionbucket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbuo.mutation.MinAmount(); ok {
		_spec.SetField(provisionbucket.FieldMinAmount, field.TypeFloat64, value)
	}
	if value, ok := pbuo.mutation.AddedMinAmount(); ok {
		_spec.AddField(provisionbucket.FieldMinAmount, field.TypeFloat64, value)
	}
	if value, ok := pbuo.mutation.MaxAmount(); ok {
		_spec.SetField(provisionbucket.FieldMaxAmount, field.TypeFloat64, value)
	}
	if value, ok := pbuo.mutation.AddedMaxAmount(); ok {
		_spec.AddField(provisionbucket.FieldMaxAmount, field.TypeFloat64, value)
	}
	if pbuo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provisionbucket.CurrencyTable,
			Columns: []string{provisionbucket.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbuo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provisionbucket.CurrencyTable,
			Columns: []string{provisionbucket.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbuo.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbuo.mutation.RemovedLockPaymentOrdersIDs(); len(nodes) > 0 && !pbuo.mutation.LockPaymentOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbuo.mutation.LockPaymentOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisionbucket.LockPaymentOrdersTable,
			Columns: []string{provisionbucket.LockPaymentOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbuo.mutation.ProviderProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbuo.mutation.RemovedProviderProfilesIDs(); len(nodes) > 0 && !pbuo.mutation.ProviderProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbuo.mutation.ProviderProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisionbucket.ProviderProfilesTable,
			Columns: provisionbucket.ProviderProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisionBucket{config: pbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionbucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pbuo.mutation.done = true
	return _node, nil
}
