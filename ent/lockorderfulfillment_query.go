// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/lockpaymentorder"
	"github.com/paycrest/aggregator/ent/predicate"
)

// LockOrderFulfillmentQuery is the builder for querying LockOrderFulfillment entities.
type LockOrderFulfillmentQuery struct {
	config
	ctx        *QueryContext
	order      []lockorderfulfillment.OrderOption
	inters     []Interceptor
	predicates []predicate.LockOrderFulfillment
	withOrder  *LockPaymentOrderQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LockOrderFulfillmentQuery builder.
func (lofq *LockOrderFulfillmentQuery) Where(ps ...predicate.LockOrderFulfillment) *LockOrderFulfillmentQuery {
	lofq.predicates = append(lofq.predicates, ps...)
	return lofq
}

// Limit the number of records to be returned by this query.
func (lofq *LockOrderFulfillmentQuery) Limit(limit int) *LockOrderFulfillmentQuery {
	lofq.ctx.Limit = &limit
	return lofq
}

// Offset to start from.
func (lofq *LockOrderFulfillmentQuery) Offset(offset int) *LockOrderFulfillmentQuery {
	lofq.ctx.Offset = &offset
	return lofq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lofq *LockOrderFulfillmentQuery) Unique(unique bool) *LockOrderFulfillmentQuery {
	lofq.ctx.Unique = &unique
	return lofq
}

// Order specifies how the records should be ordered.
func (lofq *LockOrderFulfillmentQuery) Order(o ...lockorderfulfillment.OrderOption) *LockOrderFulfillmentQuery {
	lofq.order = append(lofq.order, o...)
	return lofq
}

// QueryOrder chains the current query on the "order" edge.
func (lofq *LockOrderFulfillmentQuery) QueryOrder() *LockPaymentOrderQuery {
	query := (&LockPaymentOrderClient{config: lofq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lofq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lofq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lockorderfulfillment.Table, lockorderfulfillment.FieldID, selector),
			sqlgraph.To(lockpaymentorder.Table, lockpaymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lockorderfulfillment.OrderTable, lockorderfulfillment.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(lofq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LockOrderFulfillment entity from the query.
// Returns a *NotFoundError when no LockOrderFulfillment was found.
func (lofq *LockOrderFulfillmentQuery) First(ctx context.Context) (*LockOrderFulfillment, error) {
	nodes, err := lofq.Limit(1).All(setContextOp(ctx, lofq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lockorderfulfillment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) FirstX(ctx context.Context) *LockOrderFulfillment {
	node, err := lofq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LockOrderFulfillment ID from the query.
// Returns a *NotFoundError when no LockOrderFulfillment ID was found.
func (lofq *LockOrderFulfillmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lofq.Limit(1).IDs(setContextOp(ctx, lofq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lockorderfulfillment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := lofq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LockOrderFulfillment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LockOrderFulfillment entity is found.
// Returns a *NotFoundError when no LockOrderFulfillment entities are found.
func (lofq *LockOrderFulfillmentQuery) Only(ctx context.Context) (*LockOrderFulfillment, error) {
	nodes, err := lofq.Limit(2).All(setContextOp(ctx, lofq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lockorderfulfillment.Label}
	default:
		return nil, &NotSingularError{lockorderfulfillment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) OnlyX(ctx context.Context) *LockOrderFulfillment {
	node, err := lofq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LockOrderFulfillment ID in the query.
// Returns a *NotSingularError when more than one LockOrderFulfillment ID is found.
// Returns a *NotFoundError when no entities are found.
func (lofq *LockOrderFulfillmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lofq.Limit(2).IDs(setContextOp(ctx, lofq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lockorderfulfillment.Label}
	default:
		err = &NotSingularError{lockorderfulfillment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := lofq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LockOrderFulfillments.
func (lofq *LockOrderFulfillmentQuery) All(ctx context.Context) ([]*LockOrderFulfillment, error) {
	ctx = setContextOp(ctx, lofq.ctx, ent.OpQueryAll)
	if err := lofq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LockOrderFulfillment, *LockOrderFulfillmentQuery]()
	return withInterceptors[[]*LockOrderFulfillment](ctx, lofq, qr, lofq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) AllX(ctx context.Context) []*LockOrderFulfillment {
	nodes, err := lofq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LockOrderFulfillment IDs.
func (lofq *LockOrderFulfillmentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if lofq.ctx.Unique == nil && lofq.path != nil {
		lofq.Unique(true)
	}
	ctx = setContextOp(ctx, lofq.ctx, ent.OpQueryIDs)
	if err = lofq.Select(lockorderfulfillment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := lofq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lofq *LockOrderFulfillmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lofq.ctx, ent.OpQueryCount)
	if err := lofq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lofq, querierCount[*LockOrderFulfillmentQuery](), lofq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) CountX(ctx context.Context) int {
	count, err := lofq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lofq *LockOrderFulfillmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lofq.ctx, ent.OpQueryExist)
	switch _, err := lofq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lofq *LockOrderFulfillmentQuery) ExistX(ctx context.Context) bool {
	exist, err := lofq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LockOrderFulfillmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lofq *LockOrderFulfillmentQuery) Clone() *LockOrderFulfillmentQuery {
	if lofq == nil {
		return nil
	}
	return &LockOrderFulfillmentQuery{
		config:     lofq.config,
		ctx:        lofq.ctx.Clone(),
		order:      append([]lockorderfulfillment.OrderOption{}, lofq.order...),
		inters:     append([]Interceptor{}, lofq.inters...),
		predicates: append([]predicate.LockOrderFulfillment{}, lofq.predicates...),
		withOrder:  lofq.withOrder.Clone(),
		// clone intermediate query.
		sql:  lofq.sql.Clone(),
		path: lofq.path,
	}
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (lofq *LockOrderFulfillmentQuery) WithOrder(opts ...func(*LockPaymentOrderQuery)) *LockOrderFulfillmentQuery {
	query := (&LockPaymentOrderClient{config: lofq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lofq.withOrder = query
	return lofq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LockOrderFulfillment.Query().
//		GroupBy(lockorderfulfillment.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lofq *LockOrderFulfillmentQuery) GroupBy(field string, fields ...string) *LockOrderFulfillmentGroupBy {
	lofq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LockOrderFulfillmentGroupBy{build: lofq}
	grbuild.flds = &lofq.ctx.Fields
	grbuild.label = lockorderfulfillment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LockOrderFulfillment.Query().
//		Select(lockorderfulfillment.FieldCreatedAt).
//		Scan(ctx, &v)
func (lofq *LockOrderFulfillmentQuery) Select(fields ...string) *LockOrderFulfillmentSelect {
	lofq.ctx.Fields = append(lofq.ctx.Fields, fields...)
	sbuild := &LockOrderFulfillmentSelect{LockOrderFulfillmentQuery: lofq}
	sbuild.label = lockorderfulfillment.Label
	sbuild.flds, sbuild.scan = &lofq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LockOrderFulfillmentSelect configured with the given aggregations.
func (lofq *LockOrderFulfillmentQuery) Aggregate(fns ...AggregateFunc) *LockOrderFulfillmentSelect {
	return lofq.Select().Aggregate(fns...)
}

func (lofq *LockOrderFulfillmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lofq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lofq); err != nil {
				return err
			}
		}
	}
	for _, f := range lofq.ctx.Fields {
		if !lockorderfulfillment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lofq.path != nil {
		prev, err := lofq.path(ctx)
		if err != nil {
			return err
		}
		lofq.sql = prev
	}
	return nil
}

func (lofq *LockOrderFulfillmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LockOrderFulfillment, error) {
	var (
		nodes       = []*LockOrderFulfillment{}
		withFKs     = lofq.withFKs
		_spec       = lofq.querySpec()
		loadedTypes = [1]bool{
			lofq.withOrder != nil,
		}
	)
	if lofq.withOrder != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, lockorderfulfillment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LockOrderFulfillment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LockOrderFulfillment{config: lofq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lofq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lofq.withOrder; query != nil {
		if err := lofq.loadOrder(ctx, query, nodes, nil,
			func(n *LockOrderFulfillment, e *LockPaymentOrder) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lofq *LockOrderFulfillmentQuery) loadOrder(ctx context.Context, query *LockPaymentOrderQuery, nodes []*LockOrderFulfillment, init func(*LockOrderFulfillment), assign func(*LockOrderFulfillment, *LockPaymentOrder)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*LockOrderFulfillment)
	for i := range nodes {
		if nodes[i].lock_payment_order_fulfillments == nil {
			continue
		}
		fk := *nodes[i].lock_payment_order_fulfillments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lockpaymentorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lock_payment_order_fulfillments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lofq *LockOrderFulfillmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lofq.querySpec()
	_spec.Node.Columns = lofq.ctx.Fields
	if len(lofq.ctx.Fields) > 0 {
		_spec.Unique = lofq.ctx.Unique != nil && *lofq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lofq.driver, _spec)
}

func (lofq *LockOrderFulfillmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lockorderfulfillment.Table, lockorderfulfillment.Columns, sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID))
	_spec.From = lofq.sql
	if unique := lofq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lofq.path != nil {
		_spec.Unique = true
	}
	if fields := lofq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lockorderfulfillment.FieldID)
		for i := range fields {
			if fields[i] != lockorderfulfillment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lofq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lofq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lofq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lofq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lofq *LockOrderFulfillmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lofq.driver.Dialect())
	t1 := builder.Table(lockorderfulfillment.Table)
	columns := lofq.ctx.Fields
	if len(columns) == 0 {
		columns = lockorderfulfillment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lofq.sql != nil {
		selector = lofq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lofq.ctx.Unique != nil && *lofq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lofq.predicates {
		p(selector)
	}
	for _, p := range lofq.order {
		p(selector)
	}
	if offset := lofq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lofq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LockOrderFulfillmentGroupBy is the group-by builder for LockOrderFulfillment entities.
type LockOrderFulfillmentGroupBy struct {
	selector
	build *LockOrderFulfillmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lofgb *LockOrderFulfillmentGroupBy) Aggregate(fns ...AggregateFunc) *LockOrderFulfillmentGroupBy {
	lofgb.fns = append(lofgb.fns, fns...)
	return lofgb
}

// Scan applies the selector query and scans the result into the given value.
func (lofgb *LockOrderFulfillmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lofgb.build.ctx, ent.OpQueryGroupBy)
	if err := lofgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LockOrderFulfillmentQuery, *LockOrderFulfillmentGroupBy](ctx, lofgb.build, lofgb, lofgb.build.inters, v)
}

func (lofgb *LockOrderFulfillmentGroupBy) sqlScan(ctx context.Context, root *LockOrderFulfillmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lofgb.fns))
	for _, fn := range lofgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lofgb.flds)+len(lofgb.fns))
		for _, f := range *lofgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lofgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lofgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LockOrderFulfillmentSelect is the builder for selecting fields of LockOrderFulfillment entities.
type LockOrderFulfillmentSelect struct {
	*LockOrderFulfillmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lofs *LockOrderFulfillmentSelect) Aggregate(fns ...AggregateFunc) *LockOrderFulfillmentSelect {
	lofs.fns = append(lofs.fns, fns...)
	return lofs
}

// Scan applies the selector query and scans the result into the given value.
func (lofs *LockOrderFulfillmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lofs.ctx, ent.OpQuerySelect)
	if err := lofs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LockOrderFulfillmentQuery, *LockOrderFulfillmentSelect](ctx, lofs.LockOrderFulfillmentQuery, lofs, lofs.inters, v)
}

func (lofs *LockOrderFulfillmentSelect) sqlScan(ctx context.Context, root *LockOrderFulfillmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lofs.fns))
	for _, fn := range lofs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lofs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lofs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
