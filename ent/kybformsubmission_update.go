// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/beneficialowner"
	"github.com/paycrest/aggregator/ent/kybformsubmission"
	"github.com/paycrest/aggregator/ent/predicate"
	"github.com/paycrest/aggregator/ent/user"
)

// KYBFormSubmissionUpdate is the builder for updating KYBFormSubmission entities.
type KYBFormSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *KYBFormSubmissionMutation
}

// Where appends a list predicates to the KYBFormSubmissionUpdate builder.
func (kfsu *KYBFormSubmissionUpdate) Where(ps ...predicate.KYBFormSubmission) *KYBFormSubmissionUpdate {
	kfsu.mutation.Where(ps...)
	return kfsu
}

// SetUpdatedAt sets the "updated_at" field.
func (kfsu *KYBFormSubmissionUpdate) SetUpdatedAt(t time.Time) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetUpdatedAt(t)
	return kfsu
}

// SetEmail sets the "email" field.
func (kfsu *KYBFormSubmissionUpdate) SetEmail(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetEmail(s)
	return kfsu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableEmail(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetEmail(*s)
	}
	return kfsu
}

// SetCompanyName sets the "company_name" field.
func (kfsu *KYBFormSubmissionUpdate) SetCompanyName(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetCompanyName(s)
	return kfsu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableCompanyName(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetCompanyName(*s)
	}
	return kfsu
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kfsu *KYBFormSubmissionUpdate) SetRegisteredBusinessAddress(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetRegisteredBusinessAddress(s)
	return kfsu
}

// SetNillableRegisteredBusinessAddress sets the "registered_business_address" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableRegisteredBusinessAddress(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetRegisteredBusinessAddress(*s)
	}
	return kfsu
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetCertificateOfIncorporationURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetCertificateOfIncorporationURL(s)
	return kfsu
}

// SetNillableCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableCertificateOfIncorporationURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetCertificateOfIncorporationURL(*s)
	}
	return kfsu
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetArticlesOfIncorporationURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetArticlesOfIncorporationURL(s)
	return kfsu
}

// SetNillableArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableArticlesOfIncorporationURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetArticlesOfIncorporationURL(*s)
	}
	return kfsu
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetBusinessLicenseURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetBusinessLicenseURL(s)
	return kfsu
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableBusinessLicenseURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetBusinessLicenseURL(*s)
	}
	return kfsu
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (kfsu *KYBFormSubmissionUpdate) ClearBusinessLicenseURL() *KYBFormSubmissionUpdate {
	kfsu.mutation.ClearBusinessLicenseURL()
	return kfsu
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetProofOfBusinessAddressURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetProofOfBusinessAddressURL(s)
	return kfsu
}

// SetNillableProofOfBusinessAddressURL sets the "proof_of_business_address_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableProofOfBusinessAddressURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetProofOfBusinessAddressURL(*s)
	}
	return kfsu
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetProofOfResidentialAddressURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetProofOfResidentialAddressURL(s)
	return kfsu
}

// SetNillableProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableProofOfResidentialAddressURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetProofOfResidentialAddressURL(*s)
	}
	return kfsu
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetAmlPolicyURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetAmlPolicyURL(s)
	return kfsu
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableAmlPolicyURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetAmlPolicyURL(*s)
	}
	return kfsu
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (kfsu *KYBFormSubmissionUpdate) ClearAmlPolicyURL() *KYBFormSubmissionUpdate {
	kfsu.mutation.ClearAmlPolicyURL()
	return kfsu
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kfsu *KYBFormSubmissionUpdate) SetKycPolicyURL(s string) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetKycPolicyURL(s)
	return kfsu
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableKycPolicyURL(s *string) *KYBFormSubmissionUpdate {
	if s != nil {
		kfsu.SetKycPolicyURL(*s)
	}
	return kfsu
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (kfsu *KYBFormSubmissionUpdate) ClearKycPolicyURL() *KYBFormSubmissionUpdate {
	kfsu.mutation.ClearKycPolicyURL()
	return kfsu
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kfsu *KYBFormSubmissionUpdate) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBFormSubmissionUpdate {
	kfsu.mutation.AddBeneficialOwnerIDs(ids...)
	return kfsu
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kfsu *KYBFormSubmissionUpdate) AddBeneficialOwners(b ...*BeneficialOwner) *KYBFormSubmissionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kfsu.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kfsu *KYBFormSubmissionUpdate) SetUserID(id uuid.UUID) *KYBFormSubmissionUpdate {
	kfsu.mutation.SetUserID(id)
	return kfsu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kfsu *KYBFormSubmissionUpdate) SetNillableUserID(id *uuid.UUID) *KYBFormSubmissionUpdate {
	if id != nil {
		kfsu = kfsu.SetUserID(*id)
	}
	return kfsu
}

// SetUser sets the "user" edge to the User entity.
func (kfsu *KYBFormSubmissionUpdate) SetUser(u *User) *KYBFormSubmissionUpdate {
	return kfsu.SetUserID(u.ID)
}

// Mutation returns the KYBFormSubmissionMutation object of the builder.
func (kfsu *KYBFormSubmissionUpdate) Mutation() *KYBFormSubmissionMutation {
	return kfsu.mutation
}

// ClearBeneficialOwners clears all "beneficial_owners" edges to the BeneficialOwner entity.
func (kfsu *KYBFormSubmissionUpdate) ClearBeneficialOwners() *KYBFormSubmissionUpdate {
	kfsu.mutation.ClearBeneficialOwners()
	return kfsu
}

// RemoveBeneficialOwnerIDs removes the "beneficial_owners" edge to BeneficialOwner entities by IDs.
func (kfsu *KYBFormSubmissionUpdate) RemoveBeneficialOwnerIDs(ids ...uuid.UUID) *KYBFormSubmissionUpdate {
	kfsu.mutation.RemoveBeneficialOwnerIDs(ids...)
	return kfsu
}

// RemoveBeneficialOwners removes "beneficial_owners" edges to BeneficialOwner entities.
func (kfsu *KYBFormSubmissionUpdate) RemoveBeneficialOwners(b ...*BeneficialOwner) *KYBFormSubmissionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kfsu.RemoveBeneficialOwnerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (kfsu *KYBFormSubmissionUpdate) ClearUser() *KYBFormSubmissionUpdate {
	kfsu.mutation.ClearUser()
	return kfsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kfsu *KYBFormSubmissionUpdate) Save(ctx context.Context) (int, error) {
	kfsu.defaults()
	return withHooks(ctx, kfsu.sqlSave, kfsu.mutation, kfsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kfsu *KYBFormSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := kfsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kfsu *KYBFormSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := kfsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kfsu *KYBFormSubmissionUpdate) ExecX(ctx context.Context) {
	if err := kfsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kfsu *KYBFormSubmissionUpdate) defaults() {
	if _, ok := kfsu.mutation.UpdatedAt(); !ok {
		v := kybformsubmission.UpdateDefaultUpdatedAt()
		kfsu.mutation.SetUpdatedAt(v)
	}
}

func (kfsu *KYBFormSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kybformsubmission.Table, kybformsubmission.Columns, sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID))
	if ps := kfsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kfsu.mutation.UpdatedAt(); ok {
		_spec.SetField(kybformsubmission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kfsu.mutation.Email(); ok {
		_spec.SetField(kybformsubmission.FieldEmail, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.CompanyName(); ok {
		_spec.SetField(kybformsubmission.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybformsubmission.FieldRegisteredBusinessAddress, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldCertificateOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldArticlesOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybformsubmission.FieldBusinessLicenseURL, field.TypeString, value)
	}
	if kfsu.mutation.BusinessLicenseURLCleared() {
		_spec.ClearField(kybformsubmission.FieldBusinessLicenseURL, field.TypeString)
	}
	if value, ok := kfsu.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfBusinessAddressURL, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfResidentialAddressURL, field.TypeString, value)
	}
	if value, ok := kfsu.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldAmlPolicyURL, field.TypeString, value)
	}
	if kfsu.mutation.AmlPolicyURLCleared() {
		_spec.ClearField(kybformsubmission.FieldAmlPolicyURL, field.TypeString)
	}
	if value, ok := kfsu.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldKycPolicyURL, field.TypeString, value)
	}
	if kfsu.mutation.KycPolicyURLCleared() {
		_spec.ClearField(kybformsubmission.FieldKycPolicyURL, field.TypeString)
	}
	if kfsu.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsu.mutation.RemovedBeneficialOwnersIDs(); len(nodes) > 0 && !kfsu.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsu.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kfsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kybformsubmission.UserTable,
			Columns: []string{kybformsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kybformsubmission.UserTable,
			Columns: []string{kybformsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kfsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kybformsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kfsu.mutation.done = true
	return n, nil
}

// KYBFormSubmissionUpdateOne is the builder for updating a single KYBFormSubmission entity.
type KYBFormSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KYBFormSubmissionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetUpdatedAt(t time.Time) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetUpdatedAt(t)
	return kfsuo
}

// SetEmail sets the "email" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetEmail(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetEmail(s)
	return kfsuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableEmail(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetEmail(*s)
	}
	return kfsuo
}

// SetCompanyName sets the "company_name" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetCompanyName(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetCompanyName(s)
	return kfsuo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableCompanyName(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetCompanyName(*s)
	}
	return kfsuo
}

// SetRegisteredBusinessAddress sets the "registered_business_address" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetRegisteredBusinessAddress(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetRegisteredBusinessAddress(s)
	return kfsuo
}

// SetNillableRegisteredBusinessAddress sets the "registered_business_address" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableRegisteredBusinessAddress(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetRegisteredBusinessAddress(*s)
	}
	return kfsuo
}

// SetCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetCertificateOfIncorporationURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetCertificateOfIncorporationURL(s)
	return kfsuo
}

// SetNillableCertificateOfIncorporationURL sets the "certificate_of_incorporation_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableCertificateOfIncorporationURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetCertificateOfIncorporationURL(*s)
	}
	return kfsuo
}

// SetArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetArticlesOfIncorporationURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetArticlesOfIncorporationURL(s)
	return kfsuo
}

// SetNillableArticlesOfIncorporationURL sets the "articles_of_incorporation_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableArticlesOfIncorporationURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetArticlesOfIncorporationURL(*s)
	}
	return kfsuo
}

// SetBusinessLicenseURL sets the "business_license_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetBusinessLicenseURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetBusinessLicenseURL(s)
	return kfsuo
}

// SetNillableBusinessLicenseURL sets the "business_license_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableBusinessLicenseURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetBusinessLicenseURL(*s)
	}
	return kfsuo
}

// ClearBusinessLicenseURL clears the value of the "business_license_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) ClearBusinessLicenseURL() *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.ClearBusinessLicenseURL()
	return kfsuo
}

// SetProofOfBusinessAddressURL sets the "proof_of_business_address_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetProofOfBusinessAddressURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetProofOfBusinessAddressURL(s)
	return kfsuo
}

// SetNillableProofOfBusinessAddressURL sets the "proof_of_business_address_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableProofOfBusinessAddressURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetProofOfBusinessAddressURL(*s)
	}
	return kfsuo
}

// SetProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetProofOfResidentialAddressURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetProofOfResidentialAddressURL(s)
	return kfsuo
}

// SetNillableProofOfResidentialAddressURL sets the "proof_of_residential_address_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableProofOfResidentialAddressURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetProofOfResidentialAddressURL(*s)
	}
	return kfsuo
}

// SetAmlPolicyURL sets the "aml_policy_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetAmlPolicyURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetAmlPolicyURL(s)
	return kfsuo
}

// SetNillableAmlPolicyURL sets the "aml_policy_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableAmlPolicyURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetAmlPolicyURL(*s)
	}
	return kfsuo
}

// ClearAmlPolicyURL clears the value of the "aml_policy_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) ClearAmlPolicyURL() *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.ClearAmlPolicyURL()
	return kfsuo
}

// SetKycPolicyURL sets the "kyc_policy_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) SetKycPolicyURL(s string) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetKycPolicyURL(s)
	return kfsuo
}

// SetNillableKycPolicyURL sets the "kyc_policy_url" field if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableKycPolicyURL(s *string) *KYBFormSubmissionUpdateOne {
	if s != nil {
		kfsuo.SetKycPolicyURL(*s)
	}
	return kfsuo
}

// ClearKycPolicyURL clears the value of the "kyc_policy_url" field.
func (kfsuo *KYBFormSubmissionUpdateOne) ClearKycPolicyURL() *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.ClearKycPolicyURL()
	return kfsuo
}

// AddBeneficialOwnerIDs adds the "beneficial_owners" edge to the BeneficialOwner entity by IDs.
func (kfsuo *KYBFormSubmissionUpdateOne) AddBeneficialOwnerIDs(ids ...uuid.UUID) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.AddBeneficialOwnerIDs(ids...)
	return kfsuo
}

// AddBeneficialOwners adds the "beneficial_owners" edges to the BeneficialOwner entity.
func (kfsuo *KYBFormSubmissionUpdateOne) AddBeneficialOwners(b ...*BeneficialOwner) *KYBFormSubmissionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kfsuo.AddBeneficialOwnerIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kfsuo *KYBFormSubmissionUpdateOne) SetUserID(id uuid.UUID) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.SetUserID(id)
	return kfsuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kfsuo *KYBFormSubmissionUpdateOne) SetNillableUserID(id *uuid.UUID) *KYBFormSubmissionUpdateOne {
	if id != nil {
		kfsuo = kfsuo.SetUserID(*id)
	}
	return kfsuo
}

// SetUser sets the "user" edge to the User entity.
func (kfsuo *KYBFormSubmissionUpdateOne) SetUser(u *User) *KYBFormSubmissionUpdateOne {
	return kfsuo.SetUserID(u.ID)
}

// Mutation returns the KYBFormSubmissionMutation object of the builder.
func (kfsuo *KYBFormSubmissionUpdateOne) Mutation() *KYBFormSubmissionMutation {
	return kfsuo.mutation
}

// ClearBeneficialOwners clears all "beneficial_owners" edges to the BeneficialOwner entity.
func (kfsuo *KYBFormSubmissionUpdateOne) ClearBeneficialOwners() *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.ClearBeneficialOwners()
	return kfsuo
}

// RemoveBeneficialOwnerIDs removes the "beneficial_owners" edge to BeneficialOwner entities by IDs.
func (kfsuo *KYBFormSubmissionUpdateOne) RemoveBeneficialOwnerIDs(ids ...uuid.UUID) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.RemoveBeneficialOwnerIDs(ids...)
	return kfsuo
}

// RemoveBeneficialOwners removes "beneficial_owners" edges to BeneficialOwner entities.
func (kfsuo *KYBFormSubmissionUpdateOne) RemoveBeneficialOwners(b ...*BeneficialOwner) *KYBFormSubmissionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kfsuo.RemoveBeneficialOwnerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (kfsuo *KYBFormSubmissionUpdateOne) ClearUser() *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.ClearUser()
	return kfsuo
}

// Where appends a list predicates to the KYBFormSubmissionUpdate builder.
func (kfsuo *KYBFormSubmissionUpdateOne) Where(ps ...predicate.KYBFormSubmission) *KYBFormSubmissionUpdateOne {
	kfsuo.mutation.Where(ps...)
	return kfsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kfsuo *KYBFormSubmissionUpdateOne) Select(field string, fields ...string) *KYBFormSubmissionUpdateOne {
	kfsuo.fields = append([]string{field}, fields...)
	return kfsuo
}

// Save executes the query and returns the updated KYBFormSubmission entity.
func (kfsuo *KYBFormSubmissionUpdateOne) Save(ctx context.Context) (*KYBFormSubmission, error) {
	kfsuo.defaults()
	return withHooks(ctx, kfsuo.sqlSave, kfsuo.mutation, kfsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kfsuo *KYBFormSubmissionUpdateOne) SaveX(ctx context.Context) *KYBFormSubmission {
	node, err := kfsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kfsuo *KYBFormSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := kfsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kfsuo *KYBFormSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := kfsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kfsuo *KYBFormSubmissionUpdateOne) defaults() {
	if _, ok := kfsuo.mutation.UpdatedAt(); !ok {
		v := kybformsubmission.UpdateDefaultUpdatedAt()
		kfsuo.mutation.SetUpdatedAt(v)
	}
}

func (kfsuo *KYBFormSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *KYBFormSubmission, err error) {
	_spec := sqlgraph.NewUpdateSpec(kybformsubmission.Table, kybformsubmission.Columns, sqlgraph.NewFieldSpec(kybformsubmission.FieldID, field.TypeUUID))
	id, ok := kfsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KYBFormSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kfsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kybformsubmission.FieldID)
		for _, f := range fields {
			if !kybformsubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kybformsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kfsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kfsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(kybformsubmission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kfsuo.mutation.Email(); ok {
		_spec.SetField(kybformsubmission.FieldEmail, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.CompanyName(); ok {
		_spec.SetField(kybformsubmission.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.RegisteredBusinessAddress(); ok {
		_spec.SetField(kybformsubmission.FieldRegisteredBusinessAddress, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.CertificateOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldCertificateOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.ArticlesOfIncorporationURL(); ok {
		_spec.SetField(kybformsubmission.FieldArticlesOfIncorporationURL, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.BusinessLicenseURL(); ok {
		_spec.SetField(kybformsubmission.FieldBusinessLicenseURL, field.TypeString, value)
	}
	if kfsuo.mutation.BusinessLicenseURLCleared() {
		_spec.ClearField(kybformsubmission.FieldBusinessLicenseURL, field.TypeString)
	}
	if value, ok := kfsuo.mutation.ProofOfBusinessAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfBusinessAddressURL, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.ProofOfResidentialAddressURL(); ok {
		_spec.SetField(kybformsubmission.FieldProofOfResidentialAddressURL, field.TypeString, value)
	}
	if value, ok := kfsuo.mutation.AmlPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldAmlPolicyURL, field.TypeString, value)
	}
	if kfsuo.mutation.AmlPolicyURLCleared() {
		_spec.ClearField(kybformsubmission.FieldAmlPolicyURL, field.TypeString)
	}
	if value, ok := kfsuo.mutation.KycPolicyURL(); ok {
		_spec.SetField(kybformsubmission.FieldKycPolicyURL, field.TypeString, value)
	}
	if kfsuo.mutation.KycPolicyURLCleared() {
		_spec.ClearField(kybformsubmission.FieldKycPolicyURL, field.TypeString)
	}
	if kfsuo.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsuo.mutation.RemovedBeneficialOwnersIDs(); len(nodes) > 0 && !kfsuo.mutation.BeneficialOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsuo.mutation.BeneficialOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kybformsubmission.BeneficialOwnersTable,
			Columns: []string{kybformsubmission.BeneficialOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beneficialowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kfsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kybformsubmission.UserTable,
			Columns: []string{kybformsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kfsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kybformsubmission.UserTable,
			Columns: []string{kybformsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KYBFormSubmission{config: kfsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kfsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kybformsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kfsuo.mutation.done = true
	return _node, nil
}
