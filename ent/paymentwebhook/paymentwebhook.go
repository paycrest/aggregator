// Code generated by ent, DO NOT EDIT.

package paymentwebhook

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the paymentwebhook type in the database.
	Label = "payment_webhook"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldWebhookID holds the string denoting the webhook_id field in the database.
	FieldWebhookID = "webhook_id"
	// FieldWebhookSecret holds the string denoting the webhook_secret field in the database.
	FieldWebhookSecret = "webhook_secret"
	// FieldCallbackURL holds the string denoting the callback_url field in the database.
	FieldCallbackURL = "callback_url"
	// EdgePaymentOrder holds the string denoting the payment_order edge name in mutations.
	EdgePaymentOrder = "payment_order"
	// EdgeNetwork holds the string denoting the network edge name in mutations.
	EdgeNetwork = "network"
	// Table holds the table name of the paymentwebhook in the database.
	Table = "payment_webhooks"
	// PaymentOrderTable is the table that holds the payment_order relation/edge.
	PaymentOrderTable = "payment_webhooks"
	// PaymentOrderInverseTable is the table name for the PaymentOrder entity.
	// It exists in this package in order to avoid circular dependency with the "paymentorder" package.
	PaymentOrderInverseTable = "payment_orders"
	// PaymentOrderColumn is the table column denoting the payment_order relation/edge.
	PaymentOrderColumn = "payment_order_payment_webhook"
	// NetworkTable is the table that holds the network relation/edge.
	NetworkTable = "payment_webhooks"
	// NetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	NetworkInverseTable = "networks"
	// NetworkColumn is the table column denoting the network relation/edge.
	NetworkColumn = "network_payment_webhook"
)

// Columns holds all SQL columns for paymentwebhook fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldWebhookID,
	FieldWebhookSecret,
	FieldCallbackURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payment_webhooks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"network_payment_webhook",
	"payment_order_payment_webhook",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// WebhookIDValidator is a validator for the "webhook_id" field. It is called by the builders before save.
	WebhookIDValidator func(string) error
	// WebhookSecretValidator is a validator for the "webhook_secret" field. It is called by the builders before save.
	WebhookSecretValidator func(string) error
	// CallbackURLValidator is a validator for the "callback_url" field. It is called by the builders before save.
	CallbackURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PaymentWebhook queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWebhookID orders the results by the webhook_id field.
func ByWebhookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookID, opts...).ToFunc()
}

// ByWebhookSecret orders the results by the webhook_secret field.
func ByWebhookSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookSecret, opts...).ToFunc()
}

// ByCallbackURL orders the results by the callback_url field.
func ByCallbackURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallbackURL, opts...).ToFunc()
}

// ByPaymentOrderField orders the results by payment_order field.
func ByPaymentOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByNetworkField orders the results by network field.
func ByNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNetworkStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaymentOrderTable, PaymentOrderColumn),
	)
}
func newNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, NetworkTable, NetworkColumn),
	)
}
