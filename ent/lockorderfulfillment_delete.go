// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/aggregator/ent/lockorderfulfillment"
	"github.com/paycrest/aggregator/ent/predicate"
)

// LockOrderFulfillmentDelete is the builder for deleting a LockOrderFulfillment entity.
type LockOrderFulfillmentDelete struct {
	config
	hooks    []Hook
	mutation *LockOrderFulfillmentMutation
}

// Where appends a list predicates to the LockOrderFulfillmentDelete builder.
func (lofd *LockOrderFulfillmentDelete) Where(ps ...predicate.LockOrderFulfillment) *LockOrderFulfillmentDelete {
	lofd.mutation.Where(ps...)
	return lofd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lofd *LockOrderFulfillmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lofd.sqlExec, lofd.mutation, lofd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lofd *LockOrderFulfillmentDelete) ExecX(ctx context.Context) int {
	n, err := lofd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lofd *LockOrderFulfillmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lockorderfulfillment.Table, sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID))
	if ps := lofd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lofd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lofd.mutation.done = true
	return affected, err
}

// LockOrderFulfillmentDeleteOne is the builder for deleting a single LockOrderFulfillment entity.
type LockOrderFulfillmentDeleteOne struct {
	lofd *LockOrderFulfillmentDelete
}

// Where appends a list predicates to the LockOrderFulfillmentDelete builder.
func (lofdo *LockOrderFulfillmentDeleteOne) Where(ps ...predicate.LockOrderFulfillment) *LockOrderFulfillmentDeleteOne {
	lofdo.lofd.mutation.Where(ps...)
	return lofdo
}

// Exec executes the deletion query.
func (lofdo *LockOrderFulfillmentDeleteOne) Exec(ctx context.Context) error {
	n, err := lofdo.lofd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lockorderfulfillment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lofdo *LockOrderFulfillmentDeleteOne) ExecX(ctx context.Context) {
	if err := lofdo.Exec(ctx); err != nil {
		panic(err)
	}
}
