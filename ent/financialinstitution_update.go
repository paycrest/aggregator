// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/fiatcurrency"
	"github.com/paycrest/protocol/ent/financialinstitution"
	"github.com/paycrest/protocol/ent/predicate"
)

// FinancialInstitutionUpdate is the builder for updating FinancialInstitution entities.
type FinancialInstitutionUpdate struct {
	config
	hooks    []Hook
	mutation *FinancialInstitutionMutation
}

// Where appends a list predicates to the FinancialInstitutionUpdate builder.
func (fiu *FinancialInstitutionUpdate) Where(ps ...predicate.FinancialInstitution) *FinancialInstitutionUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetName sets the "name" field.
func (fiu *FinancialInstitutionUpdate) SetName(s string) *FinancialInstitutionUpdate {
	fiu.mutation.SetName(s)
	return fiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fiu *FinancialInstitutionUpdate) SetNillableName(s *string) *FinancialInstitutionUpdate {
	if s != nil {
		fiu.SetName(*s)
	}
	return fiu
}

// ClearName clears the value of the "name" field.
func (fiu *FinancialInstitutionUpdate) ClearName() *FinancialInstitutionUpdate {
	fiu.mutation.ClearName()
	return fiu
}

// SetType sets the "Type" field.
func (fiu *FinancialInstitutionUpdate) SetType(s string) *FinancialInstitutionUpdate {
	fiu.mutation.SetType(s)
	return fiu
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (fiu *FinancialInstitutionUpdate) SetNillableType(s *string) *FinancialInstitutionUpdate {
	if s != nil {
		fiu.SetType(*s)
	}
	return fiu
}

// ClearType clears the value of the "Type" field.
func (fiu *FinancialInstitutionUpdate) ClearType() *FinancialInstitutionUpdate {
	fiu.mutation.ClearType()
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FinancialInstitutionUpdate) SetUpdatedAt(t time.Time) *FinancialInstitutionUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fiu *FinancialInstitutionUpdate) SetNillableUpdatedAt(t *time.Time) *FinancialInstitutionUpdate {
	if t != nil {
		fiu.SetUpdatedAt(*t)
	}
	return fiu
}

// SetFiatID sets the "fiat" edge to the FiatCurrency entity by ID.
func (fiu *FinancialInstitutionUpdate) SetFiatID(id uuid.UUID) *FinancialInstitutionUpdate {
	fiu.mutation.SetFiatID(id)
	return fiu
}

// SetNillableFiatID sets the "fiat" edge to the FiatCurrency entity by ID if the given value is not nil.
func (fiu *FinancialInstitutionUpdate) SetNillableFiatID(id *uuid.UUID) *FinancialInstitutionUpdate {
	if id != nil {
		fiu = fiu.SetFiatID(*id)
	}
	return fiu
}

// SetFiat sets the "fiat" edge to the FiatCurrency entity.
func (fiu *FinancialInstitutionUpdate) SetFiat(f *FiatCurrency) *FinancialInstitutionUpdate {
	return fiu.SetFiatID(f.ID)
}

// Mutation returns the FinancialInstitutionMutation object of the builder.
func (fiu *FinancialInstitutionUpdate) Mutation() *FinancialInstitutionMutation {
	return fiu.mutation
}

// ClearFiat clears the "fiat" edge to the FiatCurrency entity.
func (fiu *FinancialInstitutionUpdate) ClearFiat() *FinancialInstitutionUpdate {
	fiu.mutation.ClearFiat()
	return fiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FinancialInstitutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FinancialInstitutionUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FinancialInstitutionUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FinancialInstitutionUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiu *FinancialInstitutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(financialinstitution.Table, financialinstitution.Columns, sqlgraph.NewFieldSpec(financialinstitution.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Name(); ok {
		_spec.SetField(financialinstitution.FieldName, field.TypeString, value)
	}
	if fiu.mutation.NameCleared() {
		_spec.ClearField(financialinstitution.FieldName, field.TypeString)
	}
	if value, ok := fiu.mutation.GetType(); ok {
		_spec.SetField(financialinstitution.FieldType, field.TypeString, value)
	}
	if fiu.mutation.TypeCleared() {
		_spec.ClearField(financialinstitution.FieldType, field.TypeString)
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.SetField(financialinstitution.FieldUpdatedAt, field.TypeTime, value)
	}
	if fiu.mutation.FiatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialinstitution.FiatTable,
			Columns: []string{financialinstitution.FiatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FiatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialinstitution.FiatTable,
			Columns: []string{financialinstitution.FiatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financialinstitution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FinancialInstitutionUpdateOne is the builder for updating a single FinancialInstitution entity.
type FinancialInstitutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinancialInstitutionMutation
}

// SetName sets the "name" field.
func (fiuo *FinancialInstitutionUpdateOne) SetName(s string) *FinancialInstitutionUpdateOne {
	fiuo.mutation.SetName(s)
	return fiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fiuo *FinancialInstitutionUpdateOne) SetNillableName(s *string) *FinancialInstitutionUpdateOne {
	if s != nil {
		fiuo.SetName(*s)
	}
	return fiuo
}

// ClearName clears the value of the "name" field.
func (fiuo *FinancialInstitutionUpdateOne) ClearName() *FinancialInstitutionUpdateOne {
	fiuo.mutation.ClearName()
	return fiuo
}

// SetType sets the "Type" field.
func (fiuo *FinancialInstitutionUpdateOne) SetType(s string) *FinancialInstitutionUpdateOne {
	fiuo.mutation.SetType(s)
	return fiuo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (fiuo *FinancialInstitutionUpdateOne) SetNillableType(s *string) *FinancialInstitutionUpdateOne {
	if s != nil {
		fiuo.SetType(*s)
	}
	return fiuo
}

// ClearType clears the value of the "Type" field.
func (fiuo *FinancialInstitutionUpdateOne) ClearType() *FinancialInstitutionUpdateOne {
	fiuo.mutation.ClearType()
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FinancialInstitutionUpdateOne) SetUpdatedAt(t time.Time) *FinancialInstitutionUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fiuo *FinancialInstitutionUpdateOne) SetNillableUpdatedAt(t *time.Time) *FinancialInstitutionUpdateOne {
	if t != nil {
		fiuo.SetUpdatedAt(*t)
	}
	return fiuo
}

// SetFiatID sets the "fiat" edge to the FiatCurrency entity by ID.
func (fiuo *FinancialInstitutionUpdateOne) SetFiatID(id uuid.UUID) *FinancialInstitutionUpdateOne {
	fiuo.mutation.SetFiatID(id)
	return fiuo
}

// SetNillableFiatID sets the "fiat" edge to the FiatCurrency entity by ID if the given value is not nil.
func (fiuo *FinancialInstitutionUpdateOne) SetNillableFiatID(id *uuid.UUID) *FinancialInstitutionUpdateOne {
	if id != nil {
		fiuo = fiuo.SetFiatID(*id)
	}
	return fiuo
}

// SetFiat sets the "fiat" edge to the FiatCurrency entity.
func (fiuo *FinancialInstitutionUpdateOne) SetFiat(f *FiatCurrency) *FinancialInstitutionUpdateOne {
	return fiuo.SetFiatID(f.ID)
}

// Mutation returns the FinancialInstitutionMutation object of the builder.
func (fiuo *FinancialInstitutionUpdateOne) Mutation() *FinancialInstitutionMutation {
	return fiuo.mutation
}

// ClearFiat clears the "fiat" edge to the FiatCurrency entity.
func (fiuo *FinancialInstitutionUpdateOne) ClearFiat() *FinancialInstitutionUpdateOne {
	fiuo.mutation.ClearFiat()
	return fiuo
}

// Where appends a list predicates to the FinancialInstitutionUpdate builder.
func (fiuo *FinancialInstitutionUpdateOne) Where(ps ...predicate.FinancialInstitution) *FinancialInstitutionUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FinancialInstitutionUpdateOne) Select(field string, fields ...string) *FinancialInstitutionUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FinancialInstitution entity.
func (fiuo *FinancialInstitutionUpdateOne) Save(ctx context.Context) (*FinancialInstitution, error) {
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FinancialInstitutionUpdateOne) SaveX(ctx context.Context) *FinancialInstitution {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FinancialInstitutionUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FinancialInstitutionUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiuo *FinancialInstitutionUpdateOne) sqlSave(ctx context.Context) (_node *FinancialInstitution, err error) {
	_spec := sqlgraph.NewUpdateSpec(financialinstitution.Table, financialinstitution.Columns, sqlgraph.NewFieldSpec(financialinstitution.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinancialInstitution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, financialinstitution.FieldID)
		for _, f := range fields {
			if !financialinstitution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != financialinstitution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.Name(); ok {
		_spec.SetField(financialinstitution.FieldName, field.TypeString, value)
	}
	if fiuo.mutation.NameCleared() {
		_spec.ClearField(financialinstitution.FieldName, field.TypeString)
	}
	if value, ok := fiuo.mutation.GetType(); ok {
		_spec.SetField(financialinstitution.FieldType, field.TypeString, value)
	}
	if fiuo.mutation.TypeCleared() {
		_spec.ClearField(financialinstitution.FieldType, field.TypeString)
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(financialinstitution.FieldUpdatedAt, field.TypeTime, value)
	}
	if fiuo.mutation.FiatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialinstitution.FiatTable,
			Columns: []string{financialinstitution.FiatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FiatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialinstitution.FiatTable,
			Columns: []string{financialinstitution.FiatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinancialInstitution{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financialinstitution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
