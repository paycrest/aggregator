// Code generated by ent, DO NOT EDIT.

package senderprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/paycrest/aggregator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldID, id))
}

// WebhookURL applies equality check predicate on the "webhook_url" field. It's identical to WebhookURLEQ.
func WebhookURL(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldWebhookURL, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldProviderID, v))
}

// MonthlyVolume applies equality check predicate on the "monthly_volume" field. It's identical to MonthlyVolumeEQ.
func MonthlyVolume(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldMonthlyVolume, v))
}

// BusinessWebsite applies equality check predicate on the "business_website" field. It's identical to BusinessWebsiteEQ.
func BusinessWebsite(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldBusinessWebsite, v))
}

// NatureOfBusiness applies equality check predicate on the "nature_of_business" field. It's identical to NatureOfBusinessEQ.
func NatureOfBusiness(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldNatureOfBusiness, v))
}

// IsPartner applies equality check predicate on the "is_partner" field. It's identical to IsPartnerEQ.
func IsPartner(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldIsPartner, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldIsActive, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// WebhookURLEQ applies the EQ predicate on the "webhook_url" field.
func WebhookURLEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldWebhookURL, v))
}

// WebhookURLNEQ applies the NEQ predicate on the "webhook_url" field.
func WebhookURLNEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldWebhookURL, v))
}

// WebhookURLIn applies the In predicate on the "webhook_url" field.
func WebhookURLIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldWebhookURL, vs...))
}

// WebhookURLNotIn applies the NotIn predicate on the "webhook_url" field.
func WebhookURLNotIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldWebhookURL, vs...))
}

// WebhookURLGT applies the GT predicate on the "webhook_url" field.
func WebhookURLGT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldWebhookURL, v))
}

// WebhookURLGTE applies the GTE predicate on the "webhook_url" field.
func WebhookURLGTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldWebhookURL, v))
}

// WebhookURLLT applies the LT predicate on the "webhook_url" field.
func WebhookURLLT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldWebhookURL, v))
}

// WebhookURLLTE applies the LTE predicate on the "webhook_url" field.
func WebhookURLLTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldWebhookURL, v))
}

// WebhookURLContains applies the Contains predicate on the "webhook_url" field.
func WebhookURLContains(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContains(FieldWebhookURL, v))
}

// WebhookURLHasPrefix applies the HasPrefix predicate on the "webhook_url" field.
func WebhookURLHasPrefix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasPrefix(FieldWebhookURL, v))
}

// WebhookURLHasSuffix applies the HasSuffix predicate on the "webhook_url" field.
func WebhookURLHasSuffix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasSuffix(FieldWebhookURL, v))
}

// WebhookURLIsNil applies the IsNil predicate on the "webhook_url" field.
func WebhookURLIsNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIsNull(FieldWebhookURL))
}

// WebhookURLNotNil applies the NotNil predicate on the "webhook_url" field.
func WebhookURLNotNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotNull(FieldWebhookURL))
}

// WebhookURLEqualFold applies the EqualFold predicate on the "webhook_url" field.
func WebhookURLEqualFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEqualFold(FieldWebhookURL, v))
}

// WebhookURLContainsFold applies the ContainsFold predicate on the "webhook_url" field.
func WebhookURLContainsFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContainsFold(FieldWebhookURL, v))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDIsNil applies the IsNil predicate on the "provider_id" field.
func ProviderIDIsNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIsNull(FieldProviderID))
}

// ProviderIDNotNil applies the NotNil predicate on the "provider_id" field.
func ProviderIDNotNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotNull(FieldProviderID))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContainsFold(FieldProviderID, v))
}

// MonthlyVolumeEQ applies the EQ predicate on the "monthly_volume" field.
func MonthlyVolumeEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldMonthlyVolume, v))
}

// MonthlyVolumeNEQ applies the NEQ predicate on the "monthly_volume" field.
func MonthlyVolumeNEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldMonthlyVolume, v))
}

// MonthlyVolumeIn applies the In predicate on the "monthly_volume" field.
func MonthlyVolumeIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldMonthlyVolume, vs...))
}

// MonthlyVolumeNotIn applies the NotIn predicate on the "monthly_volume" field.
func MonthlyVolumeNotIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldMonthlyVolume, vs...))
}

// MonthlyVolumeGT applies the GT predicate on the "monthly_volume" field.
func MonthlyVolumeGT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldMonthlyVolume, v))
}

// MonthlyVolumeGTE applies the GTE predicate on the "monthly_volume" field.
func MonthlyVolumeGTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldMonthlyVolume, v))
}

// MonthlyVolumeLT applies the LT predicate on the "monthly_volume" field.
func MonthlyVolumeLT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldMonthlyVolume, v))
}

// MonthlyVolumeLTE applies the LTE predicate on the "monthly_volume" field.
func MonthlyVolumeLTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldMonthlyVolume, v))
}

// MonthlyVolumeContains applies the Contains predicate on the "monthly_volume" field.
func MonthlyVolumeContains(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContains(FieldMonthlyVolume, v))
}

// MonthlyVolumeHasPrefix applies the HasPrefix predicate on the "monthly_volume" field.
func MonthlyVolumeHasPrefix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasPrefix(FieldMonthlyVolume, v))
}

// MonthlyVolumeHasSuffix applies the HasSuffix predicate on the "monthly_volume" field.
func MonthlyVolumeHasSuffix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasSuffix(FieldMonthlyVolume, v))
}

// MonthlyVolumeIsNil applies the IsNil predicate on the "monthly_volume" field.
func MonthlyVolumeIsNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIsNull(FieldMonthlyVolume))
}

// MonthlyVolumeNotNil applies the NotNil predicate on the "monthly_volume" field.
func MonthlyVolumeNotNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotNull(FieldMonthlyVolume))
}

// MonthlyVolumeEqualFold applies the EqualFold predicate on the "monthly_volume" field.
func MonthlyVolumeEqualFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEqualFold(FieldMonthlyVolume, v))
}

// MonthlyVolumeContainsFold applies the ContainsFold predicate on the "monthly_volume" field.
func MonthlyVolumeContainsFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContainsFold(FieldMonthlyVolume, v))
}

// BusinessWebsiteEQ applies the EQ predicate on the "business_website" field.
func BusinessWebsiteEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldBusinessWebsite, v))
}

// BusinessWebsiteNEQ applies the NEQ predicate on the "business_website" field.
func BusinessWebsiteNEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldBusinessWebsite, v))
}

// BusinessWebsiteIn applies the In predicate on the "business_website" field.
func BusinessWebsiteIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldBusinessWebsite, vs...))
}

// BusinessWebsiteNotIn applies the NotIn predicate on the "business_website" field.
func BusinessWebsiteNotIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldBusinessWebsite, vs...))
}

// BusinessWebsiteGT applies the GT predicate on the "business_website" field.
func BusinessWebsiteGT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldBusinessWebsite, v))
}

// BusinessWebsiteGTE applies the GTE predicate on the "business_website" field.
func BusinessWebsiteGTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldBusinessWebsite, v))
}

// BusinessWebsiteLT applies the LT predicate on the "business_website" field.
func BusinessWebsiteLT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldBusinessWebsite, v))
}

// BusinessWebsiteLTE applies the LTE predicate on the "business_website" field.
func BusinessWebsiteLTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldBusinessWebsite, v))
}

// BusinessWebsiteContains applies the Contains predicate on the "business_website" field.
func BusinessWebsiteContains(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContains(FieldBusinessWebsite, v))
}

// BusinessWebsiteHasPrefix applies the HasPrefix predicate on the "business_website" field.
func BusinessWebsiteHasPrefix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasPrefix(FieldBusinessWebsite, v))
}

// BusinessWebsiteHasSuffix applies the HasSuffix predicate on the "business_website" field.
func BusinessWebsiteHasSuffix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasSuffix(FieldBusinessWebsite, v))
}

// BusinessWebsiteIsNil applies the IsNil predicate on the "business_website" field.
func BusinessWebsiteIsNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIsNull(FieldBusinessWebsite))
}

// BusinessWebsiteNotNil applies the NotNil predicate on the "business_website" field.
func BusinessWebsiteNotNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotNull(FieldBusinessWebsite))
}

// BusinessWebsiteEqualFold applies the EqualFold predicate on the "business_website" field.
func BusinessWebsiteEqualFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEqualFold(FieldBusinessWebsite, v))
}

// BusinessWebsiteContainsFold applies the ContainsFold predicate on the "business_website" field.
func BusinessWebsiteContainsFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContainsFold(FieldBusinessWebsite, v))
}

// NatureOfBusinessEQ applies the EQ predicate on the "nature_of_business" field.
func NatureOfBusinessEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldNatureOfBusiness, v))
}

// NatureOfBusinessNEQ applies the NEQ predicate on the "nature_of_business" field.
func NatureOfBusinessNEQ(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldNatureOfBusiness, v))
}

// NatureOfBusinessIn applies the In predicate on the "nature_of_business" field.
func NatureOfBusinessIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldNatureOfBusiness, vs...))
}

// NatureOfBusinessNotIn applies the NotIn predicate on the "nature_of_business" field.
func NatureOfBusinessNotIn(vs ...string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldNatureOfBusiness, vs...))
}

// NatureOfBusinessGT applies the GT predicate on the "nature_of_business" field.
func NatureOfBusinessGT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldNatureOfBusiness, v))
}

// NatureOfBusinessGTE applies the GTE predicate on the "nature_of_business" field.
func NatureOfBusinessGTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldNatureOfBusiness, v))
}

// NatureOfBusinessLT applies the LT predicate on the "nature_of_business" field.
func NatureOfBusinessLT(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldNatureOfBusiness, v))
}

// NatureOfBusinessLTE applies the LTE predicate on the "nature_of_business" field.
func NatureOfBusinessLTE(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldNatureOfBusiness, v))
}

// NatureOfBusinessContains applies the Contains predicate on the "nature_of_business" field.
func NatureOfBusinessContains(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContains(FieldNatureOfBusiness, v))
}

// NatureOfBusinessHasPrefix applies the HasPrefix predicate on the "nature_of_business" field.
func NatureOfBusinessHasPrefix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasPrefix(FieldNatureOfBusiness, v))
}

// NatureOfBusinessHasSuffix applies the HasSuffix predicate on the "nature_of_business" field.
func NatureOfBusinessHasSuffix(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldHasSuffix(FieldNatureOfBusiness, v))
}

// NatureOfBusinessIsNil applies the IsNil predicate on the "nature_of_business" field.
func NatureOfBusinessIsNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIsNull(FieldNatureOfBusiness))
}

// NatureOfBusinessNotNil applies the NotNil predicate on the "nature_of_business" field.
func NatureOfBusinessNotNil() predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotNull(FieldNatureOfBusiness))
}

// NatureOfBusinessEqualFold applies the EqualFold predicate on the "nature_of_business" field.
func NatureOfBusinessEqualFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEqualFold(FieldNatureOfBusiness, v))
}

// NatureOfBusinessContainsFold applies the ContainsFold predicate on the "nature_of_business" field.
func NatureOfBusinessContainsFold(v string) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldContainsFold(FieldNatureOfBusiness, v))
}

// IsPartnerEQ applies the EQ predicate on the "is_partner" field.
func IsPartnerEQ(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldIsPartner, v))
}

// IsPartnerNEQ applies the NEQ predicate on the "is_partner" field.
func IsPartnerNEQ(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldIsPartner, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldIsActive, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SenderProfile {
	return predicate.SenderProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKey applies the HasEdge predicate on the "api_key" edge.
func HasAPIKey() predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, APIKeyTable, APIKeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeyWith applies the HasEdge predicate on the "api_key" edge with a given conditions (other predicates).
func HasAPIKeyWith(preds ...predicate.APIKey) predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := newAPIKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentOrders applies the HasEdge predicate on the "payment_orders" edge.
func HasPaymentOrders() predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentOrdersTable, PaymentOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentOrdersWith applies the HasEdge predicate on the "payment_orders" edge with a given conditions (other predicates).
func HasPaymentOrdersWith(preds ...predicate.PaymentOrder) predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := newPaymentOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderTokens applies the HasEdge predicate on the "order_tokens" edge.
func HasOrderTokens() predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTokensTable, OrderTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderTokensWith applies the HasEdge predicate on the "order_tokens" edge with a given conditions (other predicates).
func HasOrderTokensWith(preds ...predicate.SenderOrderToken) predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := newOrderTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinkedAddress applies the HasEdge predicate on the "linked_address" edge.
func HasLinkedAddress() predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinkedAddressTable, LinkedAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinkedAddressWith applies the HasEdge predicate on the "linked_address" edge with a given conditions (other predicates).
func HasLinkedAddressWith(preds ...predicate.LinkedAddress) predicate.SenderProfile {
	return predicate.SenderProfile(func(s *sql.Selector) {
		step := newLinkedAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SenderProfile) predicate.SenderProfile {
	return predicate.SenderProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SenderProfile) predicate.SenderProfile {
	return predicate.SenderProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SenderProfile) predicate.SenderProfile {
	return predicate.SenderProfile(sql.NotPredicates(p))
}
